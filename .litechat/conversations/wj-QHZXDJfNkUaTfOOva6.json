{
  "conversation": {
    "id": "wj-QHZXDJfNkUaTfOOva6",
    "createdAt": "2025-06-16T19:40:16.077Z",
    "updatedAt": "2025-06-16T19:41:28.197Z",
    "title": "New Chat",
    "projectId": null,
    "metadata": {
      "enabledTools": [],
      "toolMaxStepsOverride": null
    },
    "syncRepoId": "eCsyh5UyWqvn3ypx2lDCX"
  },
  "interactions": [
    {
      "id": "Az8Xtr_ntBU4Jqvsi6L5O",
      "conversationId": "wj-QHZXDJfNkUaTfOOva6",
      "type": "message.user_assistant",
      "prompt": {
        "id": "NkccgS9yoC7Z3q7PKo9f2",
        "content": "attached are several prompts I used to create an application (not in sequential, or any, order)., and a packaged version of the app repo is also attached\n\nreview the prompts and my repo thoroughly and create both:\n\n(1) a consolidated description of the app, its functionality, etc for me to use as context in future prompts related to improving the app and researching data feed/API integration options;\ndkl\n(2) draft documentation for my app that provides comprehensive details about its functionality and use for users (and devs).\n\nIf you are unsure from the prompts or repo whether the app behaves or functions in a certain way, or allows for something, please provide those questions, associated commentary, and recommendation in callout format following the appropriate section of the docs here are my prompts:",
        "parameters": {
          "temperature": 0.7,
          "presence_penalty": 0,
          "frequency_penalty": 0
        },
        "metadata": {
          "autoTitleEnabledForTurn": true,
          "enabledTools": [
            "gitCommit",
            "gitInit",
            "gitPull",
            "gitPush",
            "gitStatus",
            "vfsCreateDirectory",
            "vfsDelete",
            "vfsListFiles",
            "vfsReadFile",
            "vfsRename",
            "vfsWriteFile"
          ],
          "maxSteps": 20,
          "attachedFiles": [
            {
              "id": "m1RVTCKHVnImZ6-9TXCCA",
              "source": "direct",
              "name": "app-prompt-history-1.txt",
              "type": "text/plain",
              "size": 28382,
              "contentText": "app-prompt-history-1\r\n-------------------------------------------------------------------------\r\n\r\n\r\n\r\n----------------------------------------------------------\r\n\r\nok we now need to make an important and potentially complicated change:\r\n\r\n(1) we need to change the name of the \"properties\" backend table to \"listings\".\r\n\r\n(2) we need to change anything throughout our entire codebase that references \"properties\" to reference the updated \"listings\" name\r\n\r\n(3) we need to change all front-end text instances of properties (\"properties\" or \"Properties\" or \"property\" or \"Prtoperty\") to the cooresponding variant of listings (e.g. \"listings\", \"Listings\", \"listing\", \"Listing\")\r\n\r\n----------------------------------------------------------\r\n----------------------------------------------------------\r\n----------------------------------------------------------\r\n\r\nfor the mapbox component, switch from a globe projection to a flat map projection to improve usability and visual clarity.. also change the markers to simple small circular dots with dot color corresponding to property status.\r\n\r\nlimit the map view to the area roughly 20 miles around Washington DC. allow zooming in but not zooming out beyond that area\r\n\r\nlastly, add a small popup that appears when clicking a marker that shows the associated address, status, builder, and price\r\n\r\n----------------------------------------------------------\r\n\r\nthe Start Geocoding Batch button is working but only in batches of 10 - we need to maintain the rate-limiting to respect mapbox limits, but the button should continue to run through all properties table records that meet the existing geocoding conditions (missing coordinates but have address_line_1, city, and state column values)\r\n\r\n----------------------------------------------------------\r\n\r\ni tried the \"Geocode Missing Coordinates\" button and am getting the following error:\r\n\r\nFailed to fetch properties: column properties.street_number does not exist\r\n\r\nnote: it is true that the preoperties backend table does not have a street_number column. we should only be using the \"address_line_1\", \"city\", and \"state\" columnlumns from the backend properties table. if any record does nnot have compleye information for those columns then omit it from geocoding/mapping\r\n\r\n----------------------------------------------------------\r\n\r\nok now, let's implement your recommendation regarding server-side geocoding. is this something where supabase edge functions are appropriate? we want to check all of the records in our backend properties table and geocode any that (1) have \"address_line_1\", \"city\", \"state\" column values, AND (2) are missing \"longitude\" and \"latitude\" column values\r\n\r\n----------------------------------------------------------\r\n\r\nok now I want to integrate working map components into the app using mapbox\r\n\r\nin the Integrations tabs of the Settings page, we need to another container after the \"AI Integrations\" container called the \"Mapbox\" where the user can input and save their Mapbox API key, as well as adjust any other Mapbox settings/parameters we expose\r\n\r\nNote: we want our default maps component to use very minimal styling - white background with only regional/state/city/county/neighborhood outlines (depending on zoom level) and road lines in grey, and mapped properties shown as circular markers in a reddish orange color\r\n\r\nthe map component should handle mapping single propeties, subgroups of properties, or all properties in the backend properties table, using only the respective  \"address_line_1\", \"city\", and \"state\" column values\r\n\r\nthe first place we need to add this maps component is to the lower left side of dashboard page - this instance should display a map of all properties in the backend properties table with status of \"Active\"  or \"Coming Soon\"\r\n\r\n----------------------------------------------------------\r\n\r\ni just tested the import again - it completed succesfully and correctly impacted the properties backend table.\r\n\r\nhowever, the upload history table is still not showing correct values for the new record after it appears following completion of the import processing.\r\n\r\nadditionally, there was no toast notification or console error\r\n\r\nI checked the backend csv_uploads table and it appears the filename and upload_date columns are correct for the newly added record. The other columns are showing no or incorrect values - here is a table of the csv_uploads table columns and what I am seeing for each in the supabase backend:\r\n\r\n| filename | working - correct value |\r\n| upload_date | working - correct value |\r\n| records_processed | no value |\r\n| records_created | no value |\r\n| records_updated | no value |\r\n| status | incorrect value \"processing\" |\r\n| error_log | working - no value expected given import completed successfully with no error |\r\n| metadata | may be working - no value - not sure if we expect any value here |\r\n| records_failed | no value |\r\n\r\nNote: the actual import functionality with respect to adding  and/or updating the properties backend table continues to work correctly, so should not be changed. We need to fix the issues directly pertaining to the post-import results reporting in csv_uploads table\r\n\r\n----------------------------------------------------------\r\n\r\nI am now able to successfully import files with saved field mappings, and upon completion a new record is correctly shown in the \"Upload History\" table. however, none of the fields associated with the record are being populated (i.e. the Date, Total, New, Updated, Ignored, and Failed fields). Additionally, the \"Status\" field has a value of \"processing\" despite the import having completed and without error.\r\n\r\nadditionally, for this table (Upload HIstory table), make sure\r\n1. none of the text/values in the record rows use bold font weight (use normal font weight)\r\n2. the Total/New/Updated/Ignored/Failed columns have equal width\r\n\r\n----------------------------------------------------------\r\n\r\nnote that we should no longer be using hsl color values since we switched to hex color values - we may be able to drop the hsl color value columsn from the user_settings table\r\n\r\n----------------------------------------------------------\r\n\r\nthe field mappings saved from the sheet component in the import data page should be reflected in the data structure tab of the settings page after clicking the save button (on import data page sheet component)\r\n\r\ncurrently this is not working\r\n\r\n----------------------------------------------------------\r\n\r\nwe need to save users' upload field mappings so they do not have to map fields they have already mapped and saved.\r\n\r\ncreate a new tab in the settings page after the \"Integrations\" tab named \"Data Structure\". in this tab there should be a dropdown select to choose either the \"properties\" or \"builders\" backend table -> upon selecting one, all column names from the corresponding table should be loaded as a vertical list. to the right of each column name we need a pill input box containing (1) previously saved mappings are shown, and (2) the user can start typing a new field name to map, which converts to a pill upon hitting enter.\r\n\r\nthen when the user adds a file to upload in the import page, the Map Fields sheet component should pre-map any field that is present in the saved list of fields that map to a given backend table column (if more than one upload file field map to the same backend table column, only allow one to be set and disable the others that map to the same backend table column)\r\n\r\nNote: if you need to make backend changes, make them directly in supabase. also  do not change anything across the rest of the app. do not change the settings page tabs.\r\n\r\n----------------------------------------------------------\r\n\r\nwe need to improve the speed of the import/upload processing - currently it is too slow\r\n\r\nadditionally we also need to add some post-upload processing of specific properties table columns - e.g. the subdivision column values need to be converted to Title Case, and the status column values need to be mapped to the corresponding valeus in this table:\r\n\r\n| A/C \t|   Active Under Contract |\r\n| ACT\t|   Active |\r\n| C/S \t| \tComing Soon |\r\n| CLS \t| \tClosed |\r\n| CNL\t| \tCanceled |\r\n| PND\t| \tPending |\r\n| T/O\t| \tTemporary Off Market |\r\n| WTH\t| \tWithdrawn |\r\n| EXP\t| \tExpired |\r\nadditionally, for the import functionality, we need to add a toggle next to the \"Map Fields\" button giving the user the option to \"Override Existing Values\" - if turned on, existing column values for records in the upload file that already existing in the backend proeprties table (based on MLS ID) will be replaced by the upload file values\r\n\r\nlastly, for the upload history table in the Import Data page, limit the visible rows to 5 and paginate the rest\r\n\r\n----------------------------------------------------------\r\n\r\nok now we need to clean up the backend  properties table. we need to remove the following columns completely:\r\n\r\n```\r\n  category,\r\n  agreement_date,\r\n  street_number,\r\n  street_direction,\r\n  street_name,\r\n  unit_number,\r\n  mls_area,\r\n  list_agent_code,\r\n  list_office_code,\r\n  list_office_phone,\r\n  selling_agent,\r\n  selling_agent_code,\r\n  selling_office_name,\r\n  selling_office_code,\r\n  selling_office_phone,\r\n  final_financing,\r\n  final_short_sale,\r\n  final_third_party_approval,\r\n  final_bank_owned,\r\n  tax_annual_total,\r\n  tax_year,\r\n  ownership,\r\n  senior_community,\r\n  condo_coop_assoc,\r\n  one_time_association_fee,\r\n  association_fee,\r\n  age,\r\n  interior_sqft,\r\n  design,\r\n  number_of_stories,\r\n  floor_number,\r\n  laundry,\r\n  other_rooms,\r\n  room_count,\r\n  central_air,\r\n  waterfront,\r\n  originating_mls,\r\n  above_grade_sqft,\r\n  below_grade_sqft,\r\n  home_built,\r\n  basement_footprint_pct,\r\n  basement_finished_pct,\r\n  development_status\r\n```\r\nfor the import functionality, please make sure that \"MLS #\"  in import files is auto-mapped to mls_number (our properties table mls id)\r\n\r\nadditionally, on the import page, we need to add:\r\n1. additional pre-processing information when a file is added - specifically, the number of records in the file, the number of new records (new MLS ID) in the file, the number of matched records (where MLS ID is alreadh in properties table), the total number of column/fields in file, the number of fields from file auto-matched to properties table columns, and the number of fields from file that were not auto-matched to any properties table fields\r\n2. a table below the \"Import Property Data\" component containing upload history including the post-processing results for each\r\n\r\n----------------------------------------------------------\r\n\r\nnow we need to improve the import functionality.\r\n\r\nwe need to move the \"Start Import\" button to the right side  of its container, and add a \"Map Fields\" button in the Start Import button's current place.\r\n\r\nafter a file has been added, clicking the \"map fields\" button will trigger a shadcn \"Sheet\" component to open from the right - this will contain a vertical list of all fields from the csv file - next to each field will be a dropdown to select the corresponding backend proeprties table field.\r\n\r\nadditionally, we need to add a \"plus\" icon button to create additional database fields\r\n\r\nafter the user has finished adjusting the field mappings, they can click the Done/Save button at the bottom of the Sheet component, which saves the configuration and closes the component. The user can then click the Start Import button, initiating the processing using the user's mapping configuration\r\n\r\n----------------------------------------------------------\r\nhttps://ttrsir.okta.com/oauth2/v1/authorize?client_id=okta.2b1959c8-bcc0-56eb-a589-cfcfb7422f26&code_challenge=5BBrzfABgsIoz0c3GuhUestxhPlhNx0biSolMKXPN-4&code_challenge_method=S256&nonce=15UGRvRT5iqSIgHa1ho5R8Da93coytBCpCACWIupnAzMcQDgnvtLwMCbFKNFwJXR&redirect_uri=https%3A%2F%2Fttrsir.okta.com%2Fenduser%2Fcallback&response_type=code&state=5HnQMqUeBFHParuiauCRxnZ4QYihUoCUioYnztVNaA4jnooqWKziW0obPwyGi31X&scope=openid%20profile%20email%20okta.users.read.self%20okta.users.manage.self%20okta.internal.enduser.read%20okta.internal.enduser.manage%20okta.enduser.dashboard.read%20okta.enduser.dashboard.manage%20okta.myAccount.sessions.manage\r\n\r\n----------------------------------------------------------\r\n\r\nit seems we are still experiencing the user_id error, as well as a couple others\r\n\r\none of the others may be due to the fact that there are 2 fields related to \"New Construction...\" - one is \"New Construction\" and the other is \"New Construction YN\". the \"New Construction YN\" column should be handled fine as its only possible values are yes or no. However the \"New Construction\" column includes more information: it provides the yes or no as well as completion status if the first part of the stirng is yes. we want this information in the backend properties table, so may just have to map it to a new column\r\n\r\n----------------------------------------------------------\r\n\r\nnow, for the social post objects - we need to modify so the user can specify (1) the content type of the social post object (\"Single Property\" or \"Multi Property\" and (2) the format type of the social post object (Carousel, Post, Reel, Story)\r\n\r\nthe user should be able to edit both of these from the social post object details view page, and should be prompted to choose each when creating a new social post object\r\n\r\nadditionally,, for the social post details view page, change the default of the associated property containers to expanded (currently collapsed)\r\n\r\nlastly, we need to integrate AI features in multiple places - for now, we want to add an icon button under the \"Description\" input box for  each associated property in the social post details view page - clicking this button should present a popover menu with a couple options (\"Rewrite\", \"Prompt\"). Choosing prompt will present a larger input popup for the user to type a prompt and a button to submit, the output response will then be inserted into the description box; the rewrite option will rewrite the content that already exists in the description box.\r\n\r\nfor the AI integration, we need to use the OpenAI API - to enable the AI, the user must  navigate to the settings page, where a new tab titled \"Integrations\" will display an input box where they can input and save their own API key, as well as select from a dropdown list of available OpenAI models. these should be added to the user's settings in the backend\r\n\r\n----------------------------------------------------------\r\n\r\nfor the style guide, change the HSL color inputs to HEX code color inputs instead.  additionally, add more of our components and their variants, like tables/data tables, modals, popovers, toast notifications , dropdown menus, multi-select and select, checkboxes and radios, cards, dialogs/alert dialogs, switches, toggles, buttons with icons, button groups, and comboboxes,\r\n\r\nadditionally, for the Import Data page:\r\n- add a drag & drop area and style the elements on page more like the attached screenshot.\r\n- add another container that shows results of data upload after processing, include breakdown of new records successfully added, records updated (i.e. where null/missing data fields were provided), and ignored/duplicate records; also include count of records that failed to upload due to error\r\n\r\nlastly, check the \"Create Post\" button on the Social Posts page - it is still not working (not creating new social post object and no notifications/communication provided)\r\n\r\n----------------------------------------------------------\r\n\r\nnow the \"Create Post\" button on the social psots page is not working again - please fix it.\r\n\r\nadditionally, for the \"Progress\" value for each social post object - make the progress % based on the aggregate tasks completed as % of aggregate total tasks (aggregated of child properties of the social post object)\r\n\r\nlastly, for the social posts table on the Social posts page, make the expanded sub-rows background color the same as the parent/collapsed rows, and replace the MLS ID with the address value (remove the \r\n\r\n----------------------------------------------------------\r\n\r\nhttps://apps.oag.state.md.us/hb_uploads/\r\n\r\n----------------------------------------------------------\r\n\r\nin the Post Details view page, seperate out the post name and make it editable (should update backend upon changing). also seperate the description and make it editable. show the status as a badge.\r\n\r\nchange the \"Assoicated Properties\" Title to just \"Properties\", move it outside/above the container and make it smaller like a tagline/eyebrow format.\r\n\r\nthen for each record associate dproperty record,  add a very small header above the MLS label/value and set that header's text to the Address of the property.. remove the bold format for the Price and Status labels\r\n\r\nmove thecheckboxes to the horizontal middle of the record container and position the checkbox labels above the checkboxes and set font color to more muted/grey\r\n\r\nadditionally make each record expandable - when expanded, everything visible in the collapsed view remains unchanged with no height change. the expanded area displays an text input box with label Description, which uses ~60% of the available width; the remaining width  contains the image or images set by user for the property specifically for this social post object - if multiple images, shrink them to fit as equal size thumbnails. there should be a plus button to add additional photos via upload, as well as the ability to remove images by clicking a small \"X\" button that appears in the top right of each thumbnail when hovered\r\n\r\nnote: uploaded images should be added to a new storage bucket in supabase, and removed upon deletion\r\n\r\nalso, make the view pages style more like the style in this attached screenshot\r\n\r\n----------------------------------------------------------\r\n\r\nnow, instead of displaying an additional container for the new post (which I currently see as \"New Post 1 - Properties\" after having created a new post named \"New Post 1\"),  make the post objects table rows expandable/toggleable so that when a row is expanded, each associated property is displayed as a subrow w the fields Status, Builder, Price, and Address display across the sub-row, and the 3 checkbox elements on the far right/end of the sub-row.\r\n\r\nadditionally add labels of \"Contacted\", \"Image\", \"Description\" for the  three checkboxes using very small font size and muted/neutral font color; also make the checkbox checked state color a blueish green instead of the current black. also make the checkbox border radius slightly rounded (only a bit). For the social posts table, seperate out the \"Mark Posted\" button (that appears when progress value is 100%) in a new columnn and use the same blueish green color instead of the current black background; also make the progress bar accent color use the blueish green color when it has reached 100%.\r\n\r\nalso for the Social Posts table, the user needs the ability to select rows and perform actions like \"Complete All\" or \"Delete\". Note that deleting posts does not delete the underlying property lsiting records, only the social post object\r\n\r\nLastly, each social post object in the table should have an \"Open\" button on the far right of each row - this button needs to open a Post Details view page\r\n\r\n----------------------------------------------------------\r\n\r\nthe \"Create Post\" button is still not working - clicking it while properties are selected does not do anything and I do not see any errors logged in the console. please make sure it is fixed and functional, with the social post object being created in backend and toast notifications communicating processing state, error, or success\r\n\r\nthe button is still not working/doing anything - and i see no toast notifications or error logging indicating an issue. please fix and make sure that when the object is created in backend it is then visible in the \"Social Posts\" table as well\r\n\r\n----------------------------------------------------------\r\n\r\nthe assign builder functionality must present a popup list of builders with search ability and await the user's selection and confirmation of the selected builder before assigning a builder to the property record(s)\r\n\r\nadditionally, the properties table on the properties page should have a column showing the builder associated with each property. NOTE: some properties may not have an associated builder if one was not automatically identified or manually set.\r\n\r\nthe edit button does not work in the property details page view and edit button does not work in the builder details page view\r\n\r\nin the builder details view page, add a column chart that displays the builder's listings over time (3 month, 6 month, 1 yr, 3 yr. 5 yr, all) with the y-axis/column height value being the sale/listing price. Also, add a data table component to the builder detail view page with all associated listings, including all relevant columns. Lastly, add a small, minimal map component that displays small circular markers (using color #c22f47) for their associated property listings. the map  can be integrated later but will be very minimal in style (white background only showing regional/county/neighborhood outlines and prominent roads using grey line colors)\r\n\r\n----------------------------------------------------------\r\n\r\nthe import functionality seems ot be working now, however there does not seem to be anything preventing duplicate records from being created - use the MLS ID in the upload as an additional unique ID check in order to prevent creating listing records for which a record with the same MLS ID already exists in the backend table\r\n\r\nthe add new builder button and the add new property buttons do not work\r\n\r\nI cannot open the builder profile page for any of the builders listed in the Builders page - there should be a Builder details page view for each builder, showing all info for the builder as well as their past builds found in the listings backend table\r\n\r\nadditionally, in the properties page  table and the property details view page, the user needs to be able to update the Builder assoicated with the listing record (individually and in bulk via the table) --- update the listings backend table schema if necessary to add a field for builder ID associated with each record - i.e. connecting to the builders backend table\r\n\r\nthe Analytics & Reports pages do not seem to exist\r\n\r\n----------------------------------------------------------\r\n\r\nthe import functionality does not seem to be working - the Import button is stuck on a loading state after clicking\r\n\r\nthe add new builder button and the add enw property buttons do not work\r\n\r\nI cannot open the builder profile page for any of the builders listed in the Builders page\r\n\r\nthe Analytics & Reports pages do not seem to exist\r\n\r\non the properties page, the Export button does not work and the Filters button does not do anything. additionally, I cannot open the details page for any of the properties in the table. also, we need to make the properties in the table selectable with the ability to perform bulk actions - like \"Hide\", \"Add Tag\", and \"Add to Social Qeue\"\r\n\r\nlastly, we must add another tool/page to the app - the tool is called \"Social Posts\" - which presents a table of properties the user has added to the \"Social post pipeline\" . the user should be able to add new properties and delete existing properties from the qeue on this page (individual and in bulk). Additionally the user must be able to select properties and mark/add them to a new or existing \"Post\" object. Lastly,the user must be able to change the status of multiple fields/columns for each property via the table - e.g. mark \"image\", \"description\", \"contacted\" as complete.\r\n\r\nanother table on this new tool page with contain all past (posted) and current (incomplete and/or complete but not posted) social post objects. Current post objects will show a progress bar with progress calculated as the % of child properties marked as complete. Once the final property is marked as complete for a given social post object, the user should be prompted whether they would like to mark the social object as \"Posted\" - if they confirm, they must provide a link to the post (an instagram link) in order for the \"Posted\" status to be assigned. Otherwise, the social post object will show as completed but will not have a check-mark \"Posted\" badge in the status column. Posted object rows will display a button to open the associated post link.\r\n\r\n----------------------------------------------------------\r\n\r\ni am creating a highly tailored micro-application for a real estate agent who specializes in luxury residential new construction in the DC/MD/VA region. the aim of the micro-app is to provide:\r\n\r\n(1) a view of the current state of the local new construction market and builder activity\r\n\r\n\t- (all listings identified as new construction or associated with a builder that are currently active, coming soon, or other desired statuses selected by user, as well as properties that have no current listing/status of any kind across feeds but have been identified as builder-owned based on either (a) last sale data from historical transaction database or (b) manual tag) insights on, the local new construction market trends and current status\r\n\r\n----------------------------------------------------------\r\n\r\ncreate an exactly identical clone of Attio's web app, with fully functional backend implemented using Supabase, but tailored for a real estate agent specializing in luxury residential new construction in the DC/MD/VA region. instead of a CRM-style focus on contacts, the app must focus on the local new residential construction market - frontend features tools, insights/trends, and current view of state of the market using database table of listing data (current and historical) and database table of local builders (with extensive information/data profiles for each). one view should show a data table/spreadsheet style view of all current (and coming soon) listings identified as new construction, as well as all properties with no current listing status but which have been identified as in development/construction phase (based on last sale metadata or manually added tag). for now, use the attached csv to seed the backend/use as initial data set - include page and implement functionality for manual data updates (via subsequent csv uploads by user). third party real estate data feeds/APIs will be integrated later, and potentially enrichment APIs for more complete builder profiles. \r\n\r\n----------------------------------------------------------\r\n\r\ncreate an exactly identical clone of Attio's web app using NextJS, with fully functional backend implemented using Supabase, but tailored for a real estate agent specializing in luxury residential new construction in the DC/MD/VA region. instead of a CRM-style focus on contacts, the app must focus on the local new residential construction market - frontend features tools, insights/trends, and current view of state of the market using database table of listing data (current and historical) and database table of local builders (with extensive information/data profiles for each). one view should show a data table/spreadsheet style view of all current (and coming soon) listings identified as new construction, as well as all properties with no current listing status but which have been identified as in development/construction phase (based on last sale metadata or manually added tag). for now, use the attached csv to seed the backend/use as initial data set - include page and implement functionality for manual data updates (via subsequent csv uploads by user). third party real estate data feeds/APIs will be integrated later, and potentially enrichment APIs for more complete builder profiles.\r\n\r\nalso include auth, user management, user settings, etc\r\n\r\nNOTE: do not approach design decisions from a marketing or customer-facing product perspective - this is INTERNAL TOOLING. it should be identical to Attio's design system, or similar to Vercel's web app interface components - largely white with very dense/compact layouts. aim to reduce empty/unused/white-space throughout the interface and use smaller than normal font sizes\r\n\r\n----------------------------------------------------------"
            },
            {
              "id": "EEhayQc7plQi1IlrevrOb",
              "source": "direct",
              "name": "repomix-output-dkl-microapp-2-main.md",
              "type": "application/octet-stream",
              "size": 574571,
              "contentText": "This file is a merged representation of the entire codebase, combined into a single document by Repomix.\nThe content has been processed where security check has been disabled.\n\n# File Summary\n\n## Purpose\nThis file contains a packed representation of the entire repository's contents.\nIt is designed to be easily consumable by AI systems for analysis, code review,\nor other automated processes.\n\n## File Format\nThe content is organized as follows:\n1. This summary section\n2. Repository information\n3. Directory structure\n4. Repository files (if enabled)\n5. Multiple file entries, each consisting of:\n  a. A header with the file path (## File: path/to/file)\n  b. The full contents of the file in a code block\n\n## Usage Guidelines\n- This file should be treated as read-only. Any changes should be made to the\n  original repository files, not this packed version.\n- When processing this file, use the file path to distinguish\n  between different files in the repository.\n- Be aware that this file may contain sensitive information. Handle it with\n  the same level of security as you would the original repository.\n\n## Notes\n- Some files may have been excluded based on .gitignore rules and Repomix's configuration\n- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files\n- Files matching patterns in .gitignore are excluded\n- Files matching default ignore patterns are excluded\n- Security check has been disabled - content may contain sensitive information\n- Files are sorted by Git change count (files with more changes are at the bottom)\n\n# Directory Structure\n```\ndkl-microapp-2-main/\n  app/\n    (auth)/\n      login/\n        page.tsx\n      register/\n        page.tsx\n      signup/\n        page.tsx\n      layout.tsx\n    (dashboard)/\n      analytics/\n        page.tsx\n      builders/\n        [id]/\n          edit/\n            page.tsx\n          page.tsx\n        loading.tsx\n        page.tsx\n      dashboard/\n        page.tsx\n      import/\n        page.tsx\n      insights/\n        page.tsx\n      listings/\n        [id]/\n          edit/\n            page.tsx\n          page.tsx\n        page.tsx\n      reports/\n        page.tsx\n      settings/\n        page.tsx\n      social/\n        [postId]/\n          page.tsx\n        loading.tsx\n        page.tsx\n      layout.tsx\n    actions/\n      ai-actions.ts\n    globals.css\n    layout.tsx\n    page.tsx\n  components/\n    layout/\n      header.tsx\n      sidebar.tsx\n    ui/\n      alert-dialog.tsx\n      alert.tsx\n      badge.tsx\n      button.tsx\n      card.tsx\n      chart.tsx\n      checkbox.tsx\n      command.tsx\n      data-table-column-header.tsx\n      data-table-pagination.tsx\n      data-table-toolbar.tsx\n      data-table.tsx\n      dialog.tsx\n      dropdown-menu.tsx\n      input.tsx\n      label.tsx\n      popover.tsx\n      progress.tsx\n      radio-group.tsx\n      scroll-area.tsx\n      select.tsx\n      separator.tsx\n      sheet.tsx\n      switch.tsx\n      table.tsx\n      tabs.tsx\n      textarea.tsx\n      toast.tsx\n      toaster.tsx\n      toggle.tsx\n    builder-assignment-dialog.tsx\n    builder-form-dialog.tsx\n    editable-field.tsx\n    field-mapping-sheet.tsx\n    header.tsx\n    listing-form-dialog.tsx\n    main-nav.tsx\n    mapbox-map.tsx\n    pill-input.tsx\n    sidebar.tsx\n    social-post-property-item.tsx\n    theme-provider.tsx\n    user-nav.tsx\n  contexts/\n    auth-context.tsx\n  hooks/\n    use-toast.ts\n  lib/\n    supabase/\n      client.ts\n      server.ts\n    builder-fields.ts\n    color-utils.ts\n    listing-fields.ts\n    supabase.ts\n    utils.ts\n  public/\n    placeholder-logo.svg\n    placeholder.svg\n  styles/\n    globals.css\n  supabase/\n    functions/\n      geocode-properties/\n        index.ts\n    migrations/\n      001_add_user_field_mappings.sql\n      002_add_mapbox_key_to_user_settings.sql\n      003_update_existing_mappings.sql\n    schema.sql\n    seed-social-posts.sql\n    social-schema.sql\n    update-schema.sql\n  types/\n    supabase.ts\n  .gitignore\n  components.json\n  next.config.mjs\n  package.json\n  postcss.config.mjs\n  README.md\n  tailwind.config.ts\n  tsconfig.json\n```\n\n# Files\n\n## File: dkl-microapp-2-main/app/(auth)/login/page.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Loader2 } from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport default function LoginPage() {\n  const { signIn } = useAuth()\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [error, setError] = useState(\"\")\n  const [loading, setLoading] = useState(false)\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setError(\"\")\n    setLoading(true)\n\n    try {\n      await signIn(email, password)\n    } catch (err: any) {\n      setError(err.message || \"Failed to sign in\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-sm\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-xl\">Sign in</CardTitle>\n          <CardDescription className=\"text-xs\">Enter your email and password to access the platform</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-3\">\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription className=\"text-xs\">{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"email\" className=\"text-xs\">\n                Email\n              </Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"name@example.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                className=\"h-8 text-xs\"\n              />\n            </div>\n\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"password\" className=\"text-xs\">\n                Password\n              </Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                className=\"h-8 text-xs\"\n              />\n            </div>\n\n            <Button type=\"submit\" className=\"h-8 w-full text-xs\" disabled={loading}>\n              {loading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-3 w-3 animate-spin\" />\n                  Signing in...\n                </>\n              ) : (\n                \"Sign in\"\n              )}\n            </Button>\n          </form>\n\n          <div className=\"mt-4 text-center text-xs text-gray-600\">\n            Don't have an account?{\" \"}\n            <Link href=\"/signup\" className=\"text-blue-600 hover:underline\">\n              Sign up\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(auth)/register/page.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport Link from \"next/link\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { AlertCircle } from \"lucide-react\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\n\nexport default function RegisterPage() {\n  const router = useRouter()\n  const { signUp } = useAuth()\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [error, setError] = useState<string | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const [isSuccess, setIsSuccess] = useState(false)\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setError(null)\n    setIsLoading(true)\n\n    try {\n      await signUp(email, password)\n      setIsSuccess(true)\n    } catch (error: any) {\n      setError(error.message || \"Failed to sign up\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  if (isSuccess) {\n    return (\n      <div className=\"flex min-h-screen flex-col items-center justify-center\">\n        <div className=\"mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]\">\n          <div className=\"flex flex-col space-y-2 text-center\">\n            <h1 className=\"text-2xl font-semibold tracking-tight\">Check your email</h1>\n            <p className=\"text-sm text-muted-foreground\">We&apos;ve sent you a confirmation link to {email}</p>\n          </div>\n          <Button asChild>\n            <Link href=\"/login\">Return to login</Link>\n          </Button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"flex min-h-screen flex-col items-center justify-center\">\n      <div className=\"mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]\">\n        <div className=\"flex flex-col space-y-2 text-center\">\n          <h1 className=\"text-2xl font-semibold tracking-tight\">Create an account</h1>\n          <p className=\"text-sm text-muted-foreground\">Enter your email below to create your account</p>\n        </div>\n        <div className=\"grid gap-6\">\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n          <form onSubmit={handleSubmit}>\n            <div className=\"grid gap-4\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  placeholder=\"name@example.com\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  autoCapitalize=\"none\"\n                  autoComplete=\"email\"\n                  autoCorrect=\"off\"\n                  disabled={isLoading}\n                  required\n                />\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  autoCapitalize=\"none\"\n                  autoComplete=\"new-password\"\n                  autoCorrect=\"off\"\n                  disabled={isLoading}\n                  required\n                />\n              </div>\n              <Button type=\"submit\" disabled={isLoading}>\n                {isLoading ? \"Creating account...\" : \"Create account\"}\n              </Button>\n            </div>\n          </form>\n          <div className=\"text-center text-sm\">\n            Already have an account?{\" \"}\n            <Link href=\"/login\" className=\"text-primary underline-offset-4 hover:underline\">\n              Sign in\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(auth)/signup/page.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Loader2 } from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport default function SignupPage() {\n  const { signUp } = useAuth()\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [confirmPassword, setConfirmPassword] = useState(\"\")\n  const [error, setError] = useState(\"\")\n  const [loading, setLoading] = useState(false)\n  const [success, setSuccess] = useState(false)\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setError(\"\")\n\n    if (password !== confirmPassword) {\n      setError(\"Passwords do not match\")\n      return\n    }\n\n    setLoading(true)\n\n    try {\n      await signUp(email, password)\n      setSuccess(true)\n    } catch (err: any) {\n      setError(err.message || \"Failed to sign up\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (success) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center bg-gray-50\">\n        <Card className=\"w-full max-w-sm\">\n          <CardHeader>\n            <CardTitle className=\"text-xl\">Check your email</CardTitle>\n            <CardDescription className=\"text-xs\">We've sent a confirmation link to {email}</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Link href=\"/login\">\n              <Button className=\"h-8 w-full text-xs\">Back to login</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-sm\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-xl\">Create an account</CardTitle>\n          <CardDescription className=\"text-xs\">Enter your details to create your account</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-3\">\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription className=\"text-xs\">{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"email\" className=\"text-xs\">\n                Email\n              </Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"name@example.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                className=\"h-8 text-xs\"\n              />\n            </div>\n\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"password\" className=\"text-xs\">\n                Password\n              </Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                className=\"h-8 text-xs\"\n              />\n            </div>\n\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"confirmPassword\" className=\"text-xs\">\n                Confirm Password\n              </Label>\n              <Input\n                id=\"confirmPassword\"\n                type=\"password\"\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                required\n                className=\"h-8 text-xs\"\n              />\n            </div>\n\n            <Button type=\"submit\" className=\"h-8 w-full text-xs\" disabled={loading}>\n              {loading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-3 w-3 animate-spin\" />\n                  Creating account...\n                </>\n              ) : (\n                \"Sign up\"\n              )}\n            </Button>\n          </form>\n\n          <div className=\"mt-4 text-center text-xs text-gray-600\">\n            Already have an account?{\" \"}\n            <Link href=\"/login\" className=\"text-blue-600 hover:underline\">\n              Sign in\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(auth)/layout.tsx\n```typescript\nimport type React from \"react\"\nexport default function AuthLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <>{children}</>\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/analytics/page.tsx\n```typescript\n\"use client\"\n\nimport { useEffect, useState } from \"react\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\"\nimport { formatCurrency } from \"@/lib/utils\"\nimport { BarChart3, TrendingUp, PieChartIcon as PieIcon, Activity, DollarSign, Home } from \"lucide-react\" // Renamed PieChart to PieIcon\nimport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n} from \"@/components/ui/chart\"\nimport { Bar, XAxis, YAxis, CartesianGrid, ResponsiveContainer, PieChart, Pie, Cell, BarChart } from \"recharts\" // Recharts components\n\n// ... (MetricCard and formatPriceRange remain the same for now, or can be refactored if needed)\nfunction MetricCard({ title, value, icon: Icon, change }: any) {\n  const isPositive = change > 0\n  const isNegative = change < 0\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-xs font-medium text-gray-600\">{title}</CardTitle>\n        <Icon className=\"h-3.5 w-3.5 text-gray-400\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-lg font-bold\">{value}</div>\n        {change !== undefined && (\n          <p className=\"text-xs text-muted-foreground\">\n            <span\n              className={`inline-flex items-center gap-x-1 ${\n                isPositive ? \"text-green-600\" : isNegative ? \"text-red-600\" : \"text-gray-600\"\n              }`}\n            >\n              {isPositive ? \"▲\" : isNegative ? \"▼\" : \"\"}\n              {Math.abs(change)}% from last month\n            </span>\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  )\n}\n\nfunction formatPriceRange(range: string): string {\n  const ranges: Record<string, string> = {\n    under500k: \"Under $500K\",\n    \"500k-1M\": \"$500K - $1M\",\n    \"1M-2M\": \"$1M - $2M\",\n    \"2M-5M\": \"$2M - $5M\",\n    over5M: \"Over $5M\",\n  }\n  return ranges[range] || range\n}\n\nconst PRICE_RANGE_COLORS = [\n  \"hsl(var(--chart-1))\",\n  \"hsl(var(--chart-2))\",\n  \"hsl(var(--chart-3))\",\n  \"hsl(var(--chart-4))\",\n  \"hsl(var(--chart-5))\",\n]\n\nexport default function AnalyticsPage() {\n  const [analytics, setAnalytics] = useState<any>(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    fetchAnalytics()\n  }, [])\n\n  async function fetchAnalytics() {\n    setLoading(true)\n    try {\n      const { data: properties } = await supabase\n        .from(\"listings\")\n        .select(\"list_price, interior_sqft, status, new_construction, city\")\n      const { data: builders } = await supabase.from(\"builders\").select(\"id, name, company_name\")\n\n      if (!properties) {\n        setAnalytics(null) // Or some default empty state\n        return\n      }\n      if (properties.length === 0) {\n        setAnalytics({\n          totalProperties: 0,\n          totalValue: 0,\n          avgListPrice: 0,\n          avgPricePerSqft: 0,\n          activeListings: 0,\n          newConstruction: 0,\n          soldProperties: 0,\n          priceRanges: {},\n          cityStats: {},\n          builderStats: [],\n          inventoryTurnover: 0,\n          newConstructionShare: 0,\n        })\n        return\n      }\n\n      const totalValue = properties.reduce((sum, p) => sum + (p.list_price || 0), 0)\n      const propertiesWithPrice = properties.filter((p) => p.list_price != null && p.list_price > 0)\n      const avgListPrice =\n        propertiesWithPrice.length > 0\n          ? propertiesWithPrice.reduce((sum, p) => sum + p.list_price!, 0) / propertiesWithPrice.length\n          : 0\n\n      const propertiesWithPriceAndSqft = properties.filter(\n        (p) => p.list_price != null && p.list_price > 0 && p.interior_sqft != null && p.interior_sqft > 0,\n      )\n      const avgPricePerSqft =\n        propertiesWithPriceAndSqft.length > 0\n          ? propertiesWithPriceAndSqft.reduce((sum, p) => sum + p.list_price! / p.interior_sqft!, 0) /\n            propertiesWithPriceAndSqft.length\n          : 0\n\n      const activeListings = properties.filter((p) => p.status === \"Active\")\n      const newConstructionProps = properties.filter((p) => p.new_construction)\n      const soldProperties = properties.filter((p) => p.status === \"Sold\")\n\n      const priceRangesData = [\n        {\n          name: \"Under $500K\",\n          value: properties.filter((p) => (p.list_price || 0) < 500000).length,\n          fill: PRICE_RANGE_COLORS[0],\n        },\n        {\n          name: \"$500K - $1M\",\n          value: properties.filter((p) => (p.list_price || 0) >= 500000 && (p.list_price || 0) < 1000000).length,\n          fill: PRICE_RANGE_COLORS[1],\n        },\n        {\n          name: \"$1M - $2M\",\n          value: properties.filter((p) => (p.list_price || 0) >= 1000000 && (p.list_price || 0) < 2000000).length,\n          fill: PRICE_RANGE_COLORS[2],\n        },\n        {\n          name: \"$2M - $5M\",\n          value: properties.filter((p) => (p.list_price || 0) >= 2000000 && (p.list_price || 0) < 5000000).length,\n          fill: PRICE_RANGE_COLORS[3],\n        },\n        {\n          name: \"Over $5M\",\n          value: properties.filter((p) => (p.list_price || 0) >= 5000000).length,\n          fill: PRICE_RANGE_COLORS[4],\n        },\n      ].filter((range) => range.value > 0)\n\n      const cityStats = properties.reduce((acc: any, p) => {\n        const city = p.city || \"Unknown\"\n        if (!acc[city]) {\n          acc[city] = { name: city, count: 0, totalValue: 0, avgPrice: 0 }\n        }\n        acc[city].count++\n        acc[city].totalValue += p.list_price || 0\n        acc[city].avgPrice = acc[city].totalValue / acc[city].count\n        return acc\n      }, {})\n      const cityChartData = Object.values(cityStats)\n        .sort((a: any, b: any) => b.totalValue - a.totalValue)\n        .slice(0, 6)\n\n      const builderStats = await Promise.all(\n        (builders || []).map(async (builder) => {\n          const { data: builderProperties, error } = await supabase\n            .from(\"listings\")\n            .select(\"list_price\")\n            .eq(\"builder_id\", builder.id)\n          if (error) {\n            console.error(`Error fetching properties for builder ${builder.id}:`, error)\n            return { ...builder, propertyCount: 0, totalValue: 0, avgPrice: 0 }\n          }\n\n          return {\n            ...builder,\n            propertyCount: builderProperties?.length || 0,\n            totalValue: builderProperties?.reduce((sum, p) => sum + (p.list_price || 0), 0) || 0,\n            avgPrice: builderProperties?.length\n              ? builderProperties.reduce((sum, p) => sum + (p.list_price || 0), 0) / builderProperties.length\n              : 0,\n          }\n        }),\n      )\n\n      setAnalytics({\n        totalProperties: properties.length,\n        totalValue,\n        avgListPrice,\n        avgPricePerSqft,\n        activeListings: activeListings.length,\n        newConstruction: newConstructionProps.length,\n        soldProperties: soldProperties.length,\n        priceRangesChartData: priceRangesData,\n        cityChartData: cityChartData,\n        builderStats: builderStats.sort((a, b) => b.totalValue - a.totalValue),\n        inventoryTurnover: properties.length > 0 ? (soldProperties.length / properties.length) * 100 : 0,\n        newConstructionShare: properties.length > 0 ? (newConstructionProps.length / properties.length) * 100 : 0,\n      })\n    } catch (error) {\n      console.error(\"Error fetching analytics:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4 p-4 md:p-6\">\n        <div className=\"h-8 bg-muted rounded w-1/4 animate-pulse mb-2\"></div>\n        <div className=\"h-4 bg-muted rounded w-1/2 animate-pulse\"></div>\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4 mt-4\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"h-28 animate-pulse bg-muted/50\"></Card>\n          ))}\n        </div>\n        <div className=\"grid gap-4 lg:grid-cols-2 mt-4\">\n          <Card className=\"h-72 animate-pulse bg-muted/50\"></Card>\n          <Card className=\"h-72 animate-pulse bg-muted/50\"></Card>\n        </div>\n      </div>\n    )\n  }\n\n  if (!analytics) {\n    return <div className=\"p-4 md:p-6 text-center text-muted-foreground\">No analytics data available.</div>\n  }\n\n  return (\n    <div className=\"space-y-6 p-4 md:p-6\">\n      <div>\n        <h1 className=\"text-2xl font-semibold\">Market Analytics</h1>\n        <p className=\"text-sm text-muted-foreground\">Advanced market analytics and performance metrics</p>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <MetricCard\n          title=\"Total Portfolio Value\"\n          value={formatCurrency(analytics?.totalValue)}\n          icon={DollarSign}\n          change={analytics?.totalValue > 1000000 ? 8.5 : undefined} // Example change\n        />\n        <MetricCard\n          title=\"Avg List Price\"\n          value={formatCurrency(analytics?.avgListPrice)}\n          icon={Home}\n          change={analytics?.avgListPrice > 100000 ? 3.2 : undefined}\n        />\n        <MetricCard\n          title=\"Avg Price/SqFt\"\n          value={formatCurrency(analytics?.avgPricePerSqft)}\n          icon={TrendingUp}\n          change={analytics?.avgPricePerSqft > 100 ? 5.1 : undefined}\n        />\n        <MetricCard\n          title=\"Inventory Turnover\"\n          value={`${analytics?.inventoryTurnover?.toFixed(1)}%`}\n          icon={Activity}\n          change={analytics?.inventoryTurnover > 10 ? -2.3 : undefined}\n        />\n      </div>\n\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base flex items-center gap-x-2\">\n              <PieIcon className=\"h-5 w-5 text-primary\" />\n              Price Distribution\n            </CardTitle>\n            <CardDescription>Distribution of listings by list price ranges.</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ChartContainer config={{}} className=\"mx-auto aspect-square max-h-[300px]\">\n              <PieChart>\n                <ChartTooltip content={<ChartTooltipContent nameKey=\"name\" hideLabel />} />\n                <Pie\n                  data={analytics.priceRangesChartData}\n                  dataKey=\"value\"\n                  nameKey=\"name\"\n                  labelLine={false}\n                  label={({ cx, cy, midAngle, innerRadius, outerRadius, percent, index }) => {\n                    const RADIAN = Math.PI / 180\n                    const radius = innerRadius + (outerRadius - innerRadius) * 0.5\n                    const x = cx + radius * Math.cos(-midAngle * RADIAN)\n                    const y = cy + radius * Math.sin(-midAngle * RADIAN)\n                    return percent * 100 > 5 ? ( // Only show label if percent is > 5%\n                      <text\n                        x={x}\n                        y={y}\n                        fill=\"white\"\n                        textAnchor={x > cx ? \"start\" : \"end\"}\n                        dominantBaseline=\"central\"\n                        fontSize=\"10px\"\n                      >\n                        {`${(percent * 100).toFixed(0)}%`}\n                      </text>\n                    ) : null\n                  }}\n                >\n                  {analytics.priceRangesChartData.map((entry: any, index: number) => (\n                    <Cell key={`cell-${index}`} fill={entry.fill} />\n                  ))}\n                </Pie>\n                <ChartLegend\n                  content={<ChartLegendContent nameKey=\"name\" />}\n                  className=\"-translate-y-2 flex-wrap gap-2 [&>*]:basis-1/4 [&>*]:justify-center\"\n                />\n              </PieChart>\n            </ChartContainer>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base flex items-center gap-x-2\">\n              <BarChart3 className=\"h-5 w-5 text-primary\" />\n              Top Markets by Value\n            </CardTitle>\n            <CardDescription>Total listing value by city (Top 6).</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ChartContainer\n              config={{\n                totalValue: { label: \"Total Value\", color: \"hsl(var(--chart-1))\" },\n              }}\n              className=\"h-[300px] w-full\"\n            >\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={analytics.cityChartData} layout=\"vertical\" margin={{ left: 10, right: 30 }}>\n                  <CartesianGrid horizontal={false} />\n                  <XAxis\n                    type=\"number\"\n                    dataKey=\"totalValue\"\n                    tickFormatter={(value) => `$${(value / 1000000).toFixed(0)}M`}\n                  />\n                  <YAxis type=\"category\" dataKey=\"name\" width={80} tickLine={false} axisLine={false} />\n                  <ChartTooltip cursor={false} content={<ChartTooltipContent indicator=\"line\" />} />\n                  <Bar dataKey=\"totalValue\" radius={5}>\n                    {analytics.cityChartData.map((entry: any, index: number) => (\n                      <Cell key={`cell-${index}`} fill={PRICE_RANGE_COLORS[index % PRICE_RANGE_COLORS.length]} />\n                    ))}\n                  </Bar>\n                </BarChart>\n              </ResponsiveContainer>\n            </ChartContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base\">Top Builder Performance</CardTitle>\n          <CardDescription>Overview of top builders by total listing value.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {analytics?.builderStats?.slice(0, 5).map((builder: any) => (\n              <div\n                key={builder.id}\n                className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center p-3 border rounded-lg hover:bg-muted/50\"\n              >\n                <div>\n                  <div className=\"text-sm font-medium text-primary\">{builder.name}</div>\n                  <div className=\"text-xs text-muted-foreground\">{builder.company_name}</div>\n                </div>\n                <div className=\"flex gap-4 mt-2 sm:mt-0 text-xs text-right\">\n                  <div>\n                    <div className=\"text-muted-foreground\">Listings</div>\n                    <div className=\"font-medium\">{builder.propertyCount}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-muted-foreground\">Avg Price</div>\n                    <div className=\"font-medium\">{formatCurrency(builder.avgPrice)}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-muted-foreground\">Total Value</div>\n                    <div className=\"font-medium\">{formatCurrency(builder.totalValue)}</div>\n                  </div>\n                </div>\n              </div>\n            ))}\n            {analytics?.builderStats?.length === 0 && (\n              <p className=\"text-sm text-muted-foreground text-center py-4\">No builder data available.</p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/builders/[id]/edit/page.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useEffect } from \"react\"\nimport { useParams, useRouter } from \"next/navigation\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { ArrowLeft, Save } from \"lucide-react\"\nimport Link from \"next/link\"\nimport { useToast } from \"@/hooks/use-toast\"\n\nexport default function EditBuilderPage() {\n  const params = useParams()\n  const router = useRouter()\n  const { toast } = useToast()\n  const [loading, setLoading] = useState(false)\n  const [initialLoading, setInitialLoading] = useState(true)\n  const [formData, setFormData] = useState({\n    name: \"\",\n    company_name: \"\",\n    phone: \"\",\n    email: \"\",\n    website: \"\",\n    address: \"\",\n    city: \"\",\n    state: \"\",\n    zip_code: \"\",\n    years_in_business: \"\",\n    total_projects: \"\",\n    active_projects: \"\",\n    price_range_min: \"\",\n    price_range_max: \"\",\n    specialties: \"\",\n    notes: \"\",\n  })\n\n  useEffect(() => {\n    if (params.id) {\n      fetchBuilder()\n    }\n  }, [params.id])\n\n  async function fetchBuilder() {\n    try {\n      const { data, error } = await supabase.from(\"builders\").select(\"*\").eq(\"id\", params.id).single()\n\n      if (error) throw error\n\n      setFormData({\n        name: data.name || \"\",\n        company_name: data.company_name || \"\",\n        phone: data.phone || \"\",\n        email: data.email || \"\",\n        website: data.website || \"\",\n        address: data.address || \"\",\n        city: data.city || \"\",\n        state: data.state || \"\",\n        zip_code: data.zip_code || \"\",\n        years_in_business: data.years_in_business?.toString() || \"\",\n        total_projects: data.total_projects?.toString() || \"\",\n        active_projects: data.active_projects?.toString() || \"\",\n        price_range_min: data.price_range_min?.toString() || \"\",\n        price_range_max: data.price_range_max?.toString() || \"\",\n        specialties: data.specialties?.join(\", \") || \"\",\n        notes: data.notes || \"\",\n      })\n    } catch (error) {\n      console.error(\"Error fetching builder:\", error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to load builder data.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setInitialLoading(false)\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n\n    try {\n      // Convert string numbers to actual numbers and process specialties\n      const builderData = {\n        ...formData,\n        years_in_business: formData.years_in_business ? Number.parseInt(formData.years_in_business) : null,\n        total_projects: formData.total_projects ? Number.parseInt(formData.total_projects) : null,\n        active_projects: formData.active_projects ? Number.parseInt(formData.active_projects) : null,\n        price_range_min: formData.price_range_min ? Number.parseFloat(formData.price_range_min) : null,\n        price_range_max: formData.price_range_max ? Number.parseFloat(formData.price_range_max) : null,\n        specialties: formData.specialties\n          ? formData.specialties\n              .split(\",\")\n              .map((s) => s.trim())\n              .filter(Boolean)\n          : null,\n      }\n\n      const { error } = await supabase.from(\"builders\").update(builderData).eq(\"id\", params.id)\n\n      if (error) throw error\n\n      toast({\n        title: \"Builder updated\",\n        description: \"Builder has been successfully updated.\",\n      })\n\n      router.push(`/builders/${params.id}`)\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update builder.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (initialLoading) {\n    return <div className=\"text-xs text-gray-600\">Loading...</div>\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center gap-x-2\">\n        <Button variant=\"ghost\" size=\"sm\" asChild>\n          <Link href={`/builders/${params.id}`}>\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Link>\n        </Button>\n        <h1 className=\"text-lg font-semibold\">Edit Builder</h1>\n      </div>\n\n      <form onSubmit={handleSubmit}>\n        <div className=\"grid gap-4 lg:grid-cols-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Basic Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"name\" className=\"text-xs\">\n                  Builder Name *\n                </Label>\n                <Input\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  className=\"h-8 text-xs\"\n                  required\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"company_name\" className=\"text-xs\">\n                  Company Name\n                </Label>\n                <Input\n                  id=\"company_name\"\n                  value={formData.company_name}\n                  onChange={(e) => setFormData({ ...formData, company_name: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"phone\" className=\"text-xs\">\n                  Phone\n                </Label>\n                <Input\n                  id=\"phone\"\n                  value={formData.phone}\n                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"email\" className=\"text-xs\">\n                  Email\n                </Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"website\" className=\"text-xs\">\n                  Website\n                </Label>\n                <Input\n                  id=\"website\"\n                  value={formData.website}\n                  onChange={(e) => setFormData({ ...formData, website: e.target.value })}\n                  className=\"h-8 text-xs\"\n                  placeholder=\"https://\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Address</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"address\" className=\"text-xs\">\n                  Street Address\n                </Label>\n                <Input\n                  id=\"address\"\n                  value={formData.address}\n                  onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"city\" className=\"text-xs\">\n                  City\n                </Label>\n                <Input\n                  id=\"city\"\n                  value={formData.city}\n                  onChange={(e) => setFormData({ ...formData, city: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <Label htmlFor=\"state\" className=\"text-xs\">\n                    State\n                  </Label>\n                  <Input\n                    id=\"state\"\n                    value={formData.state}\n                    onChange={(e) => setFormData({ ...formData, state: e.target.value })}\n                    className=\"h-8 text-xs\"\n                    placeholder=\"VA\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"zip_code\" className=\"text-xs\">\n                    Zip Code\n                  </Label>\n                  <Input\n                    id=\"zip_code\"\n                    value={formData.zip_code}\n                    onChange={(e) => setFormData({ ...formData, zip_code: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Business Details</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"years_in_business\" className=\"text-xs\">\n                  Years in Business\n                </Label>\n                <Input\n                  id=\"years_in_business\"\n                  type=\"number\"\n                  value={formData.years_in_business}\n                  onChange={(e) => setFormData({ ...formData, years_in_business: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <Label htmlFor=\"total_projects\" className=\"text-xs\">\n                    Total Projects\n                  </Label>\n                  <Input\n                    id=\"total_projects\"\n                    type=\"number\"\n                    value={formData.total_projects}\n                    onChange={(e) => setFormData({ ...formData, total_projects: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"active_projects\" className=\"text-xs\">\n                    Active Projects\n                  </Label>\n                  <Input\n                    id=\"active_projects\"\n                    type=\"number\"\n                    value={formData.active_projects}\n                    onChange={(e) => setFormData({ ...formData, active_projects: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <Label htmlFor=\"price_range_min\" className=\"text-xs\">\n                    Min Price Range\n                  </Label>\n                  <Input\n                    id=\"price_range_min\"\n                    type=\"number\"\n                    value={formData.price_range_min}\n                    onChange={(e) => setFormData({ ...formData, price_range_min: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"price_range_max\" className=\"text-xs\">\n                    Max Price Range\n                  </Label>\n                  <Input\n                    id=\"price_range_max\"\n                    type=\"number\"\n                    value={formData.price_range_max}\n                    onChange={(e) => setFormData({ ...formData, price_range_max: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Additional Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"specialties\" className=\"text-xs\">\n                  Specialties\n                </Label>\n                <Input\n                  id=\"specialties\"\n                  value={formData.specialties}\n                  onChange={(e) => setFormData({ ...formData, specialties: e.target.value })}\n                  className=\"h-8 text-xs\"\n                  placeholder=\"Luxury Homes, Custom Builds (comma separated)\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"notes\" className=\"text-xs\">\n                  Notes\n                </Label>\n                <Textarea\n                  id=\"notes\"\n                  value={formData.notes}\n                  onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                  className=\"text-xs\"\n                  rows={3}\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"flex justify-end gap-x-2 mt-4\">\n          <Button type=\"button\" variant=\"outline\" asChild>\n            <Link href={`/builders/${params.id}`}>Cancel</Link>\n          </Button>\n          <Button type=\"submit\" disabled={loading}>\n            {loading ? (\n              \"Updating...\"\n            ) : (\n              <>\n                <Save className=\"mr-2 h-4 w-4\" />\n                Update Builder\n              </>\n            )}\n          </Button>\n        </div>\n      </form>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/builders/[id]/page.tsx\n```typescript\n\"use client\"\n\nimport React from \"react\"\n\nimport { useEffect, useState } from \"react\"\nimport { useParams } from \"next/navigation\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { DataTable } from \"@/components/ui/data-table\" // Assuming this is the enhanced one\nimport { formatCurrency, formatNumber, formatDate, getFullAddress, getStatusColor } from \"@/lib/utils\"\nimport { ArrowLeft, Edit, Building2, Phone, Mail, Globe, BarChartIcon } from \"lucide-react\"\nimport Link from \"next/link\"\nimport type { ColumnDef } from \"@tanstack/react-table\"\nimport { DataTableColumnHeader } from \"@/components/ui/data-table-column-header\"\nimport { ChartContainer, ChartTooltip, ChartTooltipContent } from \"@/components/ui/chart\"\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Cell } from \"recharts\"\nimport type { Database } from \"@/types/supabase\"\n\ntype Listing = Database[\"public\"][\"Tables\"][\"listings\"][\"Row\"]\ntype Builder = Database[\"public\"][\"Tables\"][\"builders\"][\"Row\"]\n\nconst LISTING_CHART_COLORS = [\n  \"hsl(var(--chart-1))\",\n  \"hsl(var(--chart-2))\",\n  \"hsl(var(--chart-3))\",\n  \"hsl(var(--chart-4))\",\n  \"hsl(var(--chart-5))\",\n]\n\nexport default function BuilderDetailPage() {\n  const params = useParams()\n  const builderId = params.id as string\n  const [builder, setBuilder] = useState<Builder | null>(null)\n  const [listings, setListings] = useState<Listing[]>([])\n  const [loading, setLoading] = useState(true)\n  const [timeRange, setTimeRange] = useState(\"all\")\n\n  useEffect(() => {\n    if (builderId) {\n      fetchBuilderData()\n    }\n  }, [builderId, timeRange]) // Re-fetch if timeRange changes for properties\n\n  async function fetchBuilderData() {\n    setLoading(true)\n    try {\n      const { data: builderData, error: builderError } = await supabase\n        .from(\"builders\")\n        .select(\"*\")\n        .eq(\"id\", builderId)\n        .single()\n\n      if (builderError) throw builderError\n      setBuilder(builderData)\n\n      let query = supabase\n        .from(\"listings\")\n        .select(\"*\")\n        .eq(\"builder_id\", builderId)\n        .order(\"list_date\", { ascending: false })\n\n      if (timeRange !== \"all\") {\n        const now = new Date()\n        let cutoffDate: Date | null = null\n        switch (timeRange) {\n          case \"3m\":\n            cutoffDate = new Date(now.getFullYear(), now.getMonth() - 3, now.getDate())\n            break\n          case \"6m\":\n            cutoffDate = new Date(now.getFullYear(), now.getMonth() - 6, now.getDate())\n            break\n          case \"1y\":\n            cutoffDate = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate())\n            break\n          case \"3y\":\n            cutoffDate = new Date(now.getFullYear() - 3, now.getMonth(), now.getDate())\n            break\n          case \"5y\":\n            cutoffDate = new Date(now.getFullYear() - 5, now.getMonth(), now.getDate())\n            break\n        }\n        if (cutoffDate) {\n          query = query.gte(\"list_date\", cutoffDate.toISOString().split(\"T\")[0])\n        }\n      }\n\n      const { data: listingsData, error: listingsError } = await query\n      if (listingsError) throw listingsError\n      setListings(listingsData || [])\n    } catch (error) {\n      console.error(\"Error fetching builder data:\", error)\n      setBuilder(null) // Reset on error\n      setListings([])\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const chartData = listings\n    .filter((p) => p.list_date && p.list_price)\n    .map((property) => ({\n      date: new Date(property.list_date as string), // Ensure list_date is string\n      price: property.list_price,\n      mls: property.mls_number,\n      // For tooltip:\n      name: `${property.mls_number} - ${formatDate(property.list_date as string)}`,\n      value: property.list_price,\n    }))\n    .sort((a, b) => a.date.getTime() - b.date.getTime())\n\n  const listingColumns = React.useMemo<ColumnDef<Listing>[]>(\n    () => [\n      {\n        accessorKey: \"mls_number\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"MLS #\" />,\n        cell: ({ row }) => (\n          <Link href={`/listings/${row.original.id}`} className=\"font-medium hover:underline text-xs text-primary\">\n            {row.getValue(\"mls_number\") || \"-\"}\n          </Link>\n        ),\n      },\n      {\n        accessorKey: \"status\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Status\" />,\n        cell: ({ row }) => {\n          const status = row.getValue(\"status\") as string\n          return status ? (\n            <Badge variant=\"secondary\" className={`text-[10px] px-1.5 py-0 ${getStatusColor(status)}`}>\n              {status}\n            </Badge>\n          ) : (\n            \"-\"\n          )\n        },\n      },\n      {\n        accessorKey: \"address\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Address\" />,\n        cell: ({ row }) => <div className=\"max-w-xs truncate text-xs\">{getFullAddress(row.original)}</div>,\n      },\n      {\n        accessorKey: \"list_price\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"List Price\" />,\n        cell: ({ row }) => <span className=\"text-xs\">{formatCurrency(row.getValue(\"list_price\"))}</span>,\n      },\n      {\n        accessorKey: \"list_date\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Listed\" />,\n        cell: ({ row }) => <span className=\"text-xs\">{formatDate(row.getValue(\"list_date\"))}</span>,\n      },\n    ],\n    [],\n  )\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4 p-4 md:p-6\">\n        <div className=\"h-8 bg-muted rounded w-1/3 animate-pulse mb-2\"></div>\n        <div className=\"grid gap-4 lg:grid-cols-3\">\n          {[...Array(3)].map((_, i) => (\n            <Card key={i} className=\"h-36 animate-pulse bg-muted/50\"></Card>\n          ))}\n        </div>\n        <Card className=\"h-72 animate-pulse bg-muted/50\"></Card>\n        <Card className=\"h-96 animate-pulse bg-muted/50\"></Card>\n      </div>\n    )\n  }\n\n  if (!builder) {\n    return <div className=\"p-4 md:p-6 text-center text-muted-foreground\">Builder not found or failed to load.</div>\n  }\n\n  const totalPropertyValue = listings.reduce((sum, l) => sum + (l.list_price || 0), 0)\n  const avgPropertyValue = listings.length > 0 ? totalPropertyValue / listings.length : 0\n\n  return (\n    <div className=\"space-y-6 p-4 md:p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-x-3\">\n          <Button variant=\"outline\" size=\"icon\" className=\"h-8 w-8\" asChild>\n            <Link href=\"/builders\">\n              <ArrowLeft className=\"h-4 w-4\" />\n              <span className=\"sr-only\">Back to Builders</span>\n            </Link>\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-semibold\">{builder.name}</h1>\n            {builder.company_name && <p className=\"text-sm text-muted-foreground\">{builder.company_name}</p>}\n          </div>\n        </div>\n        <Button size=\"sm\" className=\"h-8 text-xs\" asChild>\n          <Link href={`/builders/${builderId}/edit`}>\n            <Edit className=\"mr-1.5 h-3.5 w-3.5\" />\n            Edit Builder\n          </Link>\n        </Button>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Contact Information</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2 text-sm\">\n            {builder.phone && (\n              <div className=\"flex items-center gap-x-2\">\n                <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                <span>{builder.phone}</span>\n              </div>\n            )}\n            {builder.email && (\n              <div className=\"flex items-center gap-x-2\">\n                <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                <a href={`mailto:${builder.email}`} className=\"text-primary hover:underline\">\n                  {builder.email}\n                </a>\n              </div>\n            )}\n            {builder.website && (\n              <div className=\"flex items-center gap-x-2\">\n                <Globe className=\"h-4 w-4 text-muted-foreground\" />\n                <a\n                  href={builder.website}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"text-primary hover:underline truncate\"\n                >\n                  {builder.website.replace(/^https?:\\/\\//, \"\")}\n                </a>\n              </div>\n            )}\n            {builder.address && (\n              <div className=\"flex items-start gap-x-2\">\n                <Building2 className=\"h-4 w-4 text-muted-foreground mt-0.5\" />\n                <span>\n                  {builder.address}\n                  {builder.city && `, ${builder.city}`}\n                  {builder.state && `, ${builder.state}`} {builder.zip_code}\n                </span>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Builder Stats</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-1.5 text-sm\">\n            <div className=\"flex justify-between\">\n              <span>Years in Business:</span> <span className=\"font-medium\">{builder.years_in_business || \"-\"}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Total Projects:</span> <span className=\"font-medium\">{formatNumber(builder.total_projects)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Active Projects:</span> <span className=\"font-medium\">{formatNumber(builder.active_projects)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Listings in DB:</span> <span className=\"font-medium\">{listings.length}</span>\n            </div>\n            {builder.rating && (\n              <div className=\"flex justify-between\">\n                <span>Rating:</span> <Badge variant=\"secondary\">★ {builder.rating}</Badge>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Financials</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-1.5 text-sm\">\n            <div className=\"flex justify-between\">\n              <span>Min Price Range:</span>{\" \"}\n              <span className=\"font-medium\">{formatCurrency(builder.price_range_min)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Max Price Range:</span>{\" \"}\n              <span className=\"font-medium\">{formatCurrency(builder.price_range_max)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Avg. Listing (DB):</span> <span className=\"font-medium\">{formatCurrency(avgPropertyValue)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Total Value (DB):</span> <span className=\"font-medium\">{formatCurrency(totalPropertyValue)}</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        {builder.specialties && (builder.specialties as string[]).length > 0 && (\n          <Card className=\"md:col-span-2 lg:col-span-1\">\n            <CardHeader>\n              <CardTitle className=\"text-base\">Specialties</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex flex-wrap gap-2\">\n                {(builder.specialties as string[]).map((specialty: string, index: number) => (\n                  <Badge key={index} variant=\"outline\">\n                    {specialty}\n                  </Badge>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <div>\n            <CardTitle className=\"text-base flex items-center gap-x-2\">\n              <BarChartIcon className=\"h-5 w-5 text-primary\" />\n              Listings Over Time\n            </CardTitle>\n            <CardDescription>Price of properties listed by this builder.</CardDescription>\n          </div>\n          <Select value={timeRange} onValueChange={setTimeRange}>\n            <SelectTrigger className=\"w-36 h-8 text-xs\">\n              <SelectValue placeholder=\"Select time range\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"3m\">Last 3 Months</SelectItem>\n              <SelectItem value=\"6m\">Last 6 Months</SelectItem>\n              <SelectItem value=\"1y\">Last Year</SelectItem>\n              <SelectItem value=\"3y\">Last 3 Years</SelectItem>\n              <SelectItem value=\"5y\">Last 5 Years</SelectItem>\n              <SelectItem value=\"all\">All Time</SelectItem>\n            </SelectContent>\n          </Select>\n        </CardHeader>\n        <CardContent>\n          {chartData.length > 0 ? (\n            <ChartContainer\n              config={{ price: { label: \"Price\", color: \"hsl(var(--chart-1))\" } }}\n              className=\"h-[300px] w-full\"\n            >\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={chartData} margin={{ top: 5, right: 20, left: 20, bottom: 5 }}>\n                  <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n                  <XAxis\n                    dataKey=\"date\"\n                    tickFormatter={(value) =>\n                      new Date(value).toLocaleDateString(\"en-US\", { month: \"short\", year: \"2-digit\" })\n                    }\n                    angle={-45}\n                    textAnchor=\"end\"\n                    height={50}\n                    interval=\"preserveStartEnd\"\n                  />\n                  <YAxis tickFormatter={(value) => `$${(value / 1000000).toFixed(1)}M`} />\n                  <ChartTooltip\n                    cursor={false}\n                    content={\n                      <ChartTooltipContent\n                        formatter={(value, name) => (name === \"price\" ? formatCurrency(value as number) : value)}\n                        labelFormatter={(label, payload) =>\n                          payload?.[0]?.payload.name || new Date(label).toLocaleDateString()\n                        }\n                      />\n                    }\n                  />\n                  <Bar dataKey=\"price\" radius={4}>\n                    {chartData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={LISTING_CHART_COLORS[index % LISTING_CHART_COLORS.length]} />\n                    ))}\n                  </Bar>\n                </BarChart>\n              </ResponsiveContainer>\n            </ChartContainer>\n          ) : (\n            <div className=\"h-[300px] flex items-center justify-center text-muted-foreground text-sm\">\n              No listings found for the selected time range.\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base\">Associated Listings ({listings.length})</CardTitle>\n          <CardDescription>All listings by this builder in the database.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <DataTable columns={listingColumns} data={listings} loading={loading} />\n        </CardContent>\n      </Card>\n\n      {/* Map placeholder can remain or be enhanced later */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base\">Listing Locations (Placeholder)</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-64 bg-muted border rounded flex items-center justify-center text-muted-foreground\">\n            Map integration coming soon\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/builders/loading.tsx\n```typescript\nexport default function Loading() {\n  return null\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/builders/page.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\" // Changed from useEffect, useState\nimport { supabase } from \"@/lib/supabase/client\"\nimport { Input } from \"@/components/ui/input\" // Keep for search\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Plus, Building2, Phone, Mail, Globe, Edit, Trash2 } from \"lucide-react\" // Added Edit, Trash2\nimport Link from \"next/link\" // Keep for builder name link\nimport type { Database } from \"@/types/supabase\"\nimport { BuilderFormDialog } from \"@/components/builder-form-dialog\" // Import new dialog\nimport { useToast } from \"@/hooks/use-toast\" // For delete action\n\ntype Builder = Database[\"public\"][\"Tables\"][\"builders\"][\"Row\"] & {\n  listings_count?: number // Renamed from properties_count\n}\n\nfunction BuilderCard({\n  builder,\n  onEdit,\n  onDelete,\n}: {\n  builder: Builder\n  onEdit: (builder: Builder) => void\n  onDelete: (builderId: string, builderName: string) => void\n}) {\n  return (\n    <Card className=\"flex flex-col h-full group relative\">\n      <div className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity flex gap-1\">\n        <Button variant=\"outline\" size=\"icon\" className=\"h-7 w-7\" onClick={() => onEdit(builder)}>\n          <Edit className=\"h-3.5 w-3.5\" />\n          <span className=\"sr-only\">Edit Builder</span>\n        </Button>\n        <Button\n          variant=\"destructive\"\n          size=\"icon\"\n          className=\"h-7 w-7\"\n          onClick={() => onDelete(builder.id, builder.name || \"this builder\")}\n        >\n          <Trash2 className=\"h-3.5 w-3.5\" />\n          <span className=\"sr-only\">Delete Builder</span>\n        </Button>\n      </div>\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"text-sm\">\n          <Link href={`/builders/${builder.id}`} className=\"hover:underline\">\n            {builder.name}\n          </Link>\n        </CardTitle>\n        {builder.company_name && <CardDescription className=\"text-xs\">{builder.company_name}</CardDescription>}\n      </CardHeader>\n      <CardContent className=\"flex-grow space-y-2 text-xs\">\n        {builder.phone && (\n          <div className=\"flex items-center gap-x-1.5 text-muted-foreground\">\n            <Phone className=\"h-3 w-3\" />\n            <span>{builder.phone}</span>\n          </div>\n        )}\n        {builder.email && (\n          <div className=\"flex items-center gap-x-1.5 text-muted-foreground\">\n            <Mail className=\"h-3 w-3\" />\n            <a href={`mailto:${builder.email}`} className=\"hover:underline text-primary\">\n              {builder.email}\n            </a>\n          </div>\n        )}\n        {builder.website && (\n          <div className=\"flex items-center gap-x-1.5 text-muted-foreground\">\n            <Globe className=\"h-3 w-3\" />\n            <a\n              href={builder.website}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"hover:underline text-primary truncate\"\n            >\n              {builder.website.replace(/^https?:\\/\\//, \"\")}\n            </a>\n          </div>\n        )}\n        {builder.specialties && builder.specialties.length > 0 && (\n          <div className=\"pt-1\">\n            <span className=\"font-medium text-foreground\">Specialties:</span>\n            <div className=\"flex flex-wrap gap-1 mt-1\">\n              {(builder.specialties as string[]).slice(0, 3).map((specialty: string, index: number) => (\n                <Badge key={index} variant=\"secondary\" className=\"text-[10px] px-1.5 py-0.5\">\n                  {specialty}\n                </Badge>\n              ))}\n              {(builder.specialties as string[]).length > 3 && (\n                <Badge variant=\"outline\" className=\"text-[10px] px-1.5 py-0.5\">\n                  +{(builder.specialties as string[]).length - 3} more\n                </Badge>\n              )}\n            </div>\n          </div>\n        )}\n      </CardContent>\n      <CardFooter className=\"text-xs text-muted-foreground pt-3\">\n        <div className=\"flex items-center gap-x-1\">\n          <Building2 className=\"h-3 w-3\" />\n          <span>{builder.listings_count || 0} Listings</span>\n        </div>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default function BuildersPage() {\n  const [builders, setBuilders] = React.useState<Builder[]>([])\n  const [loading, setLoading] = React.useState(true)\n  const [searchTerm, setSearchTerm] = React.useState(\"\")\n  const [isBuilderFormOpen, setIsBuilderFormOpen] = React.useState(false) // State for new dialog\n  const [editingBuilder, setEditingBuilder] = React.useState<Partial<Builder> | undefined>(undefined)\n  const { toast } = useToast()\n\n  const fetchBuilders = React.useCallback(async () => {\n    setLoading(true)\n    try {\n      const { data, error } = await supabase.from(\"builders\").select(`*, listings (count)`).order(\"name\") // Changed 'properties' to 'listings'\n\n      if (error) throw error\n\n      const enrichedBuilders =\n        data?.map((builder) => ({\n          ...builder,\n          // @ts-ignore - Supabase types for related table counts can be tricky\n          listings_count: builder.listings && builder.listings.length > 0 ? builder.listings[0]?.count || 0 : 0, // Access count from 'listings'\n        })) || []\n\n      setBuilders(enrichedBuilders)\n    } catch (error) {\n      console.error(\"Error fetching builders:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }, [])\n\n  React.useEffect(() => {\n    fetchBuilders()\n  }, [fetchBuilders])\n\n  const handleOpenNewBuilderDialog = () => {\n    setEditingBuilder(undefined)\n    setIsBuilderFormOpen(true)\n  }\n\n  const handleOpenEditBuilderDialog = (builder: Builder) => {\n    setEditingBuilder(builder)\n    setIsBuilderFormOpen(true)\n  }\n\n  const handleDeleteBuilder = async (builderId: string, builderName: string) => {\n    if (!confirm(`Are you sure you want to delete ${builderName}? This action cannot be undone.`)) {\n      return\n    }\n    try {\n      const { error } = await supabase.from(\"builders\").delete().eq(\"id\", builderId)\n      if (error) throw error\n      toast({ title: \"Builder Deleted\", description: `${builderName} has been successfully deleted.` })\n      fetchBuilders() // Refresh the list\n    } catch (error: any) {\n      toast({ title: \"Error\", description: error.message || \"Failed to delete builder.\", variant: \"destructive\" })\n    }\n  }\n\n  const filteredBuilders = builders.filter((builder) => {\n    if (!searchTerm) return true\n    const searchLower = searchTerm.toLowerCase()\n    return (\n      builder.name?.toLowerCase().includes(searchLower) ||\n      builder.company_name?.toLowerCase().includes(searchLower) ||\n      builder.email?.toLowerCase().includes(searchLower) ||\n      (builder.specialties as string[])?.some((s: string) => s.toLowerCase().includes(searchLower))\n    )\n  })\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-lg font-semibold\">Builders</h1>\n          <p className=\"text-xs text-muted-foreground\">{filteredBuilders.length} builders found</p>\n        </div>\n        <Button size=\"sm\" className=\"h-7 text-xs\" onClick={handleOpenNewBuilderDialog}>\n          {\" \"}\n          {/* Changed this line */}\n          <Plus className=\"mr-1.5 h-3 w-3\" />\n          Add Builder\n        </Button>\n      </div>\n\n      <Input\n        placeholder=\"Search builders by name, company, email, specialty...\"\n        value={searchTerm}\n        onChange={(e) => setSearchTerm(e.target.value)}\n        className=\"h-8 text-xs max-w-md attio-input\"\n      />\n\n      {loading ? (\n        <div className=\"grid grid-cols-1 gap-3 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\">\n          {[...Array(8)].map((_, i) => (\n            <Card key={i}>\n              <CardHeader className=\"pb-3\">\n                <div className=\"h-4 bg-muted rounded w-3/4 animate-pulse\"></div>\n                <div className=\"h-3 bg-muted rounded w-1/2 mt-1 animate-pulse\"></div>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <div className=\"h-3 bg-muted rounded w-full animate-pulse\"></div>\n                <div className=\"h-3 bg-muted rounded w-5/6 animate-pulse\"></div>\n              </CardContent>\n              <CardFooter>\n                <div className=\"h-3 bg-muted rounded w-1/4 animate-pulse\"></div>\n              </CardFooter>\n            </Card>\n          ))}\n        </div>\n      ) : filteredBuilders.length > 0 ? (\n        <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\">\n          {filteredBuilders.map((builder) => (\n            <BuilderCard\n              key={builder.id}\n              builder={builder}\n              onEdit={handleOpenEditBuilderDialog}\n              onDelete={handleDeleteBuilder}\n            />\n          ))}\n        </div>\n      ) : (\n        <div className=\"text-center py-10 text-muted-foreground\">No builders found matching your search.</div>\n      )}\n      <BuilderFormDialog // Add the new dialog component\n        open={isBuilderFormOpen}\n        onOpenChange={setIsBuilderFormOpen}\n        onBuilderCreated={fetchBuilders} // Refresh list on creation\n        builder={editingBuilder}\n      />\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/dashboard/page.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\nimport { useEffect, useState } from \"react\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { formatCurrency, formatNumber } from \"@/lib/utils\"\nimport { Building2, TrendingUp, DollarSign, Home, MapPin } from \"lucide-react\"\nimport MapboxMap, { type MappableListing } from \"@/components/mapbox-map\" // Import the new MapboxMap component\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { Loader2 } from \"lucide-react\"\n\ninterface DashboardStats {\n  totalProperties: number\n  activeListings: number\n  newConstruction: number\n  avgListPrice: number\n  totalBuilders: number\n  underConstruction: number\n}\n\nexport default function DashboardPage() {\n  const { user } = useAuth()\n  const [stats, setStats] = useState<DashboardStats | null>(null)\n  const [loadingStats, setLoadingStats] = useState(true)\n  const [mapProperties, setMapProperties] = useState<MappableListing[]>([])\n  const [loadingMapProps, setLoadingMapProps] = useState(true)\n  const [userMapboxApiKey, setUserMapboxApiKey] = useState<string | null>(null)\n  const [loadingApiKey, setLoadingApiKey] = useState(true)\n\n  useEffect(() => {\n    async function fetchStats() {\n      setLoadingStats(true)\n      try {\n        const { count: totalProperties } = await supabase.from(\"listings\").select(\"*\", { count: \"exact\", head: true })\n        const { count: activeListings } = await supabase\n          .from(\"listings\")\n          .select(\"*\", { count: \"exact\", head: true })\n          .eq(\"status\", \"Active\")\n        const { count: newConstruction } = await supabase\n          .from(\"listings\")\n          .select(\"*\", { count: \"exact\", head: true })\n          .eq(\"new_construction\", true)\n        const { count: underConstruction } = await supabase\n          .from(\"listings\")\n          .select(\"*\", { count: \"exact\", head: true })\n          .eq(\"development_status\", \"under_construction\")\n        const { data: priceData } = await supabase.from(\"listings\").select(\"list_price\").not(\"list_price\", \"is\", null)\n        const avgListPrice = priceData?.length\n          ? priceData.reduce((sum, p) => sum + (p.list_price || 0), 0) / priceData.length\n          : 0\n        const { count: totalBuilders } = await supabase.from(\"builders\").select(\"*\", { count: \"exact\", head: true })\n\n        setStats({\n          totalProperties: totalProperties || 0,\n          activeListings: activeListings || 0,\n          newConstruction: newConstruction || 0,\n          avgListPrice,\n          totalBuilders: totalBuilders || 0,\n          underConstruction: underConstruction || 0,\n        })\n      } catch (error) {\n        console.error(\"Error fetching stats:\", error)\n      } finally {\n        setLoadingStats(false)\n      }\n    }\n\n    // Update the fetchMapProperties function to include additional fields for the popup\n    async function fetchMapProperties() {\n      setLoadingMapProps(true)\n      try {\n        const { data, error } = await supabase\n          .from(\"listings\")\n          .select(`\n        id, \n        address_line_1, \n        city, \n        state, \n        latitude, \n        longitude, \n        status, \n        list_price,\n        builders(name)\n      `)\n          .in(\"status\", [\"Active\", \"Coming Soon\"]) // Filter for Active or Coming Soon\n\n        if (error) throw error\n\n        // Transform the data to include builder_name\n        const transformedData =\n          data?.map((property) => ({\n            ...property,\n            builder_name: property.builders?.name || null,\n          })) || []\n\n        setMapProperties(transformedData as MappableListing[])\n      } catch (error) {\n        console.error(\"Error fetching map properties:\", error)\n        setMapProperties([])\n      } finally {\n        setLoadingMapProps(false)\n      }\n    }\n\n    async function fetchUserApiKey() {\n      if (!user) {\n        setLoadingApiKey(false)\n        return\n      }\n      setLoadingApiKey(true)\n      try {\n        const { data, error } = await supabase\n          .from(\"user_settings\")\n          .select(\"mapbox_api_key\")\n          .eq(\"user_id\", user.id)\n          .single()\n        if (error && error.code !== \"PGRST116\") throw error\n        setUserMapboxApiKey(data?.mapbox_api_key || null)\n      } catch (error) {\n        console.error(\"Error fetching Mapbox API key:\", error)\n      } finally {\n        setLoadingApiKey(false)\n      }\n    }\n\n    fetchStats()\n    fetchMapProperties()\n    fetchUserApiKey()\n  }, [user])\n\n  const isLoading = loadingStats || loadingMapProps || loadingApiKey\n\n  return (\n    <div className=\"space-y-4 h-full flex flex-col\">\n      <div>\n        <h1 className=\"text-lg font-semibold\">Dashboard</h1>\n        <p className=\"text-xs text-gray-600\">Luxury residential new construction market overview</p>\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-3 lg:grid-cols-3 xl:grid-cols-6\">\n        <StatCard title=\"Total Listings\" value={stats?.totalProperties} icon={Home} loading={isLoading} />\n        <StatCard title=\"Active Listings\" value={stats?.activeListings} icon={Building2} loading={isLoading} />\n        <StatCard title=\"New Construction\" value={stats?.newConstruction} icon={TrendingUp} loading={isLoading} />\n        <StatCard title=\"Under Construction\" value={stats?.underConstruction} icon={Building2} loading={isLoading} />\n        <StatCard\n          title=\"Avg List Price\"\n          value={stats?.avgListPrice}\n          icon={DollarSign}\n          loading={isLoading}\n          formatter={formatCurrency}\n        />\n        <StatCard title=\"Total Builders\" value={stats?.totalBuilders} icon={Building2} loading={isLoading} />\n      </div>\n\n      <div className=\"grid grid-cols-1 gap-4 lg:grid-cols-3 flex-1 min-h-0\">\n        <Card className=\"lg:col-span-2 flex flex-col h-full\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm flex items-center\">\n              <MapPin className=\"mr-2 h-4 w-4\" /> Listing Map (Active & Coming Soon)\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"flex-1 p-0 min-h-0\">\n            {\" \"}\n            {/* Set a fixed height for the map container */}\n            {loadingApiKey ? (\n              <div className=\"flex items-center justify-center h-full\">\n                <Loader2 className=\"h-6 w-6 animate-spin\" /> <span className=\"ml-2\">Loading Map Data...</span>\n              </div>\n            ) : (\n              <MapboxMap\n                userApiKey={userMapboxApiKey}\n                properties={mapProperties}\n                className=\"rounded-b-lg w-full h-full\" // Ensure full width and height\n              />\n            )}\n          </CardContent>\n        </Card>\n\n        <div className=\"space-y-4 lg:col-span-1\">\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm\">Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 text-xs\">\n                <div className=\"flex justify-between border-b pb-1\">\n                  <span className=\"text-gray-600\">New listings (7d)</span>\n                  <span className=\"font-medium\">12</span>\n                </div>\n                <div className=\"flex justify-between border-b pb-1\">\n                  <span className=\"text-gray-600\">Price changes (7d)</span>\n                  <span className=\"font-medium\">8</span>\n                </div>\n                <div className=\"flex justify-between border-b pb-1\">\n                  <span className=\"text-gray-600\">Sold (30d)</span>\n                  <span className=\"font-medium\">23</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Avg DOM</span>\n                  <span className=\"font-medium\">45 days</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm\">Market Trends</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 text-xs\">\n                <div className=\"flex justify-between border-b pb-1\">\n                  <span className=\"text-gray-600\">Median price change</span>\n                  <span className=\"font-medium text-green-600\">+3.2%</span>\n                </div>\n                <div className=\"flex justify-between border-b pb-1\">\n                  <span className=\"text-gray-600\">Inventory change</span>\n                  <span className=\"font-medium text-red-600\">-12%</span>\n                </div>\n                <div className=\"flex justify-between border-b pb-1\">\n                  <span className=\"text-gray-600\">New construction share</span>\n                  <span className=\"font-medium\">18%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Price per sq ft</span>\n                  <span className=\"font-medium\">$425</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}\n\ninterface StatCardProps {\n  title: string\n  value?: number\n  icon: React.ElementType\n  loading: boolean\n  formatter?: (value: number) => string\n}\n\nfunction StatCard({ title, value, icon: Icon, loading, formatter = formatNumber }: StatCardProps) {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-xs font-medium text-gray-600\">{title}</CardTitle>\n        <Icon className=\"h-3.5 w-3.5 text-gray-400\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-lg font-bold\">\n          {loading ? <div className=\"h-6 w-16 animate-pulse rounded bg-gray-200\" /> : formatter(value || 0)}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/import/page.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\nimport { useState, useCallback, useMemo, useEffect } from \"react\"\nimport { useDropzone } from \"react-dropzone\"\nimport Papa from \"papaparse\"\nimport { Button } from \"@/components/ui/button\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport {\n  UploadCloud,\n  FileText,\n  CheckCircle,\n  XCircle,\n  Info,\n  Loader2,\n  AlertCircle,\n  Settings2,\n  ChevronLeft,\n  ChevronRight,\n} from \"lucide-react\"\nimport type { Database } from \"@/types/supabase\"\nimport { parseCSVValue, toTitleCase, formatDate, normalizeHeader } from \"@/lib/utils\"\nimport { FieldMappingSheet } from \"@/components/field-mapping-sheet\"\nimport { listingTableColumns, type MappedDbColumn, type ListingFieldDefinition } from \"@/lib/listing-fields\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Label } from \"@/components/ui/label\"\n\ntype ListingInsert = Database[\"public\"][\"Tables\"][\"listings\"][\"Insert\"]\ntype ListingRow = Database[\"public\"][\"Tables\"][\"listings\"][\"Row\"]\ntype UserFieldMappingInsert = Database[\"public\"][\"Tables\"][\"user_field_mappings\"][\"Insert\"]\n\ninterface ImportResult {\n  totalRecords: number\n  newRecordsAdded: number\n  recordsUpdated: number\n  ignoredOrDuplicate: number\n  failedDueToError: number\n  errors: string[]\n}\n\ninterface PreprocessingStats {\n  totalCsvRecords: number\n  newCsvRecords: number\n  matchedCsvRecords: number\n  totalCsvFields: number\n  autoMatchedCsvFields: number\n  unmatchedCsvFields: number\n}\n\ntype UploadHistoryEntry = Database[\"public\"][\"Tables\"][\"csv_uploads\"][\"Row\"]\n\n// Define a more specific type for metadata if its structure is known\ninterface CsvUploadMetadata {\n  duration_seconds?: number\n  ignored_records?: number\n  override_existing?: boolean\n  // Add other potential metadata fields here\n}\n\nconst baseStyle: React.CSSProperties = {\n  flex: 1,\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  padding: \"20px\",\n  borderWidth: 2,\n  borderRadius: \"0.5rem\",\n  borderColor: \"#e2e8f0\",\n  borderStyle: \"dashed\",\n  backgroundColor: \"#f8fafc\",\n  color: \"#64748b\",\n  outline: \"none\",\n  transition: \"border .24s ease-in-out\",\n  minHeight: \"160px\",\n}\n\nconst activeStyle: React.CSSProperties = { borderColor: \"#2563eb\" }\nconst acceptStyle: React.CSSProperties = { borderColor: \"#16a34a\" }\nconst rejectStyle: React.CSSProperties = { borderColor: \"#dc2626\" }\n\nconst statusMapping: Record<string, string> = {\n  \"A/C\": \"Active Under Contract\",\n  ACT: \"Active\",\n  \"C/S\": \"Coming Soon\",\n  CLS: \"Closed\",\n  CNL: \"Canceled\",\n  PND: \"Pending\",\n  \"T/O\": \"Temporary Off Market\",\n  WTH: \"Withdrawn\",\n  EXP: \"Expired\",\n}\n\nconst defaultCsvToDbMapping: Record<\n  string,\n  { dbCol: ListingFieldDefinition[\"value\"]; typeHint: ListingFieldDefinition[\"typeHint\"] }\n> = {\n  MLS_NUMBER: { dbCol: \"mls_number\", typeHint: \"string\" },\n  MLS_: { dbCol: \"mls_number\", typeHint: \"string\" },\n  DOM: { dbCol: \"dom\", typeHint: \"number\" },\n  CDOM: { dbCol: \"cdom\", typeHint: \"number\" },\n  LIST_DATE: { dbCol: \"list_date\", typeHint: \"date\" },\n  STATUS: { dbCol: \"status\", typeHint: \"string\" },\n  SUBDIVISION: { dbCol: \"subdivision\", typeHint: \"string\" },\n  AGREEMENT_DATE: { dbCol: \"agreement_date\", typeHint: \"date\" },\n  OFF_MARKET_DATE: { dbCol: \"off_market_date\", typeHint: \"date\" },\n  SETTLED_DATE: { dbCol: \"settled_date\", typeHint: \"date\" },\n  ORIGINAL_PRICE: { dbCol: \"original_price\", typeHint: \"number\" },\n  LIST_PRICE: { dbCol: \"list_price\", typeHint: \"number\" },\n  SOLD_PRICE: { dbCol: \"sold_price\", typeHint: \"number\" },\n  STREET_NUMBER: { dbCol: \"street_number\", typeHint: \"string\" },\n  STREET_DIRECTION: { dbCol: \"street_direction\", typeHint: \"string\" },\n  STREET_NAME: { dbCol: \"street_name\", typeHint: \"string\" },\n  UNIT_NUMBER: { dbCol: \"unit_number\", typeHint: \"string\" },\n  CITY: { dbCol: \"city\", typeHint: \"string\" },\n  STATE: { dbCol: \"state\", typeHint: \"string\" },\n  ZIP_CODE: { dbCol: \"zip_code\", typeHint: \"string\" },\n  COUNTY: { dbCol: \"county\", typeHint: \"string\" },\n  MLS_AREA: { dbCol: \"mls_area\", typeHint: \"string\" },\n  LIST_AGENT_NAME: { dbCol: \"list_agent_name\", typeHint: \"string\" },\n  LIST_AGENT_CODE: { dbCol: \"list_agent_code\", typeHint: \"string\" },\n  LIST_OFFICE_NAME: { dbCol: \"list_office_name\", typeHint: \"string\" },\n  LIST_OFFICE_CODE: { dbCol: \"list_office_code\", typeHint: \"string\" },\n  LIST_OFFICE_PHONE: { dbCol: \"list_office_phone\", typeHint: \"string\" },\n  SELLING_AGENT: { dbCol: \"selling_agent\", typeHint: \"string\" },\n  SELLING_AGENT_CODE: { dbCol: \"selling_agent_code\", typeHint: \"string\" },\n  SELLING_OFFICE_NAME: { dbCol: \"selling_office_name\", typeHint: \"string\" },\n  SELLING_OFFICE_CODE: { dbCol: \"selling_office_code\", typeHint: \"string\" },\n  SELLING_OFFICE_PHONE: { dbCol: \"selling_office_phone\", typeHint: \"string\" },\n  FINAL_FINANCING: { dbCol: \"final_financing\", typeHint: \"string\" },\n  FINAL_SHORT_SALE: { dbCol: \"final_short_sale\", typeHint: \"boolean\" },\n  FINAL_THIRD_PARTY_APPROVAL: { dbCol: \"final_third_party_approval\", typeHint: \"boolean\" },\n  FINAL_BANK_OWNED: { dbCol: \"final_bank_owned\", typeHint: \"boolean\" },\n  TAX_ANNUAL_TOTAL: { dbCol: \"tax_annual_total\", typeHint: \"number\" },\n  TAX_YEAR: { dbCol: \"tax_year\", typeHint: \"number\" },\n  ACRES_TOTAL: { dbCol: \"acres_total\", typeHint: \"number\" },\n  LAND_USE_CODE: { dbCol: \"land_use_code\", typeHint: \"string\" },\n  OWNERSHIP: { dbCol: \"ownership\", typeHint: \"string\" },\n  SENIOR_COMMUNITY: { dbCol: \"senior_community\", typeHint: \"boolean\" },\n  CONDO_COOP_ASSOC: { dbCol: \"condo_coop_assoc\", typeHint: \"boolean\" },\n  HOA: { dbCol: \"hoa\", typeHint: \"boolean\" },\n  ONE_TIME_ASSOCIATION_FEE: { dbCol: \"one_time_association_fee\", typeHint: \"number\" },\n  ASSOCIATION_FEE: { dbCol: \"association_fee\", typeHint: \"number\" },\n  ASSOCIATION_FEE_FREQUENCY: { dbCol: \"association_fee_frequency\", typeHint: \"string\" },\n  AGE: { dbCol: \"age\", typeHint: \"number\" },\n  INTERIOR_SQFT: { dbCol: \"interior_sqft\", typeHint: \"number\" },\n  SQUARE_FEET: { dbCol: \"interior_sqft\", typeHint: \"number\" },\n  PROPERTY_CONDITION: { dbCol: \"property_condition\", typeHint: \"string\" },\n  BEDROOMS: { dbCol: \"bedrooms\", typeHint: \"number\" },\n  BATHS_FULL: { dbCol: \"baths_full\", typeHint: \"number\" },\n  BATHS_HALF: { dbCol: \"baths_half\", typeHint: \"number\" },\n  DESIGN: { dbCol: \"design\", typeHint: \"string\" },\n  STYLE: { dbCol: \"style\", typeHint: \"string\" },\n  NUMBER_OF_STORIES: { dbCol: \"number_of_stories\", typeHint: \"string\" },\n  FLOOR_NUMBER: { dbCol: \"floor_number\", typeHint: \"string\" },\n  BASEMENT: { dbCol: \"basement\", typeHint: \"boolean\" },\n  GARAGE_SPACES: { dbCol: \"garage_spaces\", typeHint: \"number\" },\n  FIREPLACE: { dbCol: \"fireplace\", typeHint: \"boolean\" },\n  LAUNDRY: { dbCol: \"laundry\", typeHint: \"string\" },\n  OTHER_ROOMS: { dbCol: \"other_rooms\", typeHint: \"string\" },\n  ROOM_COUNT: { dbCol: \"room_count\", typeHint: \"number\" },\n  CENTRAL_AIR: { dbCol: \"central_air\", typeHint: \"boolean\" },\n  WATERFRONT: { dbCol: \"waterfront\", typeHint: \"boolean\" },\n  NEW_CONSTRUCTION_YN: { dbCol: \"new_construction\", typeHint: \"boolean\" },\n  NEW_CONSTRUCTION: { dbCol: \"new_construction_details\", typeHint: \"string\" },\n  MODEL_NAME: { dbCol: \"model_name\", typeHint: \"string\" },\n  ORIGINATING_MLS: { dbCol: \"originating_mls\", typeHint: \"string\" },\n  ABOVE_GRADE_SQFT: { dbCol: \"above_grade_sqft\", typeHint: \"number\" },\n  BELOW_GRADE_SQFT: { dbCol: \"below_grade_sqft\", typeHint: \"number\" },\n  HOME_BUILT: { dbCol: \"home_built\", typeHint: \"string\" },\n  BASEMENT_FOOTPRINT_PCT: { dbCol: \"basement_footprint_pct\", typeHint: \"number\" },\n  BASEMENT_FINISHED_PCT: { dbCol: \"basement_finished_pct\", typeHint: \"number\" },\n  DEVELOPMENT_STATUS: { dbCol: \"development_status\", typeHint: \"string\" },\n  IN_SOCIAL_QUEUE: { dbCol: \"in_social_queue\", typeHint: \"boolean\" },\n  LATITUDE: { dbCol: \"latitude\", typeHint: \"number\" },\n  LONGITUDE: { dbCol: \"longitude\", typeHint: \"number\" },\n  LAST_SOLD_DATE: { dbCol: \"last_sold_date\", typeHint: \"date\" },\n  LAST_SOLD_PRICE: { dbCol: \"last_sold_price\", typeHint: \"number\" },\n  DESCRIPTION: { dbCol: \"description\", typeHint: \"string\" },\n  OWNER_NAME: { dbCol: \"owner_name\", typeHint: \"string\" },\n  CONSTRUCTION_COMPLETED_YN: { dbCol: \"construction_completed_yn\", typeHint: \"boolean\" },\n  YEAR_BUILT: { dbCol: \"year_built\", typeHint: \"number\" },\n  YEAR_BUILT_SOURCE: { dbCol: \"year_built_source\", typeHint: \"string\" },\n  IMPORTED_BUILDER_NAME: { dbCol: \"imported_builder_name\", typeHint: \"string\" },\n  BUILDER_NAME: { dbCol: \"imported_builder_name\", typeHint: \"string\" },\n  OCCUPANT_TYPE: { dbCol: \"occupant_type\", typeHint: \"string\" },\n  OCCUPANT_NAME: { dbCol: \"occupant_name\", typeHint: \"string\" },\n  PREVIOUS_LIST_PRICE: { dbCol: \"previous_list_price\", typeHint: \"number\" },\n  ARCHITECT_NAME: { dbCol: \"architect_name\", typeHint: \"string\" },\n  STRUCTURE_TYPE: { dbCol: \"structure_type\", typeHint: \"string\" },\n  BLOCK_LOT: { dbCol: \"block_lot\", typeHint: \"string\" },\n  REMARKS_PRIVATE: { dbCol: \"remarks_private\", typeHint: \"string\" },\n  REMARKS_PUBLIC: { dbCol: \"remarks_public\", typeHint: \"string\" },\n  YEAR_MAJOR_RENO_REMODEL: { dbCol: \"year_major_reno_remodel\", typeHint: \"number\" },\n  CHANGE_INFO: { dbCol: \"change_info\", typeHint: \"string\" },\n  CHG_INFO: { dbCol: \"change_info\", typeHint: \"string\" },\n  CLOSE_DATE: { dbCol: \"close_date\", typeHint: \"date\" },\n  CLOSE_PRICE: { dbCol: \"close_price\", typeHint: \"number\" },\n  CLOSE_SALE_TYPE: { dbCol: \"close_sale_type\", typeHint: \"string\" },\n  FOUNDATION_DETAILS: { dbCol: \"foundation_details\", typeHint: \"string\" },\n  LAND_ASSESSED_VALUE: { dbCol: \"land_assessed_value\", typeHint: \"number\" },\n  LIST_PICTURE_URL: { dbCol: \"list_picture_url\", typeHint: \"string\" },\n  LOT_FEATURES: { dbCol: \"lot_features\", typeHint: \"array_string\" },\n  LOT_SIZE_SQFT: { dbCol: \"lot_size_sqft\", typeHint: \"number\" },\n  ADDRESS_LINE_1: { dbCol: \"address_line_1\", typeHint: \"string\" },\n}\n\nconst defaultIgnoredHeaders: string[] = [\n  \"ADDRESS\",\n  \"BEDS\",\n  \"BATHS\",\n  \"SUB_TYPE\",\n  \"STATUS_CONTRACTUAL_SEARCH_DATE\",\n  \"PRICE\",\n].map(normalizeHeader)\n\nconst CHUNK_SIZE = 200 // For main import processing\nconst STATS_QUERY_CHUNK_SIZE = 500 // For fetching MLS numbers for stats\n\nexport default function ImportPage() {\n  const [file, setFile] = useState<File | null>(null)\n  const [isProcessing, setIsProcessing] = useState(false)\n  const [isSavingMappings, setIsSavingMappings] = useState(false)\n  const [progress, setProgress] = useState(0)\n  const [result, setResult] = useState<ImportResult | null>(null)\n  const [error, setError] = useState<string | null>(null)\n  const { toast } = useToast()\n  const { user } = useAuth()\n\n  const [csvHeaders, setCsvHeaders] = useState<string[]>([])\n  const [fieldMappings, setFieldMappings] = useState<Record<string, MappedDbColumn>>({})\n  const [isMappingSheetOpen, setIsMappingSheetOpen] = useState(false)\n  const [parsedCsvData, setParsedCsvData] = useState<any[]>([])\n  const [preprocessingStats, setPreprocessingStats] = useState<PreprocessingStats | null>(null)\n\n  const [uploadHistory, setUploadHistory] = useState<UploadHistoryEntry[]>([])\n  const [isLoadingHistory, setIsLoadingHistory] = useState(false)\n  const [historyPage, setHistoryPage] = useState(1)\n  const [totalHistoryCount, setTotalHistoryCount] = useState(0)\n  const historyRowsPerPage = 5\n\n  const [overrideExisting, setOverrideExisting] = useState(false)\n\n  const [userSavedMappings, setUserSavedMappings] = useState<Record<string, string>>({})\n\n  const fetchUserSavedMappings = useCallback(async () => {\n    if (!user) {\n      setUserSavedMappings({})\n      return\n    }\n    try {\n      const { data, error: fetchErr } = await supabase\n        .from(\"user_field_mappings\")\n        .select(\"source_csv_header, target_database_column\")\n        .eq(\"user_id\", user.id)\n        .eq(\"target_table_name\", \"listings\")\n\n      if (fetchErr) throw fetchErr\n\n      const mappings: Record<string, string> = {}\n      data?.forEach((m) => {\n        mappings[m.source_csv_header] = m.target_database_column\n      })\n      setUserSavedMappings(mappings)\n    } catch (err: any) {\n      console.error(\"Error fetching user field mappings:\", err)\n      toast({ title: \"Error\", description: \"Could not load your saved field mappings.\", variant: \"destructive\" })\n    }\n  }, [user, toast])\n\n  useEffect(() => {\n    fetchUserSavedMappings()\n  }, [fetchUserSavedMappings])\n\n  const fetchHistory = useCallback(async () => {\n    if (!user) return\n    setIsLoadingHistory(true)\n    try {\n      const from = (historyPage - 1) * historyRowsPerPage\n      const to = historyPage * historyRowsPerPage - 1\n\n      const {\n        data,\n        error: fetchError,\n        count,\n      } = await supabase\n        .from(\"csv_uploads\")\n        .select(\"*\", { count: \"exact\" })\n        .eq(\"user_id\", user.id)\n        .order(\"upload_date\", { ascending: false })\n        .range(from, to)\n\n      if (fetchError) {\n        toast({ title: \"Error fetching history\", description: fetchError.message, variant: \"destructive\" })\n        setUploadHistory([])\n      } else if (data) {\n        setUploadHistory(data)\n        setTotalHistoryCount(count || 0)\n      }\n    } catch (e: any) {\n      toast({ title: \"Error fetching history\", description: e.message, variant: \"destructive\" })\n      setUploadHistory([])\n    } finally {\n      setIsLoadingHistory(false)\n    }\n  }, [user, toast, historyPage])\n\n  useEffect(() => {\n    fetchHistory()\n  }, [fetchHistory])\n\n  const onDrop = useCallback(\n    (acceptedFiles: File[]) => {\n      if (acceptedFiles && acceptedFiles.length > 0) {\n        const selectedFile = acceptedFiles[0]\n        setFile(selectedFile)\n        setResult(null)\n        setError(null)\n        setCsvHeaders([])\n        setFieldMappings({})\n        setParsedCsvData([])\n        setPreprocessingStats(null)\n\n        const reader = new FileReader()\n\n        reader.onload = (event) => {\n          if (event.target && typeof event.target.result === \"string\") {\n            const csvString = event.target.result\n\n            // Main parse (for data)\n            Papa.parse(csvString, {\n              header: true,\n              skipEmptyLines: true,\n              worker: false, // Explicitly false, though default for string input\n              transformHeader: (header) => normalizeHeader(header),\n              complete: (results) => {\n                // Second parse (for raw headers from the first line)\n                Papa.parse(csvString, {\n                  preview: 1,\n                  header: false,\n                  complete: (headerResults) => {\n                    const rawHeadersFromFile = (headerResults.data[0] as string[]) || []\n                    setCsvHeaders(rawHeadersFromFile)\n                    setParsedCsvData(results.data as any[])\n\n                    const initialMappings: Record<string, MappedDbColumn> = {}\n                    const dbColumnsMappedInThisFile = new Set<string>()\n\n                    rawHeadersFromFile.forEach((rawHeader) => {\n                      const normalizedHeaderKeyFromFile = normalizeHeader(rawHeader)\n                      let mappedDbColumnTarget: MappedDbColumn | undefined = undefined\n\n                      // 1. Try user-saved mappings\n                      if (userSavedMappings[normalizedHeaderKeyFromFile]) {\n                        const dbColFromUser = userSavedMappings[normalizedHeaderKeyFromFile] as MappedDbColumn\n                        if (!dbColumnsMappedInThisFile.has(dbColFromUser) || dbColFromUser === \"ignore_field\") {\n                          mappedDbColumnTarget = dbColFromUser\n                        } else {\n                          // If taken, try to ignore, or let further logic decide\n                        }\n                      }\n\n                      // 2. Try default mappings if not found or if user mapping was 'ignore_field' and we want to reconsider\n                      if (!mappedDbColumnTarget || mappedDbColumnTarget === \"ignore_field\") {\n                        const defaultMappingEntry = defaultCsvToDbMapping[normalizedHeaderKeyFromFile]\n                        if (defaultMappingEntry) {\n                          const dbColFromDefault = defaultMappingEntry.dbCol as MappedDbColumn\n                          if (!dbColumnsMappedInThisFile.has(dbColFromDefault) || dbColFromDefault === \"ignore_field\") {\n                            if (mappedDbColumnTarget !== \"ignore_field\") {\n                              // Prioritize user's explicit ignore\n                              mappedDbColumnTarget = dbColFromDefault\n                            } else if (!mappedDbColumnTarget) {\n                              mappedDbColumnTarget = dbColFromDefault\n                            }\n                          } else if (!mappedDbColumnTarget) {\n                            // Default mapping is taken, will be set to ignore later if still no target\n                          }\n                        }\n                      }\n\n                      // 3. Check default ignored headers if still no mapping\n                      if (!mappedDbColumnTarget && defaultIgnoredHeaders.includes(normalizedHeaderKeyFromFile)) {\n                        mappedDbColumnTarget = \"ignore_field\"\n                      }\n\n                      // 4. Try direct match by label or value if still no mapping\n                      if (!mappedDbColumnTarget) {\n                        const directMatch = listingTableColumns.find(\n                          (ptc) =>\n                            normalizeHeader(ptc.label) === normalizedHeaderKeyFromFile ||\n                            ptc.value === normalizedHeaderKeyFromFile,\n                        )\n                        if (directMatch) {\n                          const dbColFromDirect = directMatch.value as MappedDbColumn\n                          if (!dbColumnsMappedInThisFile.has(dbColFromDirect) || dbColFromDirect === \"ignore_field\") {\n                            mappedDbColumnTarget = dbColFromDirect\n                          }\n                        }\n                      }\n\n                      // 5. Default to ignore_field if no mapping found or if a chosen mapping was already taken by a previous header\n                      if (\n                        !mappedDbColumnTarget ||\n                        (mappedDbColumnTarget !== \"ignore_field\" && dbColumnsMappedInThisFile.has(mappedDbColumnTarget))\n                      ) {\n                        mappedDbColumnTarget = \"ignore_field\"\n                      }\n\n                      initialMappings[rawHeader] = mappedDbColumnTarget\n                      if (mappedDbColumnTarget !== \"ignore_field\") {\n                        dbColumnsMappedInThisFile.add(mappedDbColumnTarget)\n                      }\n                    })\n                    setFieldMappings(initialMappings)\n\n                    // Preprocessing Stats Logic (remains largely the same)\n                    const currentParsedData = results.data as any[]\n                    const currentRawHeaders = rawHeadersFromFile\n                    const currentInitialMappings = initialMappings\n\n                    const stats: PreprocessingStats = {\n                      totalCsvRecords: currentParsedData.length,\n                      newCsvRecords: 0,\n                      matchedCsvRecords: 0,\n                      totalCsvFields: currentRawHeaders.length,\n                      autoMatchedCsvFields: 0,\n                      unmatchedCsvFields: 0,\n                    }\n\n                    currentRawHeaders.forEach((header) => {\n                      if (currentInitialMappings[header] && currentInitialMappings[header] !== \"ignore_field\") {\n                        stats.autoMatchedCsvFields++\n                      } else {\n                        stats.unmatchedCsvFields++\n                      }\n                    })\n\n                    if (user && currentParsedData.length > 0) {\n                      let mlsCsvHeaderKey: string | undefined\n                      for (const [rawHeader, dbCol] of Object.entries(currentInitialMappings)) {\n                        if (dbCol === \"mls_number\") {\n                          mlsCsvHeaderKey = normalizeHeader(rawHeader) // Ensure we use the *normalized* header that PapaParse used for data keys\n                          break\n                        }\n                      }\n\n                      // If no mls_number mapping, try to find it from common default names in the raw CSV data keys\n                      if (!mlsCsvHeaderKey && results.data.length > 0) {\n                        const firstRecordKeys = Object.keys(results.data[0])\n                        const commonMlsKeys = [\"MLS_NUMBER\", \"MLS#\", \"MLS_\"] // Normalized common keys\n                        for (const commonKey of commonMlsKeys) {\n                          if (firstRecordKeys.includes(commonKey)) {\n                            mlsCsvHeaderKey = commonKey\n                            break\n                          }\n                        }\n                      }\n\n                      if (mlsCsvHeaderKey) {\n                        const allMlsNumbersInCsv = currentParsedData\n                          .map((row) => (row[mlsCsvHeaderKey!] ? String(row[mlsCsvHeaderKey!]) : null))\n                          .filter(Boolean) as string[]\n\n                        if (allMlsNumbersInCsv.length > 0) {\n                          const uniqueMlsNumbersInCsv = Array.from(new Set(allMlsNumbersInCsv))\n                          const existingDbMlsNumbers = new Set<string>()\n                          let fetchErrorOccurred = false\n                          ;(async () => {\n                            for (let i = 0; i < uniqueMlsNumbersInCsv.length; i += STATS_QUERY_CHUNK_SIZE) {\n                              if (fetchErrorOccurred) break\n                              const chunk = uniqueMlsNumbersInCsv.slice(i, i + STATS_QUERY_CHUNK_SIZE)\n                              if (chunk.length === 0) continue\n\n                              try {\n                                const { data: chunkExistingPropsData, error: chunkMlsFetchError } = await supabase\n                                  .from(\"listings\")\n                                  .select(\"mls_number\")\n                                  .in(\"mls_number\", chunk)\n\n                                if (chunkMlsFetchError) {\n                                  console.error(\n                                    `Error fetching existing MLS numbers for stats (chunk ${\n                                      i / STATS_QUERY_CHUNK_SIZE + 1\n                                    }): ${chunkMlsFetchError.message}`,\n                                    chunkMlsFetchError,\n                                  )\n                                  fetchErrorOccurred = true\n                                  stats.newCsvRecords = -1\n                                  stats.matchedCsvRecords = -1\n                                  break\n                                }\n\n                                if (chunkExistingPropsData) {\n                                  chunkExistingPropsData.forEach((p) => {\n                                    if (p.mls_number) existingDbMlsNumbers.add(p.mls_number)\n                                  })\n                                }\n                              } catch (e: any) {\n                                console.error(\n                                  `Exception during fetching MLS numbers for stats (chunk ${\n                                    i / STATS_QUERY_CHUNK_SIZE + 1\n                                  }): ${e.message}`,\n                                  e,\n                                )\n                                fetchErrorOccurred = true\n                                stats.newCsvRecords = -1\n                                stats.matchedCsvRecords = -1\n                                break\n                              }\n                            }\n\n                            if (!fetchErrorOccurred) {\n                              let newCount = 0\n                              let matchedCount = 0\n                              uniqueMlsNumbersInCsv.forEach((csvMls) => {\n                                if (existingDbMlsNumbers.has(csvMls)) matchedCount++\n                                else newCount++\n                              })\n                              stats.newCsvRecords = newCount\n                              stats.matchedCsvRecords = matchedCount\n                            }\n                            setPreprocessingStats({ ...stats })\n                          })()\n                        } else {\n                          stats.newCsvRecords = 0\n                          stats.matchedCsvRecords = 0\n                          setPreprocessingStats(stats)\n                        }\n                      } else {\n                        // MLS number column not found or not mapped, can't determine new/matched\n                        stats.newCsvRecords = currentParsedData.length // Assume all are new if MLS# can't be identified\n                        stats.matchedCsvRecords = 0\n                        setPreprocessingStats(stats)\n                      }\n                    } else {\n                      // No user or no parsed data\n                      if (currentParsedData.length === 0) {\n                        stats.totalCsvRecords = 0\n                      }\n                      setPreprocessingStats(stats)\n                    }\n                  },\n                  error: (err: any) => {\n                    console.error(\"PapaParse error on header pre-parse:\", err)\n                    // Fallback: use transformed headers if raw header parsing fails\n                    const transformedHeaders = results.meta?.fields || Object.keys(results.data[0] || {})\n                    setCsvHeaders(transformedHeaders)\n                    setParsedCsvData(results.data as any[])\n                    const initialMappingsOnError: Record<string, MappedDbColumn> = {}\n                    transformedHeaders.forEach((th) => (initialMappingsOnError[th] = \"ignore_field\"))\n                    setFieldMappings(initialMappingsOnError)\n                    toast({\n                      title: \"Header Parsing Issue\",\n                      description:\n                        \"Could not read raw headers accurately, using transformed headers. Please verify mappings.\",\n                      variant: \"default\",\n                    })\n                  },\n                })\n              },\n              error: (err: any) => {\n                console.error(\"PapaParse error on main data parse:\", err)\n                setError(`Failed to parse CSV: ${err.message}`)\n                setFile(null) // Clear the file on parse error\n              },\n            })\n          } else {\n            setError(\"Failed to read file content.\")\n            setFile(null)\n          }\n        }\n\n        reader.onerror = () => {\n          console.error(\"FileReader error:\", reader.error)\n          setError(\"Failed to read the file. Please ensure it's a valid CSV and try again.\")\n          setFile(null)\n          setResult(null)\n          setCsvHeaders([])\n          setFieldMappings({})\n          setParsedCsvData([])\n          setPreprocessingStats(null)\n        }\n\n        reader.readAsText(selectedFile)\n      }\n    },\n    [toast, user, userSavedMappings, fetchUserSavedMappings], // Added fetchUserSavedMappings if it's stable\n  )\n\n  const { getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject } = useDropzone({\n    onDrop,\n    accept: { \"text/csv\": [\".csv\"] },\n    multiple: false,\n  })\n\n  const style = useMemo(\n    () => ({\n      ...baseStyle,\n      ...(isDragActive ? activeStyle : {}),\n      ...(isDragAccept ? acceptStyle : {}),\n      ...(isDragReject ? rejectStyle : {}),\n    }),\n    [isDragActive, isDragReject, isDragAccept],\n  )\n\n  const handleSaveMappings = async (updatedSheetMappings: Record<string, MappedDbColumn>) => {\n    if (!user) {\n      toast({ title: \"Error\", description: \"User not authenticated.\", variant: \"destructive\" })\n      return\n    }\n\n    setIsSavingMappings(true)\n    try {\n      const { data: currentPersistentMappingsData, error: fetchError } = await supabase\n        .from(\"user_field_mappings\")\n        .select(\"id, source_csv_header, target_database_column\")\n        .eq(\"user_id\", user.id)\n        .eq(\"target_table_name\", \"listings\")\n\n      if (fetchError) throw fetchError\n\n      const currentPersistentMap = new Map(\n        currentPersistentMappingsData.map((m) => [m.source_csv_header, { id: m.id, dbCol: m.target_database_column }]),\n      )\n\n      const operations = {\n        toDeleteIds: [] as string[],\n        toUpsert: [] as UserFieldMappingInsert[],\n      }\n\n      for (const rawCsvHeader of csvHeaders) {\n        const normalizedCsvHeader = normalizeHeader(rawCsvHeader)\n        if (!normalizedCsvHeader) continue\n\n        const targetDbColumn = updatedSheetMappings[rawCsvHeader]\n        const existingPersistentEntry = currentPersistentMap.get(normalizedCsvHeader)\n\n        if (targetDbColumn === \"ignore_field\" || targetDbColumn === undefined) {\n          if (existingPersistentEntry) {\n            operations.toDeleteIds.push(existingPersistentEntry.id)\n          }\n        } else {\n          if (existingPersistentEntry) {\n            if (existingPersistentEntry.dbCol !== targetDbColumn) {\n              operations.toUpsert.push({\n                user_id: user.id,\n                target_table_name: \"listings\",\n                source_csv_header: normalizedCsvHeader,\n                target_database_column: targetDbColumn,\n              })\n            }\n          } else {\n            operations.toUpsert.push({\n              user_id: user.id,\n              target_table_name: \"listings\",\n              source_csv_header: normalizedCsvHeader,\n              target_database_column: targetDbColumn,\n            })\n          }\n        }\n      }\n\n      if (operations.toDeleteIds.length > 0) {\n        const { error: deleteError } = await supabase\n          .from(\"user_field_mappings\")\n          .delete()\n          .in(\"id\", operations.toDeleteIds)\n        if (deleteError) throw deleteError\n      }\n\n      if (operations.toUpsert.length > 0) {\n        const { error: upsertError } = await supabase\n          .from(\"user_field_mappings\")\n          .upsert(operations.toUpsert, { onConflict: \"user_id,target_table_name,source_csv_header\" })\n        if (upsertError) throw upsertError\n      }\n\n      setFieldMappings(updatedSheetMappings)\n      await fetchUserSavedMappings()\n\n      toast({ title: \"Field mappings saved\", description: \"Your preferences have been updated for future imports.\" })\n    } catch (err: any) {\n      console.error(\"Error saving field mappings:\", err)\n      toast({ title: \"Error\", description: `Failed to save mappings: ${err.message}`, variant: \"destructive\" })\n    } finally {\n      setIsSavingMappings(false)\n      setIsMappingSheetOpen(false)\n    }\n  }\n\n  const handleImport = async () => {\n    if (!file || !user) {\n      setError(\"Please select a file and ensure you are logged in.\")\n      return\n    }\n    if (parsedCsvData.length === 0) {\n      setError(\"No data parsed from CSV. Please re-upload or check the file.\")\n      return\n    }\n    if (Object.keys(fieldMappings).length === 0) {\n      setError(\"Field mappings are not set. Please map fields before importing.\")\n      toast({\n        title: \"Mapping Required\",\n        description: \"Click 'Map Fields' to configure mappings.\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    setIsProcessing(true)\n    setProgress(0)\n    setResult(null)\n    setError(null)\n    const startTime = Date.now()\n\n    const { data: uploadLog, error: uploadLogError } = await supabase\n      .from(\"csv_uploads\")\n      .insert({ user_id: user.id, filename: file.name, status: \"processing\", upload_date: new Date().toISOString() })\n      .select()\n      .single()\n\n    if (uploadLogError || !uploadLog) {\n      console.error(\"Error creating upload log entry:\", uploadLogError?.message || \"Unknown error\")\n      setError(`Failed to start import process. Could not log upload: ${uploadLogError?.message}`)\n      setIsProcessing(false)\n      return\n    }\n    console.log(\"Created upload log entry with ID:\", uploadLog.id)\n\n    const recordsToProcess = parsedCsvData\n    const totalRecords = recordsToProcess.length\n    let newRecordsAdded = 0\n    let recordsUpdated = 0\n    let ignoredForOtherReasons = 0\n    let failedDueToError = 0\n    const errorsList: string[] = []\n\n    if (totalRecords === 0) {\n      setError(\"CSV file is empty or has no data rows.\")\n      setIsProcessing(false)\n      const { error: emptyUpdateError } = await supabase\n        .from(\"csv_uploads\")\n        .update({ status: \"failed\", error_log: \"CSV empty or no data rows\" })\n        .eq(\"id\", uploadLog.id)\n      if (emptyUpdateError) console.error(\"Error updating log for empty CSV:\", emptyUpdateError.message)\n      await fetchHistory()\n      return\n    }\n\n    const mlsHeaderKeys: string[] = []\n    for (const [csvHeader, dbCol] of Object.entries(fieldMappings)) {\n      if (dbCol === \"mls_number\") {\n        mlsHeaderKeys.push(normalizeHeader(csvHeader))\n      }\n    }\n\n    const recordsToInsert: ListingInsert[] = []\n    const recordsToUpdate: { id: string; payload: Partial<ListingRow> }[] = []\n\n    for (let chunkStart = 0; chunkStart < totalRecords; chunkStart += CHUNK_SIZE) {\n      const chunkEnd = Math.min(chunkStart + CHUNK_SIZE, totalRecords)\n      const chunk = recordsToProcess.slice(chunkStart, chunkEnd)\n\n      const mlsNumbersForChunk: string[] = []\n      if (mlsHeaderKeys.length > 0) {\n        chunk.forEach((record) => {\n          for (const key of mlsHeaderKeys) {\n            if (record[key]) {\n              mlsNumbersForChunk.push(String(record[key]))\n              break\n            }\n          }\n        })\n      }\n\n      const existingPropertiesMapForChunk = new Map<string, ListingRow>()\n      if (mlsNumbersForChunk.length > 0) {\n        const { data: existingPropsData, error: fetchChunkError } = await supabase\n          .from(\"listings\")\n          .select(\"*\")\n          .in(\"mls_number\", mlsNumbersForChunk)\n\n        if (fetchChunkError) {\n          errorsList.push(\n            `Failed to fetch existing properties for chunk (records ${chunkStart + 1}-${chunkEnd}): ${\n              fetchChunkError.message\n            }`,\n          )\n          failedDueToError += chunk.length\n          continue\n        } else if (existingPropsData) {\n          existingPropsData.forEach(\n            (prop) => prop.mls_number && existingPropertiesMapForChunk.set(prop.mls_number, prop as ListingRow),\n          )\n        }\n      }\n\n      for (let i = 0; i < chunk.length; i++) {\n        const record = chunk[i]\n        const overallRecordIndex = chunkStart + i\n        setProgress(((overallRecordIndex + 1) / totalRecords) * 100)\n\n        const propertyData: ListingInsert = {}\n        let mlsNumberForRecord: string | null = null\n\n        for (const [rawCsvHeader, dbTargetColumn] of Object.entries(fieldMappings)) {\n          if (dbTargetColumn === \"ignore_field\") continue\n\n          const normalizedCsvHeaderKey = normalizeHeader(rawCsvHeader)\n          const rawValue = record[normalizedCsvHeaderKey]\n\n          const columnDefinition = listingTableColumns.find((c) => c.value === dbTargetColumn)\n          const typeHint = columnDefinition ? columnDefinition.typeHint : \"string\"\n          let parsedValue = parseCSVValue(rawValue, typeHint)\n\n          if (dbTargetColumn === \"subdivision\" && typeof parsedValue === \"string\") {\n            parsedValue = toTitleCase(parsedValue)\n          }\n          if (dbTargetColumn === \"status\" && typeof parsedValue === \"string\") {\n            const upperParsedValue = parsedValue.toUpperCase()\n            parsedValue = statusMapping[upperParsedValue] || parsedValue\n          }\n\n          if (parsedValue !== null && parsedValue !== undefined) {\n            ;(propertyData as any)[dbTargetColumn] = parsedValue\n            if (dbTargetColumn === \"mls_number\" && parsedValue) {\n              mlsNumberForRecord = String(parsedValue)\n            }\n          }\n        }\n\n        if (!mlsNumberForRecord) {\n          errorsList.push(`Row ${overallRecordIndex + 2}: Missing or invalid MLS_NUMBER after mapping. Record skipped.`)\n          ignoredForOtherReasons++\n          continue\n        }\n        propertyData.mls_number = mlsNumberForRecord\n\n        if (propertyData.new_construction === undefined && propertyData.new_construction_details) {\n          const detailsLower = String(propertyData.new_construction_details).toLowerCase()\n          if (detailsLower.startsWith(\"yes\") || detailsLower === \"true\" || detailsLower === \"1\") {\n            propertyData.new_construction = true\n          } else if (detailsLower.startsWith(\"no\") || detailsLower === \"false\" || detailsLower === \"0\") {\n            propertyData.new_construction = false\n          }\n        }\n\n        const existingProperty = existingPropertiesMapForChunk.get(mlsNumberForRecord)\n\n        if (existingProperty) {\n          const updatePayload: Partial<ListingRow> = {}\n          let needsUpdate = false\n          for (const key in propertyData) {\n            if (!Object.prototype.hasOwnProperty.call(propertyData, key)) continue\n            const dbKey = key as keyof ListingRow\n            const csvValue = propertyData[dbKey as keyof ListingInsert]\n\n            if (overrideExisting) {\n              if (Object.prototype.hasOwnProperty.call(propertyData, dbKey)) {\n                if (existingProperty[dbKey] !== csvValue) {\n                  ;(updatePayload as any)[dbKey] = csvValue\n                  needsUpdate = true\n                }\n              }\n            } else {\n              if (csvValue !== null && csvValue !== undefined) {\n                if (\n                  existingProperty[dbKey] === null ||\n                  existingProperty[dbKey] === undefined ||\n                  JSON.stringify(existingProperty[dbKey]) !== JSON.stringify(csvValue)\n                ) {\n                  if (Array.isArray(csvValue) && Array.isArray(existingProperty[dbKey])) {\n                    const sortedCsv = [...csvValue].sort().join(\",\")\n                    const sortedDb = [...(existingProperty[dbKey] as any[])].sort().join(\",\")\n                    if (sortedCsv !== sortedDb) {\n                      ;(updatePayload as any)[dbKey] = csvValue\n                      needsUpdate = true\n                    }\n                  } else if (existingProperty[dbKey] !== csvValue) {\n                    ;(updatePayload as any)[dbKey] = csvValue\n                    needsUpdate = true\n                  }\n                }\n              }\n            }\n          }\n          if (needsUpdate && Object.keys(updatePayload).length > 0) {\n            recordsToUpdate.push({ id: existingProperty.id, payload: updatePayload })\n          } else {\n            ignoredForOtherReasons++\n          }\n        } else {\n          const { user_id, ...insertData } = propertyData as any\n          recordsToInsert.push(insertData)\n        }\n      }\n    }\n\n    if (recordsToInsert.length > 0) {\n      const { error: insertError } = await supabase.from(\"listings\").insert(recordsToInsert)\n      if (insertError) {\n        errorsList.push(`Batch insert failed: ${insertError.message}`)\n        failedDueToError += recordsToInsert.length\n      } else {\n        newRecordsAdded = recordsToInsert.length\n      }\n    }\n\n    if (recordsToUpdate.length > 0) {\n      const updatePromises = recordsToUpdate.map((item) =>\n        supabase.from(\"listings\").update(item.payload).eq(\"id\", item.id),\n      )\n      const updateChunkSize = 50\n      for (let i = 0; i < updatePromises.length; i += updateChunkSize) {\n        const chunkPromises = updatePromises.slice(i, i + updateChunkSize)\n        const updateResults = await Promise.allSettled(chunkPromises)\n        updateResults.forEach((res, idxInChunk) => {\n          const originalIdx = i + idxInChunk\n          if (res.status === \"fulfilled\" && !res.value.error) {\n            recordsUpdated++\n          } else {\n            const errorMsg = res.status === \"rejected\" ? res.reason?.message : res.value.error?.message\n            const mlsForFailedUpdate = recordsToUpdate[originalIdx].payload.mls_number || \"unknown MLS\"\n            errorsList.push(\n              `Update for MLS ${mlsForFailedUpdate} (ID: ${recordsToUpdate[originalIdx].id}) failed: ${errorMsg}`,\n            )\n            failedDueToError++\n          }\n        })\n      }\n    }\n\n    const endTime = Date.now()\n    const duration = (endTime - startTime) / 1000\n    setResult({\n      totalRecords,\n      newRecordsAdded,\n      recordsUpdated,\n      ignoredOrDuplicate: ignoredForOtherReasons,\n      failedDueToError,\n      errors: errorsList,\n    })\n    toast({ title: \"Import Complete\", description: `Processed ${totalRecords} records in ${duration.toFixed(2)}s.` })\n\n    try {\n      const updatePayloadForHistory = {\n        status: failedDueToError > 0 || errorsList.length > 0 ? \"completed_with_errors\" : \"completed\",\n        records_processed: totalRecords,\n        records_created: newRecordsAdded,\n        records_updated: recordsUpdated,\n        records_failed: failedDueToError,\n        error_log: errorsList.length > 0 ? errorsList.slice(0, 50).join(\"\\n\") : null,\n        metadata: {\n          duration_seconds: duration,\n          ignored_records: ignoredForOtherReasons,\n          override_existing: overrideExisting,\n        },\n      }\n\n      console.log(\"Attempting to update csv_uploads with ID:\", uploadLog.id)\n      console.log(\"Update payload for csv_uploads:\", JSON.stringify(updatePayloadForHistory, null, 2))\n\n      const { data: updateData, error: updateDbError } = await supabase\n        .from(\"csv_uploads\")\n        .update(updatePayloadForHistory)\n        .eq(\"id\", uploadLog.id)\n        .select() // Important: .select() to get back the updated row(s)\n\n      if (updateDbError) {\n        console.error(\"Supabase error during csv_uploads update:\", updateDbError)\n        throw updateDbError // Throw to be caught by the catch block\n      }\n\n      if (!updateData || updateData.length === 0) {\n        console.warn(\n          \"csv_uploads update did not affect any rows. This might be due to RLS or an incorrect ID. uploadLog.id:\",\n          uploadLog.id,\n        )\n        throw new Error(\"Failed to update upload history: No record found or RLS prevented update.\")\n      }\n\n      console.log(\"csv_uploads successfully updated, returned data:\", updateData)\n    } catch (finalUpdateError: any) {\n      console.error(\"Error in catch block for updating csv_uploads log:\", finalUpdateError)\n      toast({\n        title: \"History Update Failed\",\n        description: `The import completed, but its final status could not be saved. Error: ${finalUpdateError.message}`,\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsProcessing(false)\n      await fetchHistory() // Refresh history regardless of update success/failure\n    }\n  }\n\n  const totalHistoryPages = Math.ceil(totalHistoryCount / historyRowsPerPage)\n\n  return (\n    <div className=\"container mx-auto p-4 space-y-8\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-xl font-semibold\">Import Listing Data</CardTitle>\n          <CardDescription>\n            Upload a CSV file to import listing data. Map fields as needed, then start the import.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div {...getRootProps({ style })}>\n            <input {...getInputProps()} />\n            <UploadCloud className=\"w-12 h-12 mb-3 text-gray-400\" />\n            {isDragActive ? (\n              <p>Drop the files here ...</p>\n            ) : (\n              <p>Drag 'n' drop a CSV file here, or click to select file</p>\n            )}\n            <p className=\"text-xs mt-1\">Max file size: 10MB. Supported format: .csv</p>\n          </div>\n\n          {file && (\n            <div className=\"mt-4 p-3 border rounded-md bg-gray-50\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <FileText className=\"w-5 h-5 text-gray-600\" />\n                  <span className=\"text-sm font-medium\">{file.name}</span>\n                  <span className=\"text-xs text-gray-500\">({(file.size / 1024).toFixed(2)} KB)</span>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => {\n                    setFile(null)\n                    setCsvHeaders([])\n                    setFieldMappings({})\n                    setParsedCsvData([])\n                    setResult(null)\n                    setError(null)\n                    setPreprocessingStats(null)\n                  }}\n                >\n                  <XCircle className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {preprocessingStats && file && (\n            <Card className=\"mt-4 bg-slate-50\">\n              <CardHeader className=\"pb-2 pt-4\">\n                <CardTitle className=\"text-md font-semibold\">File Pre-processing Summary</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-sm space-y-1 pb-4\">\n                <div className=\"flex justify-between\">\n                  <span>Total Records in File:</span> <strong>{preprocessingStats.totalCsvRecords}</strong>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Potential New Records (New MLS #):</span>{\" \"}\n                  <strong>\n                    {preprocessingStats.newCsvRecords === -1 ? \"Error\" : preprocessingStats.newCsvRecords}\n                  </strong>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Potential Matched Records (Existing MLS #):</span>{\" \"}\n                  <strong>\n                    {preprocessingStats.matchedCsvRecords === -1 ? \"Error\" : preprocessingStats.matchedCsvRecords}\n                  </strong>\n                </div>\n                <hr className=\"my-1\" />\n                <div className=\"flex justify-between\">\n                  <span>Total Columns in File:</span> <strong>{preprocessingStats.totalCsvFields}</strong>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Columns Auto-Mapped:</span> <strong>{preprocessingStats.autoMatchedCsvFields}</strong>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Columns Not Auto-Mapped:</span> <strong>{preprocessingStats.unmatchedCsvFields}</strong>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n          {(isProcessing || isSavingMappings) && (\n            <div className=\"mt-4\">\n              {isProcessing && <Progress value={progress} className=\"w-full\" />}\n              <p className=\"text-sm text-center mt-2\">\n                {isSavingMappings ? \"Saving mappings...\" : `Processing... ${Math.round(progress)}%`}\n              </p>\n            </div>\n          )}\n\n          {error && (\n            <Alert variant=\"destructive\" className=\"mt-4\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertTitle>Error</AlertTitle>\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 mt-6 pt-4 border-t\">\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                onClick={() => setIsMappingSheetOpen(true)}\n                disabled={!file || csvHeaders.length === 0 || isProcessing || isSavingMappings}\n                variant=\"outline\"\n              >\n                <Settings2 className=\"mr-2 h-4 w-4\" /> Map Fields\n              </Button>\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"override-existing\"\n                  checked={overrideExisting}\n                  onCheckedChange={setOverrideExisting}\n                  disabled={isProcessing || isSavingMappings}\n                />\n                <Label htmlFor=\"override-existing\" className=\"text-sm\">\n                  Override Existing Values\n                </Label>\n              </div>\n            </div>\n            <Button\n              onClick={handleImport}\n              disabled={\n                !file ||\n                parsedCsvData.length === 0 ||\n                isProcessing ||\n                isSavingMappings ||\n                Object.keys(fieldMappings).length === 0\n              }\n              className=\"w-full sm:w-auto\"\n            >\n              {isProcessing ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Importing...\n                </>\n              ) : (\n                \"Start Import\"\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {result && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-xl font-semibold\">Import Results</CardTitle>\n            <CardDescription>Summary of the data import process.</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4 text-center\">\n              <div className=\"p-3 bg-blue-50 rounded-md\">\n                <p className=\"text-xs text-blue-700 font-medium\">Total Records</p>\n                <p className=\"text-2xl font-bold text-blue-900\">{result.totalRecords}</p>\n              </div>\n              <div className=\"p-3 bg-green-50 rounded-md\">\n                <p className=\"text-xs text-green-700 font-medium\">New Added</p>\n                <p className=\"text-2xl font-bold text-green-900\">{result.newRecordsAdded}</p>\n              </div>\n              <div className=\"p-3 bg-yellow-50 rounded-md\">\n                <p className=\"text-xs text-yellow-700 font-medium\">Updated</p>\n                <p className=\"text-2xl font-bold text-yellow-900\">{result.recordsUpdated}</p>\n              </div>\n              <div className=\"p-3 bg-gray-100 rounded-md\">\n                <p className=\"text-xs text-gray-700 font-medium\">Ignored/No Change</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{result.ignoredOrDuplicate}</p>\n              </div>\n              <div className=\"p-3 bg-red-50 rounded-md\">\n                <p className=\"text-xs text-red-700 font-medium\">Failed (Errors)</p>\n                <p className=\"text-2xl font-bold text-red-900\">{result.failedDueToError}</p>\n              </div>\n            </div>\n\n            {result.errors && result.errors.length > 0 && (\n              <Alert variant=\"destructive\">\n                <Info className=\"h-4 w-4\" />\n                <AlertTitle>Encountered {result.errors.length} Error(s) During Import</AlertTitle>\n                <AlertDescription>\n                  <ul className=\"list-disc list-inside max-h-60 overflow-y-auto text-xs\">\n                    {result.errors.slice(0, 10).map((err, index) => (\n                      <li key={index}>{err}</li>\n                    ))}\n                    {result.errors.length > 10 && (\n                      <li>...and {result.errors.length - 10} more errors. Check server logs for full details.</li>\n                    )}\n                  </ul>\n                </AlertDescription>\n              </Alert>\n            )}\n            {result.errors.length === 0 && result.failedDueToError === 0 && (\n              <Alert className=\"bg-green-50 border-green-200 text-green-800\">\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                <AlertTitle>Import Successful</AlertTitle>\n                <AlertDescription>All records processed without errors.</AlertDescription>\n              </Alert>\n            )}\n          </CardContent>\n        </Card>\n      )}\n      <FieldMappingSheet\n        isOpen={isMappingSheetOpen}\n        onClose={() => setIsMappingSheetOpen(false)}\n        csvHeaders={csvHeaders}\n        currentMappings={fieldMappings}\n        onSaveMappings={handleSaveMappings}\n        availableDbColumns={listingTableColumns}\n      />\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-xl font-semibold\">Upload History</CardTitle>\n          <CardDescription>Recent CSV import attempts and their outcomes.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isLoadingHistory && (\n            <p className=\"text-sm text-gray-500 flex items-center\">\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Loading history...\n            </p>\n          )}\n          {!isLoadingHistory && uploadHistory.length === 0 && (\n            <p className=\"text-sm text-gray-500\">No upload history found.</p>\n          )}\n          {!isLoadingHistory && uploadHistory.length > 0 && (\n            <>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"font-normal\">Filename</TableHead>\n                    <TableHead className=\"font-normal\">Date</TableHead>\n                    <TableHead className=\"font-normal\">Status</TableHead>\n                    <TableHead className=\"text-right font-normal w-20\">Total</TableHead>\n                    <TableHead className=\"text-right font-normal w-20 text-green-600\">New</TableHead>\n                    <TableHead className=\"text-right font-normal w-20 text-yellow-600\">Updated</TableHead>\n                    <TableHead className=\"text-right font-normal w-20 text-gray-600\">Ignored</TableHead>\n                    <TableHead className=\"text-right font-normal w-20 text-red-600\">Failed</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {uploadHistory.map((item) => {\n                    const metadata = item.metadata as CsvUploadMetadata | null\n                    return (\n                      <TableRow key={item.id}>\n                        <TableCell className=\"font-normal truncate max-w-xs\">{item.filename || \"N/A\"}</TableCell>\n                        <TableCell className=\"font-normal\">{formatDate(item.upload_date)}</TableCell>\n                        <TableCell className=\"font-normal\">\n                          <Badge\n                            variant={\n                              item.status === \"completed\"\n                                ? \"default\"\n                                : item.status === \"completed_with_errors\"\n                                  ? \"yellow\"\n                                  : item.status === \"failed\"\n                                    ? \"destructive\"\n                                    : \"secondary\"\n                            }\n                          >\n                            {item.status || \"N/A\"}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"text-right font-normal\">{item.records_processed ?? \"-\"}</TableCell>\n                        <TableCell className=\"text-right font-normal text-green-700\">\n                          {item.records_created ?? \"-\"}\n                        </TableCell>\n                        <TableCell className=\"text-right font-normal text-yellow-700\">\n                          {item.records_updated ?? \"-\"}\n                        </TableCell>\n                        <TableCell className=\"text-right font-normal text-gray-700\">\n                          {metadata?.ignored_records ?? \"-\"}\n                        </TableCell>\n                        <TableCell className=\"text-right font-normal text-red-700\">\n                          {item.records_failed ?? \"-\"}\n                        </TableCell>\n                      </TableRow>\n                    )\n                  })}\n                </TableBody>\n              </Table>\n              {totalHistoryPages > 1 && (\n                <div className=\"flex items-center justify-end space-x-2 py-4\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setHistoryPage((prev) => Math.max(1, prev - 1))}\n                    disabled={historyPage === 1 || isLoadingHistory}\n                  >\n                    <ChevronLeft className=\"h-4 w-4 mr-1\" /> Previous\n                  </Button>\n                  <span className=\"text-sm text-muted-foreground\">\n                    Page {historyPage} of {totalHistoryPages}\n                  </span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setHistoryPage((prev) => Math.min(totalHistoryPages, prev + 1))}\n                    disabled={historyPage === totalHistoryPages || isLoadingHistory}\n                  >\n                    Next <ChevronRight className=\"h-4 w-4 ml-1\" />\n                  </Button>\n                </div>\n              )}\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/insights/page.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\n\nimport { useEffect, useState } from \"react\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { formatCurrency } from \"@/lib/utils\"\nimport { TrendingUp, TrendingDown, Minus, BarChart3, PieChart, Activity } from \"lucide-react\"\n\nexport default function InsightsPage() {\n  const [insights, setInsights] = useState<any>(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    fetchInsights()\n  }, [])\n\n  async function fetchInsights() {\n    try {\n      // Fetch various market insights\n      const { data: properties } = await supabase.from(\"properties\").select(\"*\")\n\n      if (!properties) return\n\n      // Calculate insights\n      const activeListings = properties.filter((p) => p.status === \"Active\")\n      const newConstruction = properties.filter((p) => p.new_construction)\n      const soldProperties = properties.filter((p) => p.status === \"Sold\")\n\n      const avgListPrice = activeListings.reduce((sum, p) => sum + (p.list_price || 0), 0) / activeListings.length\n      const avgSoldPrice = soldProperties.reduce((sum, p) => sum + (p.sold_price || 0), 0) / soldProperties.length\n\n      const avgDOM = activeListings.reduce((sum, p) => sum + (p.dom || 0), 0) / activeListings.length\n\n      // Price ranges\n      const priceRanges = {\n        under1M: properties.filter((p) => (p.list_price || 0) < 1000000).length,\n        \"1M-2M\": properties.filter((p) => (p.list_price || 0) >= 1000000 && (p.list_price || 0) < 2000000).length,\n        \"2M-5M\": properties.filter((p) => (p.list_price || 0) >= 2000000 && (p.list_price || 0) < 5000000).length,\n        over5M: properties.filter((p) => (p.list_price || 0) >= 5000000).length,\n      }\n\n      // Geographic distribution\n      const cityDistribution = properties.reduce((acc: any, p) => {\n        const city = p.city || \"Unknown\"\n        acc[city] = (acc[city] || 0) + 1\n        return acc\n      }, {})\n\n      setInsights({\n        totalProperties: properties.length,\n        activeListings: activeListings.length,\n        newConstruction: newConstruction.length,\n        soldProperties: soldProperties.length,\n        avgListPrice,\n        avgSoldPrice,\n        avgDOM,\n        priceRanges,\n        cityDistribution,\n        newConstructionShare: (newConstruction.length / properties.length) * 100,\n      })\n    } catch (error) {\n      console.error(\"Error fetching insights:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        <div>\n          <h1 className=\"text-lg font-semibold\">Market Insights</h1>\n          <p className=\"text-xs text-gray-600\">Loading market analysis...</p>\n        </div>\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          {Array.from({ length: 8 }).map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"h-4 w-24 animate-pulse rounded bg-gray-200\" />\n                  <div className=\"h-6 w-16 animate-pulse rounded bg-gray-200\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div>\n        <h1 className=\"text-lg font-semibold\">Market Insights</h1>\n        <p className=\"text-xs text-gray-600\">Luxury residential new construction market analysis</p>\n      </div>\n\n      <div className=\"grid gap-3 md:grid-cols-2 lg:grid-cols-4\">\n        <InsightCard\n          title=\"Avg List Price\"\n          value={formatCurrency(insights?.avgListPrice)}\n          change={+3.2}\n          icon={TrendingUp}\n        />\n        <InsightCard\n          title=\"Avg Sold Price\"\n          value={formatCurrency(insights?.avgSoldPrice)}\n          change={+1.8}\n          icon={TrendingUp}\n        />\n        <InsightCard\n          title=\"Avg Days on Market\"\n          value={Math.round(insights?.avgDOM)}\n          change={-5.2}\n          icon={TrendingDown}\n        />\n        <InsightCard\n          title=\"New Construction Share\"\n          value={`${insights?.newConstructionShare?.toFixed(1)}%`}\n          change={+2.1}\n          icon={TrendingUp}\n        />\n      </div>\n\n      <div className=\"grid gap-4 lg:grid-cols-2\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm flex items-center gap-x-2\">\n              <PieChart className=\"h-4 w-4\" />\n              Price Distribution\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <PriceRangeBar\n                label=\"Under $1M\"\n                count={insights?.priceRanges?.under1M}\n                total={insights?.totalProperties}\n              />\n              <PriceRangeBar\n                label=\"$1M - $2M\"\n                count={insights?.priceRanges?.[\"1M-2M\"]}\n                total={insights?.totalProperties}\n              />\n              <PriceRangeBar\n                label=\"$2M - $5M\"\n                count={insights?.priceRanges?.[\"2M-5M\"]}\n                total={insights?.totalProperties}\n              />\n              <PriceRangeBar label=\"Over $5M\" count={insights?.priceRanges?.over5M} total={insights?.totalProperties} />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm flex items-center gap-x-2\">\n              <BarChart3 className=\"h-4 w-4\" />\n              Geographic Distribution\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {Object.entries(insights?.cityDistribution || {})\n                .sort(([, a]: any, [, b]: any) => b - a)\n                .slice(0, 6)\n                .map(([city, count]: any) => (\n                  <div key={city} className=\"flex justify-between items-center text-xs\">\n                    <span className=\"text-gray-600\">{city}</span>\n                    <span className=\"font-medium\">{count}</span>\n                  </div>\n                ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid gap-4 lg:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm flex items-center gap-x-2\">\n              <Activity className=\"h-4 w-4\" />\n              Market Activity\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2 text-xs\">\n              <div className=\"flex justify-between border-b pb-1\">\n                <span className=\"text-gray-600\">Active Listings</span>\n                <span className=\"font-medium\">{insights?.activeListings}</span>\n              </div>\n              <div className=\"flex justify-between border-b pb-1\">\n                <span className=\"text-gray-600\">New Construction</span>\n                <span className=\"font-medium\">{insights?.newConstruction}</span>\n              </div>\n              <div className=\"flex justify-between border-b pb-1\">\n                <span className=\"text-gray-600\">Recently Sold</span>\n                <span className=\"font-medium\">{insights?.soldProperties}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Total Properties</span>\n                <span className=\"font-medium\">{insights?.totalProperties}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm\">Market Trends</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2 text-xs\">\n              <div className=\"flex justify-between items-center border-b pb-1\">\n                <span className=\"text-gray-600\">Price Growth (YoY)</span>\n                <span className=\"font-medium text-green-600 flex items-center gap-x-1\">\n                  <TrendingUp className=\"h-3 w-3\" />\n                  +8.5%\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center border-b pb-1\">\n                <span className=\"text-gray-600\">Inventory Change</span>\n                <span className=\"font-medium text-red-600 flex items-center gap-x-1\">\n                  <TrendingDown className=\"h-3 w-3\" />\n                  -12.3%\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center border-b pb-1\">\n                <span className=\"text-gray-600\">Sales Volume</span>\n                <span className=\"font-medium text-gray-600 flex items-center gap-x-1\">\n                  <Minus className=\"h-3 w-3\" />\n                  +0.8%\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-gray-600\">New Listings</span>\n                <span className=\"font-medium text-green-600 flex items-center gap-x-1\">\n                  <TrendingUp className=\"h-3 w-3\" />\n                  +15.2%\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm\">Key Metrics</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2 text-xs\">\n              <div className=\"flex justify-between border-b pb-1\">\n                <span className=\"text-gray-600\">Median Price/SqFt</span>\n                <span className=\"font-medium\">$425</span>\n              </div>\n              <div className=\"flex justify-between border-b pb-1\">\n                <span className=\"text-gray-600\">Months of Supply</span>\n                <span className=\"font-medium\">3.2</span>\n              </div>\n              <div className=\"flex justify-between border-b pb-1\">\n                <span className=\"text-gray-600\">Absorption Rate</span>\n                <span className=\"font-medium\">85%</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Price Reduction Rate</span>\n                <span className=\"font-medium\">22%</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n\nfunction InsightCard({\n  title,\n  value,\n  change,\n  icon: Icon,\n}: {\n  title: string\n  value: string | number\n  change: number\n  icon: React.ElementType\n}) {\n  const isPositive = change > 0\n  const isNegative = change < 0\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-xs font-medium text-gray-600\">{title}</CardTitle>\n        <Icon className=\"h-3.5 w-3.5 text-gray-400\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-lg font-bold\">{value}</div>\n        <p className=\"text-xs text-muted-foreground\">\n          <span\n            className={`inline-flex items-center gap-x-1 ${\n              isPositive ? \"text-green-600\" : isNegative ? \"text-red-600\" : \"text-gray-600\"\n            }`}\n          >\n            {isPositive ? (\n              <TrendingUp className=\"h-3 w-3\" />\n            ) : isNegative ? (\n              <TrendingDown className=\"h-3 w-3\" />\n            ) : (\n              <Minus className=\"h-3 w-3\" />\n            )}\n            {Math.abs(change)}% from last month\n          </span>\n        </p>\n      </CardContent>\n    </Card>\n  )\n}\n\nfunction PriceRangeBar({ label, count, total }: { label: string; count: number; total: number }) {\n  const percentage = total > 0 ? (count / total) * 100 : 0\n\n  return (\n    <div className=\"space-y-1\">\n      <div className=\"flex justify-between text-xs\">\n        <span className=\"text-gray-600\">{label}</span>\n        <span className=\"font-medium\">{count}</span>\n      </div>\n      <div className=\"w-full bg-gray-200 rounded-full h-1.5\">\n        <div className=\"bg-blue-600 h-1.5 rounded-full\" style={{ width: `${percentage}%` }} />\n      </div>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/listings/[id]/edit/page.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useEffect } from \"react\"\nimport { useParams, useRouter } from \"next/navigation\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { ArrowLeft, Save } from \"lucide-react\"\nimport Link from \"next/link\"\nimport { useToast } from \"@/hooks/use-toast\"\n\nexport default function EditListingPage() {\n  const params = useParams()\n  const router = useRouter()\n  const { toast } = useToast()\n  const [builders, setBuilders] = useState<any[]>([])\n  const [loading, setLoading] = useState(false)\n  const [initialLoading, setInitialLoading] = useState(true)\n  const [formData, setFormData] = useState({\n    mls_number: \"\",\n    status: \"Active\",\n    list_price: \"\",\n    street_number: \"\",\n    street_name: \"\",\n    city: \"\",\n    state: \"\",\n    zip_code: \"\",\n    bedrooms: \"\",\n    baths_full: \"\",\n    baths_half: \"\",\n    interior_sqft: \"\",\n    new_construction: false,\n    builder_id: \"\",\n    property_condition: \"\",\n    garage_spaces: \"\",\n    fireplace: false,\n    central_air: false,\n    basement: false,\n  })\n\n  useEffect(() => {\n    fetchBuilders()\n    if (params.id) {\n      fetchListing()\n    }\n  }, [params.id])\n\n  async function fetchBuilders() {\n    try {\n      const { data } = await supabase.from(\"builders\").select(\"id, name, company_name\").order(\"name\")\n      setBuilders(data || [])\n    } catch (error) {\n      console.error(\"Error fetching builders:\", error)\n    }\n  }\n\n  async function fetchListing() {\n    try {\n      const { data, error } = await supabase.from(\"listings\").select(\"*\").eq(\"id\", params.id).single()\n\n      if (error) throw error\n\n      setFormData({\n        mls_number: data.mls_number || \"\",\n        status: data.status || \"Active\",\n        list_price: data.list_price?.toString() || \"\",\n        street_number: data.street_number || \"\",\n        street_name: data.street_name || \"\",\n        city: data.city || \"\",\n        state: data.state || \"\",\n        zip_code: data.zip_code || \"\",\n        bedrooms: data.bedrooms?.toString() || \"\",\n        baths_full: data.baths_full?.toString() || \"\",\n        baths_half: data.baths_half?.toString() || \"\",\n        interior_sqft: data.interior_sqft?.toString() || \"\",\n        new_construction: data.new_construction || false,\n        builder_id: data.builder_id || \"\",\n        property_condition: data.property_condition || \"\",\n        garage_spaces: data.garage_spaces?.toString() || \"\",\n        fireplace: data.fireplace || false,\n        central_air: data.central_air || false,\n        basement: data.basement || false,\n      })\n    } catch (error) {\n      console.error(\"Error fetching property:\", error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to load listing data.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setInitialLoading(false)\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n\n    try {\n      // Convert string numbers to actual numbers\n      const listingData = {\n        ...formData,\n        list_price: formData.list_price ? Number.parseFloat(formData.list_price) : null,\n        bedrooms: formData.bedrooms ? Number.parseInt(formData.bedrooms) : null,\n        baths_full: formData.baths_full ? Number.parseInt(formData.baths_full) : null,\n        baths_half: formData.baths_half ? Number.parseInt(formData.baths_half) : null,\n        interior_sqft: formData.interior_sqft ? Number.parseInt(formData.interior_sqft) : null,\n        garage_spaces: formData.garage_spaces ? Number.parseInt(formData.garage_spaces) : null,\n        builder_id: formData.builder_id || null,\n      }\n\n      const { error } = await supabase.from(\"listings\").update(listingData).eq(\"id\", params.id)\n\n      if (error) throw error\n\n      toast({\n        title: \"Listing updated\",\n        description: \"Listing has been successfully updated.\",\n      })\n\n      router.push(`/listings/${params.id}`)\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update listing.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (initialLoading) {\n    return <div className=\"text-xs text-gray-600\">Loading...</div>\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center gap-x-2\">\n        <Button variant=\"ghost\" size=\"sm\" asChild>\n          <Link href={`/listings/${params.id}`}>\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Link>\n        </Button>\n        <h1 className=\"text-lg font-semibold\">Edit Listing</h1>\n      </div>\n\n      <form onSubmit={handleSubmit}>\n        <div className=\"grid gap-4 lg:grid-cols-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Basic Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"mls_number\" className=\"text-xs\">\n                  MLS Number *\n                </Label>\n                <Input\n                  id=\"mls_number\"\n                  value={formData.mls_number}\n                  onChange={(e) => setFormData({ ...formData, mls_number: e.target.value })}\n                  className=\"h-8 text-xs\"\n                  required\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"status\" className=\"text-xs\">\n                  Status\n                </Label>\n                <Select value={formData.status} onValueChange={(value) => setFormData({ ...formData, status: value })}>\n                  <SelectTrigger className=\"h-8 text-xs\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Active\">Active</SelectItem>\n                    <SelectItem value=\"Pending\">Pending</SelectItem>\n                    <SelectItem value=\"Under Contract\">Under Contract</SelectItem>\n                    <SelectItem value=\"Sold\">Sold</SelectItem>\n                    <SelectItem value=\"Coming Soon\">Coming Soon</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"list_price\" className=\"text-xs\">\n                  List Price\n                </Label>\n                <Input\n                  id=\"list_price\"\n                  type=\"number\"\n                  value={formData.list_price}\n                  onChange={(e) => setFormData({ ...formData, list_price: e.target.value })}\n                  className=\"h-8 text-xs\"\n                  placeholder=\"0\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"builder_id\" className=\"text-xs\">\n                  Builder\n                </Label>\n                <Select\n                  value={formData.builder_id}\n                  onValueChange={(value) => setFormData({ ...formData, builder_id: value })}\n                >\n                  <SelectTrigger className=\"h-8 text-xs\">\n                    <SelectValue placeholder=\"Select builder\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"no_builder\">No builder</SelectItem>\n                    {builders.map((builder) => (\n                      <SelectItem key={builder.id} value={builder.id}>\n                        {builder.name} {builder.company_name && `(${builder.company_name})`}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Address</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <Label htmlFor=\"street_number\" className=\"text-xs\">\n                    Street Number\n                  </Label>\n                  <Input\n                    id=\"street_number\"\n                    value={formData.street_number}\n                    onChange={(e) => setFormData({ ...formData, street_number: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"street_name\" className=\"text-xs\">\n                    Street Name\n                  </Label>\n                  <Input\n                    id=\"street_name\"\n                    value={formData.street_name}\n                    onChange={(e) => setFormData({ ...formData, street_name: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"city\" className=\"text-xs\">\n                  City\n                </Label>\n                <Input\n                  id=\"city\"\n                  value={formData.city}\n                  onChange={(e) => setFormData({ ...formData, city: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <Label htmlFor=\"state\" className=\"text-xs\">\n                    State\n                  </Label>\n                  <Input\n                    id=\"state\"\n                    value={formData.state}\n                    onChange={(e) => setFormData({ ...formData, state: e.target.value })}\n                    className=\"h-8 text-xs\"\n                    placeholder=\"VA\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"zip_code\" className=\"text-xs\">\n                    Zip Code\n                  </Label>\n                  <Input\n                    id=\"zip_code\"\n                    value={formData.zip_code}\n                    onChange={(e) => setFormData({ ...formData, zip_code: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Property Details</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"grid grid-cols-3 gap-2\">\n                <div>\n                  <Label htmlFor=\"bedrooms\" className=\"text-xs\">\n                    Bedrooms\n                  </Label>\n                  <Input\n                    id=\"bedrooms\"\n                    type=\"number\"\n                    value={formData.bedrooms}\n                    onChange={(e) => setFormData({ ...formData, bedrooms: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"baths_full\" className=\"text-xs\">\n                    Full Baths\n                  </Label>\n                  <Input\n                    id=\"baths_full\"\n                    type=\"number\"\n                    value={formData.baths_full}\n                    onChange={(e) => setFormData({ ...formData, baths_full: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"baths_half\" className=\"text-xs\">\n                    Half Baths\n                  </Label>\n                  <Input\n                    id=\"baths_half\"\n                    type=\"number\"\n                    value={formData.baths_half}\n                    onChange={(e) => setFormData({ ...formData, baths_half: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"interior_sqft\" className=\"text-xs\">\n                  Square Feet\n                </Label>\n                <Input\n                  id=\"interior_sqft\"\n                  type=\"number\"\n                  value={formData.interior_sqft}\n                  onChange={(e) => setFormData({ ...formData, interior_sqft: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"garage_spaces\" className=\"text-xs\">\n                  Garage Spaces\n                </Label>\n                <Input\n                  id=\"garage_spaces\"\n                  type=\"number\"\n                  value={formData.garage_spaces}\n                  onChange={(e) => setFormData({ ...formData, garage_spaces: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Features</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"new_construction\"\n                  checked={formData.new_construction}\n                  onCheckedChange={(checked) => setFormData({ ...formData, new_construction: !!checked })}\n                />\n                <Label htmlFor=\"new_construction\" className=\"text-xs\">\n                  New Construction\n                </Label>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"fireplace\"\n                  checked={formData.fireplace}\n                  onCheckedChange={(checked) => setFormData({ ...formData, fireplace: !!checked })}\n                />\n                <Label htmlFor=\"fireplace\" className=\"text-xs\">\n                  Fireplace\n                </Label>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"central_air\"\n                  checked={formData.central_air}\n                  onCheckedChange={(checked) => setFormData({ ...formData, central_air: !!checked })}\n                />\n                <Label htmlFor=\"central_air\" className=\"text-xs\">\n                  Central Air\n                </Label>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"basement\"\n                  checked={formData.basement}\n                  onCheckedChange={(checked) => setFormData({ ...formData, basement: !!checked })}\n                />\n                <Label htmlFor=\"basement\" className=\"text-xs\">\n                  Basement\n                </Label>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"flex justify-end gap-x-2 mt-4\">\n          <Button type=\"button\" variant=\"outline\" asChild>\n            <Link href={`/listings/${params.id}`}>Cancel</Link>\n          </Button>\n          <Button type=\"submit\" disabled={loading}>\n            {loading ? (\n              \"Updating...\"\n            ) : (\n              <>\n                <Save className=\"mr-2 h-4 w-4\" />\n                Update Listing\n              </>\n            )}\n          </Button>\n        </div>\n      </form>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/listings/[id]/page.tsx\n```typescript\n\"use client\"\n\nimport { useEffect, useState } from \"react\"\nimport { useParams } from \"next/navigation\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { formatCurrency, formatDate, getFullAddress, getStatusColor } from \"@/lib/utils\"\nimport { ArrowLeft, Edit, Share2 } from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport default function ListingDetailPage() {\n  const params = useParams()\n  const [listing, setListing] = useState<any>(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    if (params.id) {\n      fetchListing()\n    }\n  }, [params.id])\n\n  async function fetchListing() {\n    try {\n      const { data, error } = await supabase.from(\"listings\").select(\"*, builders(*)\").eq(\"id\", params.id).single()\n\n      if (error) throw error\n      setListing(data)\n    } catch (error) {\n      console.error(\"Error fetching listing:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (loading) {\n    return <div className=\"text-xs text-gray-600\">Loading...</div>\n  }\n\n  if (!listing) {\n    return <div className=\"text-xs text-gray-600\">Listing not found</div>\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-x-2\">\n          <Button variant=\"ghost\" size=\"sm\" asChild>\n            <Link href=\"/listings\">\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Link>\n          </Button>\n          <div>\n            <h1 className=\"text-lg font-semibold\">{listing.mls_number}</h1>\n            <p className=\"text-xs text-gray-600\">{getFullAddress(listing)}</p>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-x-2\">\n          <Button size=\"sm\" variant=\"outline\" className=\"h-7 text-xs\">\n            <Share2 className=\"mr-1.5 h-3 w-3\" />\n            Add to Social\n          </Button>\n          <Button size=\"sm\" className=\"h-7 text-xs\" asChild>\n            <Link href={`/listings/${params.id}/edit`}>\n              <Edit className=\"mr-1.5 h-3 w-3\" />\n              Edit\n            </Link>\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid gap-4 lg:grid-cols-3\">\n        <div className=\"lg:col-span-2 space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Listing Details</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"grid grid-cols-2 gap-4 text-xs\">\n                <div>\n                  <span className=\"text-gray-600\">Status:</span>\n                  <Badge\n                    variant=\"secondary\"\n                    className={cn(\"ml-2 text-[10px] px-1.5 py-0\", getStatusColor(listing.status))}\n                  >\n                    {listing.status}\n                  </Badge>\n                </div>\n                <div>\n                  <span className=\"text-gray-600\">List Price:</span>\n                  <span className=\"ml-2 font-medium\">{formatCurrency(listing.list_price)}</span>\n                </div>\n                <div>\n                  <span className=\"text-gray-600\">Bedrooms:</span>\n                  <span className=\"ml-2\">{listing.bedrooms || \"-\"}</span>\n                </div>\n                <div>\n                  <span className=\"text-gray-600\">Bathrooms:</span>\n                  <span className=\"ml-2\">\n                    {listing.baths_full || 0}\n                    {listing.baths_half ? `.${listing.baths_half}` : \"\"}\n                  </span>\n                </div>\n                <div>\n                  <span className=\"text-gray-600\">Square Feet:</span>\n                  <span className=\"ml-2\">{listing.interior_sqft?.toLocaleString() || \"-\"}</span>\n                </div>\n                <div>\n                  <span className=\"text-gray-600\">List Date:</span>\n                  <span className=\"ml-2\">{formatDate(listing.list_date)}</span>\n                </div>\n                <div>\n                  <span className=\"text-gray-600\">New Construction:</span>\n                  <span className=\"ml-2\">{listing.new_construction ? \"Yes\" : \"No\"}</span>\n                </div>\n                <div>\n                  <span className=\"text-gray-600\">Builder:</span>\n                  <span className=\"ml-2\">\n                    {listing.builders ? (\n                      <Link href={`/builders/${listing.builders.id}`} className=\"text-blue-600 hover:underline\">\n                        {listing.builders.name}\n                      </Link>\n                    ) : (\n                      \"-\"\n                    )}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {listing.builders && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-sm\">Builder Information</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-xs\">\n                  <div className=\"font-medium\">{listing.builders.name}</div>\n                  <div className=\"text-gray-600\">{listing.builders.company_name}</div>\n                  {listing.builders.phone && <div className=\"text-gray-600\">{listing.builders.phone}</div>}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        <div className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Financial Details</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2 text-xs\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Original Price:</span>\n                <span>{formatCurrency(listing.original_price)}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Current Price:</span>\n                <span className=\"font-medium\">{formatCurrency(listing.list_price)}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Annual Taxes:</span>\n                <span>{formatCurrency(listing.tax_annual_total)}</span>\n              </div>\n              {listing.association_fee && (\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">HOA Fee:</span>\n                  <span>\n                    {formatCurrency(listing.association_fee)} {listing.association_fee_frequency}\n                  </span>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Property Features</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2 text-xs\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Garage Spaces:</span>\n                <span>{listing.garage_spaces || \"-\"}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Fireplace:</span>\n                <span>{listing.fireplace ? \"Yes\" : \"No\"}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Central Air:</span>\n                <span>{listing.central_air ? \"Yes\" : \"No\"}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Basement:</span>\n                <span>{listing.basement ? \"Yes\" : \"No\"}</span>\n              </div>\n              {listing.property_condition && (\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Condition:</span>\n                  <span>{listing.property_condition}</span>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction cn(...classes: string[]) {\n  return classes.filter(Boolean).join(\" \")\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/listings/page.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { DataTable } from \"@/components/ui/data-table\"\nimport { Button } from \"@/components/ui/button\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { formatCurrency, formatDate, getFullAddress, getStatusColor } from \"@/lib/utils\"\nimport { MoreHorizontal, Plus, Download, Eye, Share2, EyeOff, Building2, Trash2, Edit } from \"lucide-react\" // Added Edit\nimport Link from \"next/link\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { BuilderAssignmentDialog } from \"@/components/builder-assignment-dialog\"\nimport { ListingFormDialog } from \"@/components/listing-form-dialog\" // Import new dialog\nimport type { ColumnDef } from \"@tanstack/react-table\"\nimport { DataTableColumnHeader } from \"@/components/ui/data-table-column-header\"\nimport type { Database } from \"@/types/supabase\"\n\ntype Listing = Database[\"public\"][\"Tables\"][\"listings\"][\"Row\"] & {\n  builders: Pick<Database[\"public\"][\"Tables\"][\"builders\"][\"Row\"], \"id\" | \"name\" | \"company_name\"> | null\n}\n\nexport default function PropertiesPage() {\n  const [properties, setProperties] = React.useState<Listing[]>([])\n  const [loading, setLoading] = React.useState(true)\n  const [showBuilderDialog, setShowBuilderDialog] = React.useState(false)\n  const [selectedPropertyIdsForDialog, setSelectedPropertyIdsForDialog] = React.useState<string[]>([])\n  const [isListingFormOpen, setIsListingFormOpen] = React.useState(false) // State for new dialog\n  const [editingListing, setEditingListing] = React.useState<Partial<Listing> | undefined>(undefined) // State for editing\n\n  const { toast } = useToast()\n\n  const fetchProperties = React.useCallback(async () => {\n    setLoading(true)\n    try {\n      const { data, error } = await supabase\n        .from(\"listings\")\n        .select(\n          `\n      *,\n      builders (\n        id,\n        name,\n        company_name\n      )\n    `,\n        )\n        .order(\"list_date\", { ascending: false })\n\n      if (error) throw error\n      setProperties((data as Listing[]) || [])\n    } catch (error) {\n      console.error(\"Error fetching listings:\", error)\n      toast({ title: \"Error\", description: \"Could not fetch listings.\", variant: \"destructive\" })\n    } finally {\n      setLoading(false)\n    }\n  }, [toast])\n\n  React.useEffect(() => {\n    fetchProperties()\n  }, [fetchProperties])\n\n  const handleOpenNewListingDialog = () => {\n    setEditingListing(undefined)\n    setIsListingFormOpen(true)\n  }\n\n  const handleOpenEditListingDialog = (listing: Listing) => {\n    setEditingListing(listing)\n    setIsListingFormOpen(true)\n  }\n\n  const handleBulkAction = async (action: string, selectedRows: Listing[]) => {\n    const selectedIds = selectedRows.map((row) => row.id)\n    if (selectedIds.length === 0) {\n      toast({\n        title: \"No listings selected\",\n        description: \"Please select listings to perform bulk actions.\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    try {\n      let successMessage = \"\"\n      switch (action) {\n        case \"hide\":\n          await supabase\n            .from(\"listings\")\n            .update({ metadata: { hidden: true } })\n            .in(\"id\", selectedIds)\n          successMessage = `Hid ${selectedIds.length} listings.`\n          break\n        case \"add_to_social\":\n          await supabase.from(\"listings\").update({ in_social_queue: true }).in(\"id\", selectedIds)\n          successMessage = `Added ${selectedIds.length} listings to social queue.`\n          break\n        case \"assign_builder\":\n          setSelectedPropertyIdsForDialog(selectedIds)\n          setShowBuilderDialog(true)\n          return // Dialog will handle toast & refresh\n        case \"delete\":\n          if (!confirm(`Are you sure you want to delete ${selectedIds.length} listings? This cannot be undone.`)) {\n            return\n          }\n          const { error } = await supabase.from(\"listings\").delete().in(\"id\", selectedIds)\n          if (error) throw error\n          successMessage = `Deleted ${selectedIds.length} listings.`\n          break\n      }\n\n      toast({\n        title: \"Bulk action completed\",\n        description: successMessage,\n      })\n\n      fetchProperties()\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to perform bulk action.\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  const handleBuilderAssignmentComplete = () => {\n    fetchProperties()\n  }\n\n  const exportToCSV = (selectedRows: Listing[]) => {\n    const dataToExport = selectedRows.length > 0 ? selectedRows : properties\n    if (dataToExport.length === 0) {\n      toast({ title: \"No data to export\", variant: \"destructive\" })\n      return\n    }\n    const csvContent = [\n      [\n        \"MLS Number\",\n        \"Status\",\n        \"Address\",\n        \"List Price\",\n        \"Bedrooms\",\n        \"Bathrooms\",\n        \"Sq Ft\",\n        \"New Construction\",\n        \"Builder\",\n        \"List Date\",\n      ].join(\",\"),\n      ...dataToExport.map((property) =>\n        [\n          `\"${property.mls_number || \"\"}\"`,\n          `\"${property.status || \"\"}\"`,\n          `\"${getFullAddress(property)}\"`,\n          property.list_price || \"\",\n          property.bedrooms || \"\",\n          `${property.baths_full || 0}${property.baths_half ? `.${property.baths_half}` : \"\"}`,\n          property.interior_sqft || \"\",\n          property.new_construction ? \"Yes\" : \"No\",\n          `\"${property.builders?.name || \"\"}\"`,\n          `\"${property.list_date || \"\"}\"`,\n        ].join(\",\"),\n      ),\n    ].join(\"\\n\")\n\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" })\n    const url = window.URL.createObjectURL(blob)\n    const a = document.createElement(\"a\")\n    a.href = url\n    a.download = \"listings_export.csv\"\n    a.click()\n    window.URL.revokeObjectURL(url)\n    toast({ title: \"Export Started\", description: `${dataToExport.length} listings are being exported.` })\n  }\n\n  const columns = React.useMemo<ColumnDef<Listing>[]>(\n    () => [\n      {\n        id: \"select\",\n        header: ({ table }) => (\n          <Checkbox\n            checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && \"indeterminate\")}\n            onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n            aria-label=\"Select all\"\n            className=\"translate-y-[2px]\"\n          />\n        ),\n        cell: ({ row }) => (\n          <Checkbox\n            checked={row.getIsSelected()}\n            onCheckedChange={(value) => row.toggleSelected(!!value)}\n            aria-label=\"Select row\"\n            className=\"translate-y-[2px]\"\n          />\n        ),\n        enableSorting: false,\n        enableHiding: false,\n      },\n      {\n        accessorKey: \"mls_number\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"MLS #\" />,\n        cell: ({ row }) => (\n          <Link href={`/listings/${row.original.id}`} className=\"font-medium hover:underline text-primary\">\n            {row.getValue(\"mls_number\") || \"-\"}\n          </Link>\n        ),\n      },\n      {\n        accessorKey: \"status\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Status\" />,\n        cell: ({ row }) => {\n          const status = row.getValue(\"status\") as string\n          return status ? (\n            <Badge variant=\"secondary\" className={cn(\"text-[10px] px-1.5 py-0\", getStatusColor(status))}>\n              {status}\n            </Badge>\n          ) : (\n            \"-\"\n          )\n        },\n        filterFn: (row, id, value) => value.includes(row.getValue(id)),\n      },\n      {\n        accessorKey: \"address\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Address\" />,\n        cell: ({ row }) => (\n          <Link href={`/listings/${row.original.id}`} className=\"max-w-xs truncate hover:underline\">\n            {getFullAddress(row.original)}\n          </Link>\n        ),\n      },\n      {\n        accessorKey: \"list_price\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"List Price\" />,\n        cell: ({ row }) => formatCurrency(row.getValue(\"list_price\")),\n      },\n      {\n        accessorKey: \"bedrooms\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Beds\" />,\n        cell: ({ row }) => row.getValue(\"bedrooms\") || \"-\",\n      },\n      {\n        accessorKey: \"baths_full\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Baths\" />,\n        cell: ({ row }) => {\n          const full = (row.getValue(\"baths_full\") as number) || 0\n          const half = row.original.baths_half || 0\n          return `${full}${half > 0 ? `.${half}` : \"\"}`\n        },\n      },\n      {\n        accessorKey: \"interior_sqft\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Sq Ft\" />,\n        cell: ({ row }) => {\n          const sqft = row.getValue(\"interior_sqft\") as number\n          return sqft ? sqft.toLocaleString() : \"-\"\n        },\n      },\n      {\n        accessorKey: \"new_construction\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"New\" />,\n        cell: ({ row }) =>\n          row.getValue(\"new_construction\") ? (\n            <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800 text-[10px] px-1.5 py-0\">\n              NEW\n            </Badge>\n          ) : (\n            \"-\"\n          ),\n        filterFn: (row, id, value) => value.includes(row.getValue(id)),\n      },\n      {\n        accessorKey: \"builders.name\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Builder\" />,\n        cell: ({ row }) => {\n          const builder = row.original.builders\n          return builder ? (\n            <Link href={`/builders/${builder.id}`} className=\"text-primary hover:underline text-xs\">\n              {builder.name}\n            </Link>\n          ) : (\n            <span className=\"text-gray-400 text-xs\">-</span>\n          )\n        },\n      },\n      {\n        accessorKey: \"list_date\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Listed\" />,\n        cell: ({ row }) => formatDate(row.getValue(\"list_date\")),\n      },\n      {\n        id: \"actions\",\n        cell: ({ row }) => {\n          return (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"h-7 w-7 p-0\">\n                  <span className=\"sr-only\">Open menu</span>\n                  <MoreHorizontal className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-[160px]\">\n                <DropdownMenuLabel className=\"text-xs\">Actions</DropdownMenuLabel>\n                <DropdownMenuItem className=\"text-xs\" asChild>\n                  <Link href={`/listings/${row.original.id}`}>\n                    <Eye className=\"mr-2 h-3.5 w-3.5\" />\n                    View details\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem className=\"text-xs\" onClick={() => handleOpenEditListingDialog(row.original)}>\n                  <Edit className=\"mr-2 h-3.5 w-3.5\" />\n                  Edit Listing\n                </DropdownMenuItem>\n                <DropdownMenuItem className=\"text-xs\" onClick={() => handleBulkAction(\"add_to_social\", [row.original])}>\n                  <Share2 className=\"mr-2 h-3.5 w-3.5\" />\n                  Add to Social Queue\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem className=\"text-xs\" onClick={() => handleBulkAction(\"hide\", [row.original])}>\n                  <EyeOff className=\"mr-2 h-3.5 w-3.5\" />\n                  Hide Listing\n                </DropdownMenuItem>\n                <DropdownMenuItem\n                  className=\"text-xs text-red-600 focus:text-red-600 focus:bg-red-50\"\n                  onClick={() => handleBulkAction(\"delete\", [row.original])}\n                >\n                  <Trash2 className=\"mr-2 h-3.5 w-3.5\" />\n                  Delete Listing\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          )\n        },\n      },\n    ],\n    [fetchProperties],\n  )\n\n  const renderPropertiesBulkActions = (selectedRows: Listing[]) => (\n    <>\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        className=\"h-7 text-xs\"\n        onClick={() => handleBulkAction(\"add_to_social\", selectedRows)}\n      >\n        <Share2 className=\"mr-1.5 h-3 w-3\" /> Add to Social\n      </Button>\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        className=\"h-7 text-xs\"\n        onClick={() => handleBulkAction(\"assign_builder\", selectedRows)}\n      >\n        <Building2 className=\"mr-1.5 h-3 w-3\" /> Assign Builder\n      </Button>\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        className=\"h-7 text-xs\"\n        onClick={() => handleBulkAction(\"hide\", selectedRows)}\n      >\n        <EyeOff className=\"mr-1.5 h-3 w-3\" /> Hide\n      </Button>\n      <Button\n        variant=\"destructive\"\n        size=\"sm\"\n        className=\"h-7 text-xs\"\n        onClick={() => handleBulkAction(\"delete\", selectedRows)}\n      >\n        <Trash2 className=\"mr-1.5 h-3 w-3\" /> Delete\n      </Button>\n    </>\n  )\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-lg font-semibold\">Listings</h1>\n          <p className=\"text-xs text-muted-foreground\">Manage your listings.</p>\n        </div>\n        <div className=\"flex items-center gap-x-2\">\n          <Button size=\"sm\" variant=\"outline\" className=\"h-7 text-xs\" onClick={() => exportToCSV([])}>\n            <Download className=\"mr-1.5 h-3 w-3\" />\n            Export All\n          </Button>\n          <Button size=\"sm\" className=\"h-7 text-xs\" onClick={handleOpenNewListingDialog}>\n            {\" \"}\n            {/* Changed this line */}\n            <Plus className=\"mr-1.5 h-3 w-3\" />\n            Add Listing\n          </Button>\n        </div>\n      </div>\n\n      <DataTable\n        columns={columns}\n        data={properties}\n        loading={loading}\n        renderBulkActions={renderPropertiesBulkActions}\n        searchColumn=\"address\" // Example: enable global search on address\n      />\n\n      <BuilderAssignmentDialog\n        open={showBuilderDialog}\n        onOpenChange={setShowBuilderDialog}\n        selectedPropertyIds={selectedPropertyIdsForDialog}\n        onAssignmentComplete={handleBuilderAssignmentComplete}\n      />\n      <ListingFormDialog // Add the new dialog component\n        open={isListingFormOpen}\n        onOpenChange={setIsListingFormOpen}\n        onListingCreated={fetchProperties} // Refresh list on creation\n        listing={editingListing}\n      />\n    </div>\n  )\n}\n\nfunction cn(...classes: string[]) {\n  return classes.filter(Boolean).join(\" \")\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/reports/page.tsx\n```typescript\n\"use client\"\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { FileText, Download, Calendar, BarChart3 } from \"lucide-react\"\n\nexport default function ReportsPage() {\n  return (\n    <div className=\"space-y-4\">\n      <div>\n        <h1 className=\"text-lg font-semibold\">Reports</h1>\n        <p className=\"text-xs text-gray-600\">Generate and download market reports</p>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm flex items-center gap-x-2\">\n              <FileText className=\"h-4 w-4\" />\n              Market Summary Report\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-xs text-gray-600 mb-3\">Comprehensive overview of market conditions and trends</p>\n            <Button size=\"sm\" className=\"h-7 text-xs w-full\">\n              <Download className=\"mr-1.5 h-3 w-3\" />\n              Generate Report\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm flex items-center gap-x-2\">\n              <BarChart3 className=\"h-4 w-4\" />\n              Builder Performance\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-xs text-gray-600 mb-3\">Analysis of builder activity and market share</p>\n            <Button size=\"sm\" className=\"h-7 text-xs w-full\">\n              <Download className=\"mr-1.5 h-3 w-3\" />\n              Generate Report\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm flex items-center gap-x-2\">\n              <Calendar className=\"h-4 w-4\" />\n              Monthly Activity\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-xs text-gray-600 mb-3\">Monthly breakdown of listings and sales activity</p>\n            <Button size=\"sm\" className=\"h-7 text-xs w-full\">\n              <Download className=\"mr-1.5 h-3 w-3\" />\n              Generate Report\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/settings/page.tsx\n```typescript\n\"use client\"\n\nimport { AlertDialogTrigger } from \"@/components/ui/alert-dialog\" // Keep if used by other parts, otherwise can be removed if only for StyleGuide\nimport { DialogTrigger } from \"@/components/ui/dialog\" // Keep if used by other parts, otherwise can be removed if only for StyleGuide\n\nimport { useState, useEffect, useCallback } from \"react\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { supabase } from \"@/lib/supabase/client\" // Used by multiple sub-components\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Switch } from \"@/components/ui/switch\"\nimport {\n  Select as ShadSelect,\n  SelectContent as ShadSelectContent,\n  SelectItem as ShadSelectItem,\n  SelectTrigger as ShadSelectTrigger,\n  SelectValue as ShadSelectValue,\n} from \"@/components/ui/select\"\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { useToast } from \"@/hooks/use-toast\" // Corrected path\nimport {\n  AlertCircle,\n  CheckCircle,\n  Loader2,\n  PaletteIcon,\n  ChevronDown,\n  ChevronsUpDown,\n  Mail,\n  Github,\n  Italic,\n  Check,\n  DatabaseIcon,\n  MapPin,\n} from \"lucide-react\"\nimport type { Database } from \"@/types/supabase\"\nimport { hexToHsl } from \"@/lib/color-utils\"\nimport {\n  Dialog, // Keep if used by other parts\n  DialogContent as DialogContentForStyleGuide, // Alias to avoid conflict if Dialog is used elsewhere\n  DialogDescription as DialogDescriptionForStyleGuide,\n  DialogFooter as DialogFooterForStyleGuide,\n  DialogHeader as DialogHeaderForStyleGuide,\n  DialogTitle as DialogTitleForStyleGuide,\n} from \"@/components/ui/dialog\"\nimport {\n  AlertDialog, // Keep if used by other parts\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent as AlertDialogContentForStyleGuide, // Alias\n  AlertDialogDescription as AlertDialogDescriptionForStyleGuide,\n  AlertDialogFooter as AlertDialogFooterForStyleGuide,\n  AlertDialogHeader as AlertDialogHeaderForStyleGuide,\n  AlertDialogTitle as AlertDialogTitleForStyleGuide,\n} from \"@/components/ui/alert-dialog\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuPortal,\n} from \"@/components/ui/dropdown-menu\"\nimport {\n  Select as SelectForStyleGuide,\n  SelectContent as SelectContentForStyleGuideSelect, // Further aliasing for clarity\n  SelectItem as SelectItemForStyleGuideSelect,\n  SelectTrigger as SelectTriggerForStyleGuideSelect,\n  SelectValue as SelectValueForStyleGuideSelect,\n} from \"@/components/ui/select\"\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\"\nimport { Switch as SwitchForStyleGuide } from \"@/components/ui/switch\"\nimport { Toggle } from \"@/components/ui/toggle\"\nimport { cn, normalizeHeader } from \"@/lib/utils\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n\nimport { PillInput } from \"@/components/pill-input\"\nimport type { ListingFieldDefinition } from \"@/lib/listing-fields\"\nimport { builderTableColumns, type BuilderFieldDefinition } from \"@/lib/builder-fields\"\nimport { listingTableColumns } from \"@/lib/listing-fields\"\n\ntype UserSettings = Database[\"public\"][\"Tables\"][\"user_settings\"][\"Row\"]\ntype UserFieldMappingInsert = Database[\"public\"][\"Tables\"][\"user_field_mappings\"][\"Insert\"]\n\nconst DEFAULT_PRIMARY_HEX = \"#0A0A0A\"\nconst DEFAULT_PRIMARY_FOREGROUND_HEX = \"#FAFAFA\"\n\nconst PREDEFINED_ACCENTS = [\n  { name: \"Default\", primary: DEFAULT_PRIMARY_HEX, foreground: DEFAULT_PRIMARY_FOREGROUND_HEX },\n  { name: \"Vercel Blue\", primary: \"#0070F3\", foreground: \"#FFFFFF\" },\n  { name: \"Forest Green\", primary: \"#228B22\", foreground: \"#F0FFF0\" },\n  { name: \"Sunset Orange\", primary: \"#FF4500\", foreground: \"#FFFFF0\" },\n  { name: \"Royal Purple\", primary: \"#6A0DAD\", foreground: \"#F8F0FF\" },\n]\n\nconst GEOCODING_BATCH_SIZE = 10 // Define batch size for geocoding info\n\nexport default function SettingsPage() {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-xl font-semibold\">Settings</h1>\n        <p className=\"text-sm text-muted-foreground\">Manage your account, preferences, and application style</p>\n      </div>\n\n      <Tabs defaultValue=\"preferences\" className=\"w-full\">\n        <TabsList className=\"grid w-full max-w-2xl grid-cols-6\">\n          <TabsTrigger value=\"preferences\">Preferences</TabsTrigger>\n          <TabsTrigger value=\"account\">Account</TabsTrigger>\n          <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n          <TabsTrigger value=\"style-guide\">Style Guide</TabsTrigger>\n          <TabsTrigger value=\"integrations\">Integrations</TabsTrigger>\n          <TabsTrigger value=\"data-structure\">Data Structure</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"preferences\">\n          <PreferencesSettings />\n        </TabsContent>\n        <TabsContent value=\"account\">\n          <AccountSettings />\n        </TabsContent>\n        <TabsContent value=\"notifications\">\n          <NotificationSettings />\n        </TabsContent>\n        <TabsContent value=\"style-guide\">\n          <StyleGuideSettingsTab />\n        </TabsContent>\n        <TabsContent value=\"integrations\">\n          <IntegrationsSettings />\n        </TabsContent>\n        <TabsContent value=\"data-structure\">\n          <DataStructureSettings />\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n\nfunction PreferencesSettings() {\n  const { user } = useAuth()\n  const [settings, setSettings] = useState<Partial<UserSettings>>({\n    theme: \"light\",\n    default_view: \"grid\",\n    items_per_page: 50,\n  })\n  const [isLoading, setIsLoading] = useState(true)\n  const [isSaving, setIsSaving] = useState(false)\n  const [success, setSuccess] = useState<string | null>(null)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    async function fetchSettings() {\n      if (!user) {\n        setIsLoading(false)\n        return\n      }\n      setIsLoading(true)\n      try {\n        const { data, error: fetchError } = await supabase\n          .from(\"user_settings\")\n          .select(\"theme, default_view, items_per_page\")\n          .eq(\"user_id\", user.id)\n          .single()\n\n        if (fetchError && fetchError.code !== \"PGRST116\") {\n          throw fetchError\n        }\n        if (data) {\n          setSettings((prev) => ({ ...prev, ...data }))\n        }\n      } catch (err: any) {\n        console.error(\"Error fetching user preferences:\", err)\n        setError(err.message || \"Failed to load preferences.\")\n      } finally {\n        setIsLoading(false)\n      }\n    }\n    fetchSettings()\n  }, [user])\n\n  const handleSave = async () => {\n    if (!user) return\n\n    setIsSaving(true)\n    setSuccess(null)\n    setError(null)\n\n    try {\n      const { error: upsertError } = await supabase.from(\"user_settings\").upsert(\n        {\n          user_id: user.id,\n          theme: settings.theme,\n          default_view: settings.default_view,\n          items_per_page: settings.items_per_page,\n        },\n        { onConflict: \"user_id\" },\n      )\n\n      if (upsertError) throw upsertError\n\n      setSuccess(\"Preferences saved successfully\")\n    } catch (err: any) {\n      setError(err.message || \"Failed to save preferences\")\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-base\">Display Preferences</CardTitle>\n        <CardDescription className=\"text-xs\">Customize how the application looks and behaves</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {success && (\n          <Alert className=\"bg-green-50 text-green-800 border-green-200\">\n            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n            <AlertTitle>Success</AlertTitle>\n            <AlertDescription>{success}</AlertDescription>\n          </Alert>\n        )}\n        {error && (\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertTitle>Error</AlertTitle>\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"theme\">Theme</Label>\n          <ShadSelect\n            value={settings.theme || \"light\"}\n            onValueChange={(value) => setSettings({ ...settings, theme: value })}\n            disabled={isLoading}\n          >\n            <ShadSelectTrigger id=\"theme\" className=\"attio-input\">\n              <ShadSelectValue placeholder=\"Select theme\" />\n            </ShadSelectTrigger>\n            <ShadSelectContent>\n              <ShadSelectItem value=\"light\">Light</ShadSelectItem>\n              <ShadSelectItem value=\"dark\">Dark</ShadSelectItem>\n              <ShadSelectItem value=\"system\">System</ShadSelectItem>\n            </ShadSelectContent>\n          </ShadSelect>\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"default-view\">Default View</Label>\n          <ShadSelect\n            value={settings.default_view || \"grid\"}\n            onValueChange={(value) => setSettings({ ...settings, default_view: value })}\n            disabled={isLoading}\n          >\n            <ShadSelectTrigger id=\"default-view\" className=\"attio-input\">\n              <ShadSelectValue placeholder=\"Select default view\" />\n            </ShadSelectTrigger>\n            <ShadSelectContent>\n              <ShadSelectItem value=\"grid\">Grid</ShadSelectItem>\n              <ShadSelectItem value=\"table\">Table</ShadSelectItem>\n              <ShadSelectItem value=\"kanban\">Kanban</ShadSelectItem>\n            </ShadSelectContent>\n          </ShadSelect>\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"items-per-page\">Items Per Page</Label>\n          <ShadSelect\n            value={(settings.items_per_page || 50).toString()}\n            onValueChange={(value) => setSettings({ ...settings, items_per_page: Number.parseInt(value) })}\n            disabled={isLoading}\n          >\n            <ShadSelectTrigger id=\"items-per-page\" className=\"attio-input\">\n              <ShadSelectValue placeholder=\"Select items per page\" />\n            </ShadSelectTrigger>\n            <ShadSelectContent>\n              <ShadSelectItem value=\"10\">10</ShadSelectItem>\n              <ShadSelectItem value=\"25\">25</ShadSelectItem>\n              <ShadSelectItem value=\"50\">50</ShadSelectItem>\n              <ShadSelectItem value=\"100\">100</ShadSelectItem>\n            </ShadSelectContent>\n          </ShadSelect>\n        </div>\n      </CardContent>\n      <CardFooter>\n        <Button onClick={handleSave} disabled={isLoading || isSaving}>\n          {isSaving ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : \"Save Preferences\"}\n        </Button>\n      </CardFooter>\n    </Card>\n  )\n}\n\nfunction AccountSettings() {\n  const { user } = useAuth()\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [confirmPassword, setConfirmPassword] = useState(\"\")\n  const [isUpdating, setIsUpdating] = useState(false)\n  const [success, setSuccess] = useState<string | null>(null)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    if (user) {\n      setEmail(user.email || \"\")\n    }\n  }, [user])\n\n  const handleUpdatePassword = async () => {\n    if (!password || password !== confirmPassword) {\n      setError(\"Passwords do not match or are empty.\")\n      return\n    }\n    if (password.length < 6) {\n      setError(\"Password must be at least 6 characters long.\")\n      return\n    }\n\n    setIsUpdating(true)\n    setSuccess(null)\n    setError(null)\n\n    try {\n      const { error: updateError } = await supabase.auth.updateUser({ password })\n      if (updateError) throw updateError\n\n      setSuccess(\"Password updated successfully\")\n      setPassword(\"\")\n      setConfirmPassword(\"\")\n    } catch (err: any) {\n      setError(err.message || \"Failed to update password\")\n    } finally {\n      setIsUpdating(false)\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-base\">Account Settings</CardTitle>\n        <CardDescription className=\"text-xs\">Update your account information and password</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {success && (\n          <Alert className=\"bg-green-50 text-green-800 border-green-200\">\n            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n            <AlertTitle>Success</AlertTitle>\n            <AlertDescription>{success}</AlertDescription>\n          </Alert>\n        )}\n        {error && (\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertTitle>Error</AlertTitle>\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"email\">Email</Label>\n          <Input id=\"email\" value={email} disabled className=\"attio-input bg-muted\" />\n          <p className=\"text-xs text-muted-foreground\">Your email address cannot be changed</p>\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"password\">New Password</Label>\n          <Input\n            id=\"password\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            className=\"attio-input\"\n          />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"confirm-password\">Confirm New Password</Label>\n          <Input\n            id=\"confirm-password\"\n            type=\"password\"\n            value={confirmPassword}\n            onChange={(e) => setConfirmPassword(e.target.value)}\n            className=\"attio-input\"\n          />\n        </div>\n      </CardContent>\n      <CardFooter>\n        <Button onClick={handleUpdatePassword} disabled={!password || !confirmPassword || isUpdating}>\n          {isUpdating ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : \"Update Password\"}\n        </Button>\n      </CardFooter>\n    </Card>\n  )\n}\n\nfunction NotificationSettings() {\n  const { user } = useAuth()\n  const [settings, setSettings] = useState<Partial<UserSettings>>({\n    notifications_enabled: true,\n    email_notifications: true,\n  })\n  const [isLoading, setIsLoading] = useState(true)\n  const [isSaving, setIsSaving] = useState(false)\n  const [success, setSuccess] = useState<string | null>(null)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    async function fetchSettings() {\n      if (!user) {\n        setIsLoading(false)\n        return\n      }\n      setIsLoading(true)\n      try {\n        const { data, error: fetchError } = await supabase\n          .from(\"user_settings\")\n          .select(\"notifications_enabled, email_notifications\")\n          .eq(\"user_id\", user.id)\n          .single()\n\n        if (fetchError && fetchError.code !== \"PGRST116\") {\n          throw fetchError\n        }\n        if (data) {\n          setSettings((prev) => ({ ...prev, ...data }))\n        }\n      } catch (err: any) {\n        console.error(\"Error fetching notification settings:\", err)\n        setError(err.message || \"Failed to load notification settings.\")\n      } finally {\n        setIsLoading(false)\n      }\n    }\n    fetchSettings()\n  }, [user])\n\n  const handleSave = async () => {\n    if (!user) return\n\n    setIsSaving(true)\n    setSuccess(null)\n    setError(null)\n\n    try {\n      const { error: upsertError } = await supabase.from(\"user_settings\").upsert(\n        {\n          user_id: user.id,\n          notifications_enabled: settings.notifications_enabled,\n          email_notifications: settings.email_notifications,\n        },\n        { onConflict: \"user_id\" },\n      )\n\n      if (upsertError) throw upsertError\n\n      setSuccess(\"Notification settings saved successfully\")\n    } catch (err: any) {\n      setError(err.message || \"Failed to save notification settings\")\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-base\">Notification Settings</CardTitle>\n        <CardDescription className=\"text-xs\">Manage how and when you receive notifications</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {success && (\n          <Alert className=\"bg-green-50 text-green-800 border-green-200\">\n            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n            <AlertTitle>Success</AlertTitle>\n            <AlertDescription>{success}</AlertDescription>\n          </Alert>\n        )}\n        {error && (\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertTitle>Error</AlertTitle>\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-0.5\">\n            <Label htmlFor=\"notifications-enabled\">Enable Notifications</Label>\n            <p className=\"text-xs text-muted-foreground\">Receive notifications about important updates</p>\n          </div>\n          <Switch\n            id=\"notifications-enabled\"\n            checked={settings.notifications_enabled === true}\n            onCheckedChange={(checked) => setSettings({ ...settings, notifications_enabled: checked })}\n            disabled={isLoading}\n          />\n        </div>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-0.5\">\n            <Label htmlFor=\"email-notifications\">Email Notifications</Label>\n            <p className=\"text-xs text-muted-foreground\">Receive notifications via email</p>\n          </div>\n          <Switch\n            id=\"email-notifications\"\n            checked={settings.email_notifications === true}\n            onCheckedChange={(checked) => setSettings({ ...settings, email_notifications: checked })}\n            disabled={isLoading || settings.notifications_enabled === false}\n          />\n        </div>\n      </CardContent>\n      <CardFooter>\n        <Button onClick={handleSave} disabled={isLoading || isSaving}>\n          {isSaving ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : \"Save Notification Settings\"}\n        </Button>\n      </CardFooter>\n    </Card>\n  )\n}\n\nfunction StyleGuideSettingsTab() {\n  const { user } = useAuth()\n  const { toast } = useToast()\n  const [primaryHex, setPrimaryHex] = useState(DEFAULT_PRIMARY_HEX)\n  const [primaryForegroundHex, setPrimaryForegroundHex] = useState(DEFAULT_PRIMARY_FOREGROUND_HEX)\n  const [isLoading, setIsLoading] = useState(true)\n  const [isSaving, setIsSaving] = useState(false)\n  const [successMessage, setSuccessMessage] = useState<string | null>(null)\n  const [errorMessage, setErrorMessage] = useState<string | null>(null)\n\n  const frameworks = [\n    { value: \"next.js\", label: \"Next.js\" },\n    { value: \"sveltekit\", label: \"SvelteKit\" },\n    { value: \"nuxt.js\", label: \"Nuxt.js\" },\n    { value: \"remix\", label: \"Remix\" },\n    { value: \"astro\", label: \"Astro\" },\n  ]\n  const [comboboxOpen, setComboboxOpen] = useState(false)\n  const [comboboxValue, setComboboxValue] = useState(\"\")\n\n  const applyColorsToDocument = useCallback((primaryHslColor: string, foregroundHslColor: string) => {\n    if (typeof document !== \"undefined\") {\n      document.documentElement.style.setProperty(\"--primary\", primaryHslColor)\n      document.documentElement.style.setProperty(\"--primary-foreground\", foregroundHslColor)\n    }\n  }, [])\n\n  useEffect(() => {\n    async function fetchStyleSettings() {\n      if (!user) {\n        setIsLoading(false)\n        const defaultPrimaryHsl = hexToHsl(DEFAULT_PRIMARY_HEX)\n        const defaultFgHsl = hexToHsl(DEFAULT_PRIMARY_FOREGROUND_HEX)\n        if (defaultPrimaryHsl && defaultFgHsl) {\n          applyColorsToDocument(defaultPrimaryHsl, defaultFgHsl)\n        }\n        return\n      }\n      setIsLoading(true)\n      try {\n        const { data, error } = await supabase\n          .from(\"user_settings\")\n          .select(\"primary_color_hex, primary_foreground_color_hex\")\n          .eq(\"user_id\", user.id)\n          .single()\n\n        if (error && error.code !== \"PGRST116\") throw error\n\n        const currentPrimaryHex = data?.primary_color_hex || DEFAULT_PRIMARY_HEX\n        const currentFgHex = data?.primary_foreground_color_hex || DEFAULT_PRIMARY_FOREGROUND_HEX\n\n        setPrimaryHex(currentPrimaryHex)\n        setPrimaryForegroundHex(currentFgHex)\n\n        const primaryHsl = hexToHsl(currentPrimaryHex)\n        const fgHsl = hexToHsl(currentFgHex)\n        const defaultPrimaryHsl = hexToHsl(DEFAULT_PRIMARY_HEX)\n        const defaultFgHsl = hexToHsl(DEFAULT_PRIMARY_FOREGROUND_HEX)\n\n        if (primaryHsl && fgHsl && defaultPrimaryHsl && defaultFgHsl) {\n          applyColorsToDocument(primaryHsl, fgHsl)\n        } else if (defaultPrimaryHsl && defaultFgHsl) {\n          applyColorsToDocument(defaultPrimaryHsl, defaultFgHsl)\n        }\n      } catch (err: any) {\n        console.error(\"Error fetching style settings:\", err)\n        setErrorMessage(\"Failed to load style settings.\")\n        const defaultPrimaryHsl = hexToHsl(DEFAULT_PRIMARY_HEX)\n        const defaultFgHsl = hexToHsl(DEFAULT_PRIMARY_FOREGROUND_HEX)\n        if (defaultPrimaryHsl && defaultFgHsl) {\n          applyColorsToDocument(defaultPrimaryHsl, defaultFgHsl)\n        }\n      } finally {\n        setIsLoading(false)\n      }\n    }\n    fetchStyleSettings()\n  }, [user, applyColorsToDocument, supabase])\n\n  useEffect(() => {\n    const primaryHslValue = hexToHsl(primaryHex)\n    const foregroundHslValue = hexToHsl(primaryForegroundHex)\n    if (primaryHslValue && foregroundHslValue) {\n      applyColorsToDocument(primaryHslValue, foregroundHslValue)\n    }\n  }, [primaryHex, primaryForegroundHex, applyColorsToDocument])\n\n  const handleSaveAccentColor = async () => {\n    if (!user) {\n      setErrorMessage(\"You must be logged in to save settings.\")\n      return\n    }\n    setIsSaving(true)\n    setSuccessMessage(null)\n    setErrorMessage(null)\n\n    if (!hexToHsl(primaryHex) || !hexToHsl(primaryForegroundHex)) {\n      setErrorMessage(\"Invalid HEX color format. Please use #RRGGBB or #RGB.\")\n      toast({ title: \"Invalid HEX\", description: \"Please check your color codes.\", variant: \"destructive\" })\n      setIsSaving(false)\n      return\n    }\n\n    try {\n      const { error } = await supabase.from(\"user_settings\").upsert(\n        {\n          user_id: user.id,\n          primary_color_hex: primaryHex,\n          primary_foreground_color_hex: primaryForegroundHex,\n        },\n        { onConflict: \"user_id\" },\n      )\n\n      if (error) throw error\n\n      setSuccessMessage(\"Accent color saved successfully! It will be applied globally on next page load or refresh.\")\n      toast({\n        title: \"Accent Color Saved\",\n        description: \"Your new accent color has been saved.\",\n      })\n    } catch (err: any) {\n      console.error(\"Error saving accent color:\", err)\n      setErrorMessage((err as Error).message || \"Failed to save accent color.\")\n      toast({\n        title: \"Error\",\n        description: \"Failed to save accent color.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  const handlePresetChange = (primaryHexString: string, foregroundHexString: string) => {\n    setPrimaryHex(primaryHexString)\n    setPrimaryForegroundHex(foregroundHexString)\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-64 items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {successMessage && (\n        <Alert className=\"border-green-500 bg-green-50 text-green-700\">\n          <CheckCircle className=\"h-4 w-4 !text-green-700\" />\n          <AlertTitle>Success</AlertTitle>\n          <AlertDescription>{successMessage}</AlertDescription>\n        </Alert>\n      )}\n      {errorMessage && (\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertTitle>Error</AlertTitle>\n          <AlertDescription>{errorMessage}</AlertDescription>\n        </Alert>\n      )}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base flex items-center\">\n            <PaletteIcon className=\"mr-2 h-5 w-5\" /> Accent Color Customization\n          </CardTitle>\n          <CardDescription className=\"text-xs\">\n            Customize the primary accent color. Changes are previewed live on this page. Global application requires a\n            page refresh after saving.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"primaryHex\">Primary Color HEX</Label>\n              <Input\n                id=\"primaryHex\"\n                value={primaryHex}\n                onChange={(e) => setPrimaryHex(e.target.value)}\n                placeholder=\"e.g., #0A0A0A\"\n                className=\"attio-input\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"primaryForegroundHex\">Primary Foreground HEX</Label>\n              <Input\n                id=\"primaryForegroundHex\"\n                value={primaryForegroundHex}\n                onChange={(e) => setPrimaryForegroundHex(e.target.value)}\n                placeholder=\"e.g., #FAFAFA\"\n                className=\"attio-input\"\n              />\n            </div>\n          </div>\n          <div className=\"space-y-2\">\n            <Label>Predefined Accents</Label>\n            <div className=\"flex flex-wrap gap-2\">\n              {PREDEFINED_ACCENTS.map((preset) => (\n                <Button\n                  key={preset.name}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handlePresetChange(preset.primary, preset.foreground)}\n                  className=\"flex items-center gap-2\"\n                >\n                  <span style={{ backgroundColor: preset.primary }} className=\"h-4 w-4 rounded-full border\" />\n                  {preset.name}\n                </Button>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button onClick={handleSaveAccentColor} disabled={isSaving}>\n            {isSaving && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n            Save Accent Color\n          </Button>\n        </CardFooter>\n      </Card>\n\n      <Separator />\n\n      <section className=\"space-y-8\">\n        <h3 className=\"text-xl font-semibold\">Component Previews</h3>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Typography</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <h1 className=\"text-4xl font-bold\">Heading 1</h1>\n            <h2 className=\"text-3xl font-semibold\">Heading 2</h2>\n            <h3 className=\"text-2xl font-medium\">Heading 3</h3>\n            <h4 className=\"text-xl\">Heading 4</h4>\n            <p>\n              This is a paragraph. Links look like{\" \"}\n              <a href=\"#\" className=\"font-medium text-primary underline underline-offset-4\">\n                this\n              </a>\n              . <strong>Bold text</strong>.\n            </p>\n            <blockquote className=\"mt-6 border-l-2 pl-6 italic\">Blockquote example.</blockquote>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Buttons</CardTitle>\n          </CardHeader>\n          <CardContent className=\"flex flex-wrap gap-2\">\n            <Button>Primary</Button>\n            <Button variant=\"secondary\">Secondary</Button>\n            <Button variant=\"destructive\">Destructive</Button>\n            <Button variant=\"outline\">Outline</Button>\n            <Button variant=\"ghost\">Ghost</Button>\n            <Button variant=\"link\">Link</Button>\n            <Button>\n              <Mail className=\"mr-2 h-4 w-4\" /> With Icon\n            </Button>\n            <Button variant=\"outline\" size=\"icon\">\n              <Github className=\"h-4 w-4\" />\n            </Button>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Cards</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Card className=\"w-full max-w-sm\">\n              <CardHeader>\n                <CardTitle>Card Title</CardTitle>\n                <CardDescription>This is a card description.</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <p>Card content goes here. You can put any elements inside.</p>\n              </CardContent>\n              <CardFooter className=\"flex justify-between\">\n                <Button variant=\"outline\">Cancel</Button>\n                <Button>Deploy</Button>\n              </CardFooter>\n            </Card>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Inputs & Selects</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4 max-w-xs\">\n            <Input placeholder=\"Standard Input\" className=\"attio-input\" />\n            <Input type=\"email\" placeholder=\"Email Input\" className=\"attio-input\" />\n            <SelectForStyleGuide>\n              <SelectTriggerForStyleGuideSelect className=\"attio-input\">\n                <SelectValueForStyleGuideSelect placeholder=\"Select an option\" />\n              </SelectTriggerForStyleGuideSelect>\n              <SelectContentForStyleGuideSelect>\n                <SelectItemForStyleGuideSelect value=\"1\">Option 1</SelectItemForStyleGuideSelect>\n                <SelectItemForStyleGuideSelect value=\"2\">Option 2</SelectItemForStyleGuideSelect>\n              </SelectContentForStyleGuideSelect>\n            </SelectForStyleGuide>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Table</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"w-[100px]\">Invoice</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Method</TableHead>\n                  <TableHead className=\"text-right\">Amount</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                <TableRow>\n                  <TableCell className=\"font-medium\">INV001</TableCell>\n                  <TableCell>Paid</TableCell>\n                  <TableCell>Credit Card</TableCell>\n                  <TableCell className=\"text-right\">$250.00</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell className=\"font-medium\">INV002</TableCell>\n                  <TableCell>Pending</TableCell>\n                  <TableCell>PayPal</TableCell>\n                  <TableCell className=\"text-right\">$150.00</TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Modals & Dialogs</CardTitle>\n          </CardHeader>\n          <CardContent className=\"flex gap-2\">\n            <Dialog>\n              <DialogTrigger asChild>\n                <Button variant=\"outline\">Open Dialog</Button>\n              </DialogTrigger>\n              <DialogContentForStyleGuide>\n                <DialogHeaderForStyleGuide>\n                  <DialogTitleForStyleGuide>Dialog Title</DialogTitleForStyleGuide>\n                  <DialogDescriptionForStyleGuide>This is a dialog.</DialogDescriptionForStyleGuide>\n                </DialogHeaderForStyleGuide>\n                <DialogFooterForStyleGuide>\n                  <Button>OK</Button>\n                </DialogFooterForStyleGuide>\n              </DialogContentForStyleGuide>\n            </Dialog>\n            <AlertDialog>\n              <AlertDialogTrigger asChild>\n                <Button variant=\"destructive\">Open Alert Dialog</Button>\n              </AlertDialogTrigger>\n              <AlertDialogContentForStyleGuide>\n                <AlertDialogHeaderForStyleGuide>\n                  <AlertDialogTitleForStyleGuide>Alert!</AlertDialogTitleForStyleGuide>\n                  <AlertDialogDescriptionForStyleGuide>This is an alert dialog.</AlertDialogDescriptionForStyleGuide>\n                </AlertDialogHeaderForStyleGuide>\n                <AlertDialogFooterForStyleGuide>\n                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n                  <AlertDialogAction>Continue</AlertDialogAction>\n                </AlertDialogFooterForStyleGuide>\n              </AlertDialogContentForStyleGuide>\n            </AlertDialog>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Popovers</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Popover>\n              <PopoverTrigger asChild>\n                <Button variant=\"outline\">Open Popover</Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-80\">\n                <p>Popover content goes here. Useful for small bits of information or actions.</p>\n              </PopoverContent>\n            </Popover>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Toast Notifications</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-x-2\">\n            <Button\n              variant=\"outline\"\n              onClick={() => toast({ title: \"Event Scheduled\", description: \"Friday, February 10, 2023 at 5:57 PM\" })}\n            >\n              Show Toast\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() =>\n                toast({\n                  title: \"Uh oh! Something went wrong.\",\n                  description: \"There was a problem with your request.\",\n                  variant: \"destructive\",\n                })\n              }\n            >\n              Show Destructive Toast\n            </Button>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Dropdown Menus</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"outline\">\n                  Open Menu <ChevronDown className=\"ml-2 h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent>\n                <DropdownMenuLabel>My Account</DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem>Profile</DropdownMenuItem>\n                <DropdownMenuItem>Billing</DropdownMenuItem>\n                <DropdownMenuSub>\n                  <DropdownMenuSubTrigger>\n                    <span>Invite users</span>\n                  </DropdownMenuSubTrigger>\n                  <DropdownMenuPortal>\n                    <DropdownMenuSubContent>\n                      <DropdownMenuItem>\n                        <span>Email</span>\n                      </DropdownMenuItem>\n                      <DropdownMenuItem>\n                        <span>Message</span>\n                      </DropdownMenuItem>\n                    </DropdownMenuSubContent>\n                  </DropdownMenuPortal>\n                </DropdownMenuSub>\n                <DropdownMenuItem>Log out</DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Combobox</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Popover open={comboboxOpen} onOpenChange={setComboboxOpen}>\n              <PopoverTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  role=\"combobox\"\n                  aria-expanded={comboboxOpen}\n                  className=\"w-[200px] justify-between\"\n                >\n                  {comboboxValue\n                    ? frameworks.find((framework) => framework.value === comboboxValue)?.label\n                    : \"Select framework...\"}\n                  <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-[200px] p-0\">\n                <Command>\n                  <CommandInput placeholder=\"Search framework...\" />\n                  <CommandList>\n                    <CommandEmpty>No framework found.</CommandEmpty>\n                    <CommandGroup>\n                      {frameworks.map((framework) => (\n                        <CommandItem\n                          key={framework.value}\n                          value={framework.value}\n                          onSelect={(currentValue) => {\n                            setComboboxValue(currentValue === comboboxValue ? \"\" : currentValue)\n                            setComboboxOpen(false)\n                          }}\n                        >\n                          <Check\n                            className={cn(\n                              \"mr-2 h-4 w-4\",\n                              comboboxValue === framework.value ? \"opacity-100\" : \"opacity-0\",\n                            )}\n                          />\n                          {framework.label}\n                        </CommandItem>\n                      ))}\n                    </CommandGroup>\n                  </CommandList>\n                </Command>\n              </PopoverContent>\n            </Popover>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Checkboxes & Radio Group</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox id=\"terms-style\" /> <Label htmlFor=\"terms-style\">Accept terms</Label>\n            </div>\n            <RadioGroup defaultValue=\"comfortable-style\">\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"default-style\" id=\"r1-style\" /> <Label htmlFor=\"r1-style\">Default</Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"comfortable-style\" id=\"r2-style\" /> <Label htmlFor=\"r2-style\">Comfortable</Label>\n              </div>\n            </RadioGroup>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Switches & Toggles</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <div className=\"flex items-center space-x-2\">\n              <SwitchForStyleGuide id=\"airplane-mode-style\" />{\" \"}\n              <Label htmlFor=\"airplane-mode-style\">Airplane Mode</Label>\n            </div>\n            <Toggle aria-label=\"Toggle italic\">\n              <Italic className=\"h-4 w-4\" />\n            </Toggle>\n          </CardContent>\n        </Card>\n      </section>\n    </div>\n  )\n}\n\nfunction IntegrationsSettings() {\n  const { user } = useAuth()\n  const { toast } = useToast()\n  const [openaiApiKey, setOpenaiApiKey] = useState(\"\")\n  const [openaiModel, setOpenaiModel] = useState(\"gpt-3.5-turbo\")\n  const [mapboxApiKey, setMapboxApiKey] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(true)\n  const [isSavingOpenAI, setIsSavingOpenAI] = useState(false)\n  const [isSavingMapbox, setIsSavingMapbox] = useState(false)\n  const [geocodingLoading, setGeocodingLoading] = useState(false)\n  const [geocodingMessage, setGeocodingMessage] = useState<string | null>(null)\n\n  const availableModels = [\n    { value: \"gpt-4o\", label: \"GPT-4o (Latest)\" },\n    { value: \"gpt-4-turbo\", label: \"GPT-4 Turbo\" },\n    { value: \"gpt-3.5-turbo\", label: \"GPT-3.5 Turbo\" },\n  ]\n\n  useEffect(() => {\n    async function fetchIntegrationSettings() {\n      if (!user) {\n        setIsLoading(false)\n        return\n      }\n      setIsLoading(true)\n      try {\n        const { data, error: fetchError } = await supabase\n          .from(\"user_settings\")\n          .select(\"openai_api_key, openai_model, mapbox_api_key\")\n          .eq(\"user_id\", user.id)\n          .single()\n\n        if (fetchError && fetchError.code !== \"PGRST116\") {\n          throw fetchError\n        }\n        if (data) {\n          setOpenaiApiKey(data.openai_api_key || \"\")\n          setOpenaiModel(data.openai_model || \"gpt-3.5-turbo\")\n          setMapboxApiKey(data.mapbox_api_key || \"\")\n        }\n      } catch (err: any) {\n        console.error(\"Error fetching integration settings:\", err)\n        toast({ title: \"Error\", description: \"Failed to load integration settings.\", variant: \"destructive\" })\n      } finally {\n        setIsLoading(false)\n      }\n    }\n    fetchIntegrationSettings()\n  }, [user, toast, supabase])\n\n  const handleSaveOpenAISettings = async () => {\n    if (!user) return\n\n    setIsSavingOpenAI(true)\n    try {\n      const { error: upsertError } = await supabase.from(\"user_settings\").upsert(\n        {\n          user_id: user.id,\n          openai_api_key: openaiApiKey,\n          openai_model: openaiModel,\n        },\n        { onConflict: \"user_id\" },\n      )\n\n      if (upsertError) throw upsertError\n\n      toast({ title: \"Success\", description: \"OpenAI settings saved successfully.\" })\n    } catch (err: any) {\n      toast({\n        title: \"Error\",\n        description: (err as Error).message || \"Failed to save OpenAI settings.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsSavingOpenAI(false)\n    }\n  }\n\n  const handleSaveMapboxSettings = async () => {\n    if (!user) return\n\n    setIsSavingMapbox(true)\n    try {\n      const { error: upsertError } = await supabase.from(\"user_settings\").upsert(\n        {\n          user_id: user.id,\n          mapbox_api_key: mapboxApiKey,\n        },\n        { onConflict: \"user_id\" },\n      )\n\n      if (upsertError) throw upsertError\n\n      toast({ title: \"Success\", description: \"Mapbox settings saved successfully.\" })\n    } catch (err: any) {\n      toast({\n        title: \"Error\",\n        description: (err as Error).message || \"Failed to save Mapbox settings.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsSavingMapbox(false)\n    }\n  }\n\n  const handleGeocodeProperties = async () => {\n    setGeocodingLoading(true)\n    setGeocodingMessage(\"Starting geocoding process...\")\n\n    if (!user) {\n      toast({ title: \"Authentication Error\", description: \"You must be logged in.\", variant: \"destructive\" })\n      setGeocodingLoading(false)\n      return\n    }\n\n    let totalGeocoded = 0\n    let totalFailed = 0\n    let batchNumber = 1\n    let shouldContinue = true\n\n    while (shouldContinue) {\n      try {\n        setGeocodingMessage(\n          `Processing batch ${batchNumber}... Total geocoded so far: ${totalGeocoded}, Failed: ${totalFailed}`,\n        )\n\n        const {\n          data: { session },\n        } = await supabase.auth.getSession()\n        if (!session) throw new Error(\"User session not found. Please log in again.\")\n\n        const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\n        const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n        if (!supabaseUrl || !supabaseAnonKey) throw new Error(\"Supabase URL or Anon Key is not configured.\")\n\n        console.log(\"Making request to:\", `${supabaseUrl}/functions/v1/geocode-properties`)\n\n        const response = await fetch(`${supabaseUrl}/functions/v1/geocode-properties`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${session.access_token}`,\n            apikey: supabaseAnonKey,\n          },\n        })\n\n        console.log(\"Response status:\", response.status)\n        console.log(\"Response headers:\", Object.fromEntries(response.headers.entries()))\n\n        const result = await response.json()\n        console.log(\"Response body:\", result)\n\n        if (!response.ok) {\n          throw new Error(result.error || result.message || `HTTP ${response.status}: ${response.statusText}`)\n        }\n\n        // Handle both string responses and object responses from the Edge Function\n        let geocodedInBatch = 0\n        let failedInBatch = 0\n        let propertiesFound = 0\n\n        if (typeof result === \"string\") {\n          // Parse the string response to extract numbers - fix the regex patterns\n          const processedMatch = result.match(/Processed:\\s*(\\d+)/)\n          const geocodedMatch = result.match(/Geocoded:\\s*(\\d+)/)\n          const failedMatch = result.match(/Failed:\\s*(\\d+)/)\n\n          propertiesFound = processedMatch ? Number.parseInt(processedMatch[1], 10) : 0\n          geocodedInBatch = geocodedMatch ? Number.parseInt(geocodedMatch[1], 10) : 0\n          failedInBatch = failedMatch ? Number.parseInt(failedMatch[1], 10) : 0\n\n          // Debug logging to verify parsing\n          console.log(\"String parsing results:\", {\n            originalString: result,\n            processedMatch,\n            geocodedMatch,\n            failedMatch,\n            propertiesFound,\n            geocodedInBatch,\n            failedInBatch,\n          })\n        } else {\n          // Handle object response format\n          geocodedInBatch = result.geocodedCount || 0\n          failedInBatch = result.failedCount || 0\n          propertiesFound = result.propertiesFound || result.processedCount || 0\n        }\n\n        totalGeocoded += geocodedInBatch\n        totalFailed += failedInBatch\n\n        console.log(`Batch ${batchNumber} results:`, {\n          geocodedInBatch,\n          failedInBatch,\n          propertiesFound,\n          totalGeocoded,\n          totalFailed,\n        })\n\n        // If the function found 0 properties, it means there are no more to process.\n        // But if it found properties and geocoded them, we should continue to the next batch.\n        if (propertiesFound === 0) {\n          if (batchNumber === 1) {\n            setGeocodingMessage(\n              \"No properties found that need geocoding. All properties may already have coordinates or are missing required address fields.\",\n            )\n          }\n          shouldContinue = false\n        } else if (geocodedInBatch === 0 && propertiesFound > 0) {\n          // If we found properties but couldn't geocode any of them, stop to avoid an infinite loop\n          setGeocodingMessage(\n            \"Found properties without coordinates, but couldn't geocode any of them. Check address data quality.\",\n          )\n          shouldContinue = false\n        } else {\n          batchNumber++\n          // Add a small delay between batches to avoid rate limiting\n          await new Promise((resolve) => setTimeout(resolve, 1000))\n        }\n      } catch (error: any) {\n        console.error(\"Geocoding error:\", error)\n        const errorMessage = error.message || \"An unknown error occurred.\"\n        setGeocodingMessage(`Error: ${errorMessage}. Stopping process.`)\n        toast({\n          title: \"Geocoding Error\",\n          description: errorMessage,\n          variant: \"destructive\",\n        })\n        shouldContinue = false // Stop the loop on any error\n      }\n    }\n\n    const finalMessage = `Geocoding complete. Total newly geocoded: ${totalGeocoded}. Total failed: ${totalFailed}.`\n    setGeocodingMessage(finalMessage)\n    toast({\n      title: \"Geocoding Process Finished\",\n      description: finalMessage,\n    })\n    setGeocodingLoading(false)\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base\">AI Integrations</CardTitle>\n          <CardDescription className=\"text-xs\">Configure your OpenAI API for AI-powered features.</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {isLoading ? (\n            <div className=\"flex justify-center items-center h-24\">\n              <Loader2 className=\"h-6 w-6 animate-spin\" />\n            </div>\n          ) : (\n            <>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"openai-api-key\">OpenAI API Key</Label>\n                <Input\n                  id=\"openai-api-key\"\n                  type=\"password\"\n                  value={openaiApiKey}\n                  onChange={(e) => setOpenaiApiKey(e.target.value)}\n                  placeholder=\"sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n                  className=\"attio-input\"\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  Your API key is stored securely and only used for AI features within this application.\n                </p>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"openai-model\">OpenAI Model</Label>\n                <ShadSelect value={openaiModel} onValueChange={setOpenaiModel}>\n                  <ShadSelectTrigger id=\"openai-model\" className=\"attio-input\">\n                    <ShadSelectValue placeholder=\"Select AI model\" />\n                  </ShadSelectTrigger>\n                  <ShadSelectContent>\n                    {availableModels.map((model) => (\n                      <ShadSelectItem key={model.value} value={model.value}>\n                        {model.label}\n                      </ShadSelectItem>\n                    ))}\n                  </ShadSelectContent>\n                </ShadSelect>\n              </div>\n            </>\n          )}\n        </CardContent>\n        <CardFooter>\n          <Button onClick={handleSaveOpenAISettings} disabled={isLoading || isSavingOpenAI}>\n            {isSavingOpenAI ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : \"Save OpenAI Settings\"}\n          </Button>\n        </CardFooter>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base flex items-center\">\n            <MapPin className=\"mr-2 h-5 w-5\" /> Mapbox Integration\n          </CardTitle>\n          <CardDescription className=\"text-xs\">\n            Configure your Mapbox Access Token for map features. This token is stored in your user settings and used\n            client-side.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {isLoading ? (\n            <div className=\"flex justify-center items-center h-16\">\n              <Loader2 className=\"h-6 w-6 animate-spin\" />\n            </div>\n          ) : (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"mapbox-api-key\">Mapbox Access Token (Client-side)</Label>\n              <Input\n                id=\"mapbox-api-key\"\n                type=\"password\"\n                value={mapboxApiKey}\n                onChange={(e) => setMapboxApiKey(e.target.value)}\n                placeholder=\"pk.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n                className=\"attio-input\"\n              />\n              <p className=\"text-xs text-muted-foreground\">\n                Your Mapbox Access Token for displaying maps. For server-side geocoding, a separate token is configured\n                in your Edge Function settings.\n              </p>\n            </div>\n          )}\n        </CardContent>\n        <CardFooter>\n          <Button onClick={handleSaveMapboxSettings} disabled={isLoading || isSavingMapbox}>\n            {isSavingMapbox ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : \"Save Mapbox Token\"}\n          </Button>\n        </CardFooter>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base flex items-center\">\n            <DatabaseIcon className=\"mr-2 h-5 w-5\" /> Data Management\n          </CardTitle>\n          <CardDescription className=\"text-xs\">Tools for managing and enhancing your property data.</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"geocode-properties\">Server-Side Geocoding</Label>\n            <p className=\"text-xs text-muted-foreground\">\n              Run a process to find all properties missing coordinates and geocode them. This will run continuously in\n              batches until all properties are processed.\n            </p>\n            <Button onClick={handleGeocodeProperties} disabled={geocodingLoading || isLoading}>\n              {geocodingLoading ? (\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              ) : (\n                <DatabaseIcon className=\"mr-2 h-4 w-4\" />\n              )}\n              {geocodingLoading ? \"Geocoding in Progress...\" : \"Start Full Geocoding Process\"}\n            </Button>\n            {geocodingMessage && (\n              <Alert\n                className={`mt-2 text-xs ${\n                  geocodingMessage.toLowerCase().startsWith(\"error:\")\n                    ? \"border-red-500 text-red-700\"\n                    : \"border-blue-500 text-blue-700\"\n                }`}\n              >\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertTitle>\n                  {geocodingLoading\n                    ? \"Process Update\"\n                    : geocodingMessage.toLowerCase().startsWith(\"error:\")\n                      ? \"Process Error\"\n                      : \"Process Complete\"}\n                </AlertTitle>\n                <AlertDescription>{geocodingMessage}</AlertDescription>\n              </Alert>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nfunction DataStructureSettings() {\n  const { user } = useAuth()\n  const { toast } = useToast()\n  const [selectedTable, setSelectedTable] = useState<\"listings\" | \"builders\">(\"listings\")\n  const [isLoading, setIsLoading] = useState(false)\n  const [dbColumns, setDbColumns] = useState<(ListingFieldDefinition | BuilderFieldDefinition)[]>([])\n  const [fieldMappings, setFieldMappings] = useState<Record<string, string[]>>({}) // dbColumnValue -> csvHeader[]\n\n  useEffect(() => {\n    if (selectedTable === \"listings\") {\n      setDbColumns(listingTableColumns)\n    } else {\n      setDbColumns(builderTableColumns)\n    }\n    setFieldMappings({}) // Reset mappings when table changes\n  }, [selectedTable])\n\n  useEffect(() => {\n    if (!user || dbColumns.length === 0) {\n      if (dbColumns.length > 0) {\n        setFieldMappings(\n          dbColumns.reduce(\n            (acc, col) => {\n              acc[col.value] = []\n              return acc\n            },\n            {} as Record<string, string[]>,\n          ),\n        )\n      }\n      return\n    }\n\n    async function fetchMappings() {\n      setIsLoading(true)\n      try {\n        const { data, error } = await supabase\n          .from(\"user_field_mappings\")\n          .select(\"target_database_column, source_csv_header\")\n          .eq(\"user_id\", user!.id)\n          .eq(\"target_table_name\", selectedTable)\n\n        if (error) throw error\n\n        const newMappings: Record<string, string[]> = {}\n        dbColumns.forEach((col) => (newMappings[col.value] = []))\n\n        data?.forEach((mapping) => {\n          if (newMappings[mapping.target_database_column]) {\n            newMappings[mapping.target_database_column].push(mapping.source_csv_header)\n          } else {\n            newMappings[mapping.target_database_column] = [mapping.source_csv_header]\n          }\n        })\n        setFieldMappings(newMappings)\n      } catch (err: any) {\n        toast({ title: \"Error\", description: `Failed to load field mappings: ${err.message}`, variant: \"destructive\" })\n        setFieldMappings(\n          dbColumns.reduce(\n            (acc, col) => {\n              acc[col.value] = []\n              return acc\n            },\n            {} as Record<string, string[]>,\n          ),\n        )\n      } finally {\n        setIsLoading(false)\n      }\n    }\n    fetchMappings()\n  }, [user, selectedTable, dbColumns, toast, supabase])\n\n  const handleMappingChange = async (dbColumnValue: string, newCsvHeaders: string[]) => {\n    if (!user) return\n\n    const oldCsvHeaders = fieldMappings[dbColumnValue] || []\n    const normalizedNewCsvHeaders = newCsvHeaders.map(normalizeHeader).filter(Boolean) // Normalize and remove empty strings\n\n    // Optimistically update UI with normalized headers\n    setFieldMappings((prev) => ({ ...prev, [dbColumnValue]: normalizedNewCsvHeaders }))\n\n    const added = normalizedNewCsvHeaders.filter((h) => !oldCsvHeaders.includes(h))\n    const removed = oldCsvHeaders.filter((h) => !normalizedNewCsvHeaders.includes(h))\n\n    try {\n      // Handle added headers\n      for (const normalizedCsv of added) {\n        const { data: existingConflict, error: checkError } = await supabase\n          .from(\"user_field_mappings\")\n          .select(\"id, target_database_column\")\n          .eq(\"user_id\", user.id)\n          .eq(\"target_table_name\", selectedTable)\n          .eq(\"source_csv_header\", normalizedCsv)\n          .neq(\"target_database_column\", dbColumnValue) // Check if mapped to a *different* column\n          .single()\n\n        if (checkError && checkError.code !== \"PGRST116\") throw checkError\n\n        if (existingConflict) {\n          toast({\n            title: \"Mapping Conflict\",\n            description: `CSV header \"${normalizedCsv}\" is already mapped to \"${existingConflict.target_database_column}\". Please remove it from the other mapping first or use a different CSV header. Reverting changes for this field.`,\n            variant: \"destructive\",\n          })\n          setFieldMappings((prev) => ({ ...prev, [dbColumnValue]: oldCsvHeaders })) // Revert\n          return // Stop processing this field's changes\n        }\n\n        const { error: insertError } = await supabase.from(\"user_field_mappings\").upsert(\n          {\n            user_id: user.id,\n            target_table_name: selectedTable,\n            target_database_column: dbColumnValue,\n            source_csv_header: normalizedCsv,\n          } as UserFieldMappingInsert,\n          { onConflict: \"user_id,target_table_name,source_csv_header\" },\n        )\n        if (insertError) throw insertError\n      }\n\n      // Handle removed headers\n      for (const csvHeaderToRemove of removed) {\n        const { error: deleteError } = await supabase\n          .from(\"user_field_mappings\")\n          .delete()\n          .eq(\"user_id\", user.id)\n          .eq(\"target_table_name\", selectedTable)\n          .eq(\"target_database_column\", dbColumnValue)\n          .eq(\"source_csv_header\", csvHeaderToRemove)\n        if (deleteError) throw deleteError\n      }\n\n      if (added.length > 0 || removed.length > 0) {\n        toast({ title: \"Mappings Updated\", description: `Mappings for ${dbColumnValue} saved.` })\n      }\n    } catch (err: any) {\n      toast({ title: \"Error\", description: `Failed to update mappings: ${err.message}`, variant: \"destructive\" })\n      setFieldMappings((prev) => ({ ...prev, [dbColumnValue]: oldCsvHeaders })) // Revert on error\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-base flex items-center\">\n          <DatabaseIcon className=\"mr-2 h-5 w-5\" /> Custom Field Mappings\n        </CardTitle>\n        <CardDescription className=\"text-xs\">\n          Define default CSV headers that should map to your database columns for faster imports. These mappings are\n          specific to your user account. Enter the exact CSV header text you expect.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"space-y-2 max-w-sm\">\n          <Label htmlFor=\"table-select\">Select Table</Label>\n          <ShadSelect\n            value={selectedTable}\n            onValueChange={(value) => setSelectedTable(value as \"listings\" | \"builders\")}\n          >\n            <ShadSelectTrigger id=\"table-select\" className=\"attio-input\">\n              <ShadSelectValue placeholder=\"Select a table\" />\n            </ShadSelectTrigger>\n            <ShadSelectContent>\n              <ShadSelectItem value=\"listings\">Listings</ShadSelectItem>\n              <ShadSelectItem value=\"builders\">Builders</ShadSelectItem>\n            </ShadSelectContent>\n          </ShadSelect>\n        </div>\n\n        {isLoading && (\n          <div className=\"flex items-center justify-center py-8\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n            <p className=\"ml-2\">Loading mappings...</p>\n          </div>\n        )}\n\n        {!isLoading && dbColumns.length > 0 && (\n          <div className=\"space-y-4 max-h-[60vh] overflow-y-auto pr-2\">\n            {dbColumns.map((col) => (\n              <div key={col.value} className=\"p-4 border rounded-md bg-muted/20\">\n                <Label htmlFor={`map-${col.value}`} className=\"font-semibold text-sm block mb-1\">\n                  {col.label} <span className=\"text-xs text-muted-foreground\">({col.value})</span>\n                </Label>\n                <PillInput\n                  value={fieldMappings[col.value] || []}\n                  onChange={(newPills) => handleMappingChange(col.value, newPills)}\n                  placeholder=\"Enter CSV header and press Enter...\"\n                  className=\"mt-1\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Enter the exact CSV header(s) that should map to this field. Headers are case-insensitive and spaces\n                  are replaced with underscores.\n                </p>\n              </div>\n            ))}\n          </div>\n        )}\n        {!isLoading && dbColumns.length === 0 && selectedTable && (\n          <p className=\"text-sm text-muted-foreground\">No columns defined for the '{selectedTable}' table.</p>\n        )}\n      </CardContent>\n      <CardFooter>\n        <p className=\"text-xs text-muted-foreground\">\n          Changes are saved automatically. CSV headers are stored in a normalized format (uppercase, underscores).\n        </p>\n      </CardFooter>\n    </Card>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/social/[postId]/page.tsx\n```typescript\n\"use client\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport { useParams } from \"next/navigation\"\nimport { useEffect, useState, useCallback } from \"react\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport type { Database } from \"@/types/supabase\" // Ensure this path is correct\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { toast } from \"@/hooks/use-toast\"\nimport Link from \"next/link\"\nimport { ArrowLeft, Loader2, ImageIcon } from \"lucide-react\"\nimport { EditableField } from \"@/components/editable-field\"\nimport { SocialPostPropertyItem } from \"@/components/social-post-property-item\"\nimport { SelectContent, SelectItem } from \"@/components/ui/select\"\n\ntype SocialPostFromDB = Database[\"public\"][\"Tables\"][\"social_posts\"][\"Row\"]\ntype SocialPostPropertyFromDB = Database[\"public\"][\"Tables\"][\"social_post_properties\"][\"Row\"]\ntype ListingFromDB = Database[\"public\"][\"Tables\"][\"listings\"][\"Row\"]\n\ninterface SocialPostProperty extends SocialPostPropertyFromDB {\n  properties: ListingFromDB | null\n}\n\ninterface FullSocialPost extends SocialPostFromDB {\n  social_post_properties: SocialPostProperty[]\n  content_type: string | null // Added\n  format_type: string | null // Added\n}\n\nexport default function SocialPostDetailPage() {\n  const params = useParams()\n  const postId = params.postId as string\n  const [post, setPost] = useState<FullSocialPost | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  const fetchPostDetails = useCallback(async () => {\n    if (!postId) {\n      setLoading(false) // Stop loading if no postId\n      return\n    }\n    setLoading(true)\n    const { data, error } = await supabase\n      .from(\"social_posts\")\n      .select(\n        `\n        *,\n        social_post_properties (\n          *,\n          properties (\n            id, mls_number, list_price, city, state, zip_code, street_number, street_direction, street_name, unit_number, status\n          )\n        )\n      `,\n      )\n      .eq(\"id\", postId)\n      .single()\n\n    if (error) {\n      console.error(\"Error fetching post details:\", error)\n      toast({ title: \"Error\", description: \"Failed to load post details. \" + error.message, variant: \"destructive\" })\n      setPost(null)\n    } else {\n      setPost(data as FullSocialPost)\n    }\n    setLoading(false)\n  }, [postId])\n\n  useEffect(() => {\n    fetchPostDetails()\n  }, [fetchPostDetails])\n\n  const handleUpdatePostField = async (\n    field: \"title\" | \"description\" | \"content_type\" | \"format_type\",\n    value: string,\n  ) => {\n    if (!post) return\n    const oldPost = { ...post }\n    setPost((prev) => (prev ? { ...prev, [field]: value } : null))\n\n    try {\n      const { error } = await supabase\n        .from(\"social_posts\")\n        .update({ [field]: value })\n        .eq(\"id\", post.id)\n      if (error) throw error\n      toast({ title: \"Post Updated\", description: `Post ${field} has been successfully updated.` })\n    } catch (error: any) {\n      toast({\n        title: \"Update Failed\",\n        description: `Failed to update post ${field}: ${error.message}`,\n        variant: \"destructive\",\n      })\n      setPost(oldPost)\n    }\n  }\n\n  const handlePropertyItemUpdate = (updatedPropertyItem: Partial<SocialPostProperty>) => {\n    setPost((prevPost) => {\n      if (!prevPost) return null\n      return {\n        ...prevPost,\n        social_post_properties: prevPost.social_post_properties.map((p) =>\n          p.id === updatedPropertyItem.id ? { ...p, ...updatedPropertyItem } : p,\n        ),\n      }\n    })\n  }\n\n  const getStatusBadgeVariant = (status?: string | null): \"default\" | \"secondary\" | \"outline\" | \"destructive\" => {\n    switch (status?.toLowerCase()) {\n      case \"posted\":\n        return \"default\"\n      case \"complete\":\n        return \"secondary\"\n      case \"draft\":\n        return \"outline\"\n      default:\n        return \"outline\"\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-950\">\n        <Loader2 className=\"h-10 w-10 animate-spin text-blueishGreen-500\" />\n      </div>\n    )\n  }\n\n  if (!post) {\n    return (\n      <div className=\"p-6 text-center min-h-screen flex flex-col items-center justify-center bg-gray-100 dark:bg-gray-950\">\n        <p className=\"text-xl text-muted-foreground mb-4\">Post Not Found</p>\n        <p className=\"text-sm text-muted-foreground mb-4\">\n          It might have been deleted or there was an issue loading it.\n        </p>\n        <Button variant=\"outline\" asChild className=\"bg-white dark:bg-gray-800\">\n          <Link href=\"/social\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Social Posts\n          </Link>\n        </Button>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"flex flex-col md:flex-row min-h-screen overflow-hidden bg-gray-100 dark:bg-gray-950\">\n      <main className=\"flex-1 p-4 md:p-6 space-y-4 overflow-y-auto\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            asChild\n            className=\"bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700\"\n          >\n            <Link href=\"/social\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back to Posts\n            </Link>\n          </Button>\n        </div>\n\n        <h2 className=\"text-sm font-medium uppercase text-gray-500 dark:text-gray-400 tracking-wider mb-3\">\n          Listings ({post.social_post_properties?.length || 0})\n        </h2>\n\n        {post.social_post_properties && post.social_post_properties.length > 0 ? (\n          <div className=\"space-y-3\">\n            {post.social_post_properties.map((spp) => (\n              <SocialPostPropertyItem key={spp.id} item={spp} postId={post.id} onUpdate={handlePropertyItemUpdate} />\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-12 border-2 border-dashed border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800/30\">\n            <ImageIcon className=\"mx-auto h-12 w-12 text-gray-300 dark:text-gray-600\" />\n            <p className=\"mt-2 text-sm text-muted-foreground\">No listings associated with this post.</p>\n            <p className=\"text-xs text-muted-foreground mt-1\">You can add listings from the main Social Posts page.</p>\n          </div>\n        )}\n      </main>\n\n      <aside className=\"w-full md:w-[360px] lg:w-[400px] bg-white dark:bg-gray-900 border-l border-gray-200 dark:border-gray-700 p-4 md:p-6 space-y-5 overflow-y-auto\">\n        <div className=\"pb-4 border-b border-gray-200 dark:border-gray-700\">\n          <label className=\"text-xs font-medium text-gray-500 dark:text-gray-400 block mb-0.5\">Post Title</label>\n          <EditableField\n            initialValue={post.title}\n            onSave={(newTitle) => handleUpdatePostField(\"title\", newTitle)}\n            label=\"Post Title\"\n            inputClassName=\"text-lg font-semibold !h-9\"\n            textClassName=\"text-lg font-semibold py-1\"\n            placeholder=\"Enter post title\"\n          />\n        </div>\n\n        <div className=\"pb-4 border-b border-gray-200 dark:border-gray-700\">\n          <label className=\"text-xs font-medium text-gray-500 dark:text-gray-400 block mb-0.5\">Description</label>\n          <EditableField\n            initialValue={post.description || \"\"}\n            onSave={(newDesc) => handleUpdatePostField(\"description\", newDesc)}\n            label=\"Post Description\"\n            as=\"textarea\"\n            inputClassName=\"min-h-[100px] text-sm\"\n            textClassName=\"py-1 leading-relaxed text-sm min-h-[40px]\" // min-h for text view\n            placeholder=\"Add a description...\"\n          />\n        </div>\n\n        <div className=\"pb-4 border-b border-gray-200 dark:border-gray-700\">\n          <label className=\"text-xs font-medium text-gray-500 dark:text-gray-400 block mb-0.5\">Content Type</label>\n          <EditableField\n            initialValue={post.content_type || \"\"}\n            onSave={(newContentType) => handleUpdatePostField(\"content_type\", newContentType)}\n            label=\"Content Type\"\n            as=\"select\"\n            inputClassName=\"!h-9\"\n            textClassName=\"py-1 text-sm\"\n            placeholder=\"Select content type\"\n          >\n            <SelectContent>\n              <SelectItem value=\"Single Property\">Single Property</SelectItem>\n              <SelectItem value=\"Multi Property\">Multi Property</SelectItem>\n            </SelectContent>\n          </EditableField>\n        </div>\n\n        <div className=\"pb-4 border-b border-gray-200 dark:border-gray-700\">\n          <label className=\"text-xs font-medium text-gray-500 dark:text-gray-400 block mb-0.5\">Format Type</label>\n          <EditableField\n            initialValue={post.format_type || \"\"}\n            onSave={(newFormatType) => handleUpdatePostField(\"format_type\", newFormatType)}\n            label=\"Format Type\"\n            as=\"select\"\n            inputClassName=\"!h-9\"\n            textClassName=\"py-1 text-sm\"\n            placeholder=\"Select format type\"\n          >\n            <SelectContent>\n              <SelectItem value=\"Carousel\">Carousel</SelectItem>\n              <SelectItem value=\"Post\">Post</SelectItem>\n              <SelectItem value=\"Reel\">Reel</SelectItem>\n              <SelectItem value=\"Story\">Story</SelectItem>\n            </SelectContent>\n          </EditableField>\n        </div>\n\n        <div className=\"space-y-3 text-sm pt-1\">\n          <div>\n            <p className=\"text-xs font-medium text-gray-500 dark:text-gray-400\">Status</p>\n            <Badge\n              variant={getStatusBadgeVariant(post.status)}\n              className={cn(\n                \"text-xs capitalize px-2.5 py-0.5\",\n                getStatusBadgeVariant(post.status) === \"default\" &&\n                  \"bg-blueishGreen-500 hover:bg-blueishGreen-600 text-blueishGreen-foreground\",\n              )}\n            >\n              {post.status || \"Unknown\"}\n            </Badge>\n          </div>\n          <div>\n            <p className=\"text-xs font-medium text-gray-500 dark:text-gray-400\">Created</p>\n            <p className=\"text-gray-700 dark:text-gray-300\">{new Date(post.created_at).toLocaleDateString()}</p>\n          </div>\n          {post.post_url && (\n            <div>\n              <p className=\"text-xs font-medium text-gray-500 dark:text-gray-400\">Post URL</p>\n              <a\n                href={post.post_url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-blueishGreen-600 hover:text-blueishGreen-500 hover:underline break-all dark:text-blueishGreen-400 dark:hover:text-blueishGreen-300\"\n              >\n                {post.post_url}\n              </a>\n            </div>\n          )}\n        </div>\n      </aside>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/social/loading.tsx\n```typescript\nimport { Loader2 } from \"lucide-react\"\n\nexport default function Loading() {\n  return (\n    <div className=\"flex h-full items-center justify-center\">\n      <Loader2 className=\"h-6 w-6 animate-spin text-gray-400\" />\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/social/page.tsx\n```typescript\n\"use client\"\n\nimport React from \"react\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { DataTable } from \"@/components/ui/data-table\"\nimport { DataTableColumnHeader } from \"@/components/ui/data-table-column-header\"\nimport {\n  PlusCircle,\n  ChevronDown,\n  ChevronRight,\n  Edit3,\n  Trash2,\n  Loader2,\n  AlertCircle,\n  ExternalLink,\n  MoreHorizontal,\n  PackagePlus,\n  CheckCircle2,\n  XCircle,\n  ListPlus,\n} from \"lucide-react\"\nimport Link from \"next/link\"\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\"\nimport type { Database } from \"@/types/supabase\"\nimport type { ColumnDef, Row } from \"@tanstack/react-table\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n\ntype ListingRow = Database[\"public\"][\"Tables\"][\"listings\"][\"Row\"]\ntype SocialPostRow = Database[\"public\"][\"Tables\"][\"social_posts\"][\"Row\"]\ntype SocialPostPropertyJunctionRow = Database[\"public\"][\"Tables\"][\"social_post_properties\"][\"Row\"]\n\ninterface EnrichedSocialPostPropertyForMainTable extends SocialPostPropertyJunctionRow {\n  properties: Partial<ListingRow> | null\n}\ninterface EnrichedSocialPost extends SocialPostRow {\n  social_post_properties: EnrichedSocialPostPropertyForMainTable[]\n  content_type: string | null\n  format_type: string | null\n}\n\ninterface AllLinkedPropertyItem extends SocialPostPropertyJunctionRow {\n  properties: Pick<\n    ListingRow,\n    | \"id\"\n    | \"mls_number\"\n    | \"street_number\"\n    | \"street_direction\"\n    | \"street_name\"\n    | \"unit_number\"\n    | \"city\"\n    | \"state\"\n    | \"zip_code\"\n  > | null\n  social_posts: Pick<SocialPostRow, \"id\" | \"title\"> | null\n}\n\nconst getFullAddress = (\n  property:\n    | Partial<ListingRow>\n    | Pick<\n        ListingRow,\n        | \"id\"\n        | \"mls_number\"\n        | \"street_number\"\n        | \"street_direction\"\n        | \"street_name\"\n        | \"unit_number\"\n        | \"city\"\n        | \"state\"\n        | \"zip_code\"\n      >\n    | null,\n): string => {\n  if (!property) return \"N/A\"\n  return (\n    `${property.street_number || \"\"} ${property.street_direction || \"\"} ${property.street_name || \"\"}${property.unit_number ? ` #${property.unit_number}` : \"\"}, ${property.city || \"\"}, ${property.state || \"\"} ${\n      property.zip_code || \"\"\n    }`\n      .replace(/\\s,/g, \",\")\n      .replace(/, $/, \"\")\n      .replace(/^,/, \"\")\n      .trim() || \"Address not available\"\n  )\n}\n\nconst formatCurrency = (amount: number | null | undefined) => {\n  if (amount == null) return \"N/A\"\n  return new Intl.NumberFormat(\"en-US\", { style: \"currency\", currency: \"USD\", minimumFractionDigits: 0 }).format(amount)\n}\n\nexport default function SocialPostsPage() {\n  const { user } = useAuth()\n  const { toast } = useToast()\n  const [socialPosts, setSocialPosts] = React.useState<EnrichedSocialPost[]>([])\n  const [allLinkedProperties, setAllLinkedProperties] = React.useState<AllLinkedPropertyItem[]>([])\n  const [propertiesAvailableForQueue, setPropertiesAvailableForQueue] = React.useState<ListingRow[]>([])\n\n  const [isLoadingPosts, setIsLoadingPosts] = React.useState(true)\n  const [isLoadingLinkedItems, setIsLoadingLinkedItems] = React.useState(true)\n  const [isLoadingAvailableProps, setIsLoadingAvailableProps] = React.useState(true)\n  const [error, setError] = React.useState<string | null>(null)\n\n  const [isCreatePostDialogOpen, setIsCreatePostDialogOpen] = React.useState(false)\n  const [newPostName, setNewPostName] = React.useState(\"\")\n  const [newPostContentType, setNewPostContentType] = React.useState<string | undefined>(undefined)\n  const [newPostFormatType, setNewPostFormatType] = React.useState<string | undefined>(undefined)\n  const [selectedPropertiesForDialog, setSelectedPropertiesForDialog] = React.useState<string[]>([])\n  const [isCreatingPost, setIsCreatingPost] = React.useState(false)\n\n  const fetchData = React.useCallback(async () => {\n    if (!user) return\n    setIsLoadingPosts(true)\n    setIsLoadingLinkedItems(true)\n    setIsLoadingAvailableProps(true)\n    setError(null)\n\n    try {\n      // 1. Fetch Social Posts (for main table)\n      const { data: postsData, error: postsError } = await supabase\n        .from(\"social_posts\")\n        .select(\n          `*, social_post_properties (*, properties (id, mls_number, street_number, street_direction, street_name, unit_number, city, state, zip_code, list_price, status))`,\n        )\n        .eq(\"user_id\", user.id)\n        .order(\"created_at\", { ascending: false })\n      if (postsError) throw postsError\n      setSocialPosts((postsData as EnrichedSocialPost[]) || [])\n      setIsLoadingPosts(false)\n\n      // 2. Fetch All Linked Property Items (for second table)\n      const { data: linkedItemsData, error: linkedItemsError } = await supabase\n        .from(\"social_post_properties\")\n        .select(\n          `*, properties (id, mls_number, street_number, street_direction, street_name, unit_number, city, state, zip_code), social_posts (id, title)`,\n        )\n        .eq(\"social_posts.user_id\", user.id)\n        .order(\"created_at\", { ascending: false })\n      if (linkedItemsError) throw linkedItemsError\n      setAllLinkedProperties((linkedItemsData as AllLinkedPropertyItem[]) || [])\n      setIsLoadingLinkedItems(false)\n\n      // 3. Fetch Properties Available for Queue/New Post\n      // This assumes NO `in_social_queue` field on properties table.\n      // We find properties NOT in social_post_properties for this user.\n      const { data: allUserProperties, error: allPropsError } = await supabase.from(\"listings\").select(\"id\")\n      // Add .eq('user_id', user.id) if properties are user-specific\n      if (allPropsError) throw allPropsError\n\n      const propertyIdsInUserPosts = new Set(\n        (linkedItemsData?.map((item) => item.property_id).filter(Boolean) as string[]) || [],\n      )\n\n      const { data: allPropertiesFullData, error: allPropertiesFullDataError } = await supabase\n        .from(\"listings\")\n        .select(\"*\")\n        // Add .eq('user_id', user.id) if properties are user-specific\n        .order(\"created_at\", { ascending: false })\n\n      if (allPropertiesFullDataError) throw allPropertiesFullDataError\n\n      const availableProperties = allPropertiesFullData?.filter((p) => !propertyIdsInUserPosts.has(p.id)) || []\n      setPropertiesAvailableForQueue(availableProperties)\n      setIsLoadingAvailableProps(false)\n    } catch (err: any) {\n      console.error(\"Error fetching social page data:\", err)\n      setError(err.message || \"Failed to fetch data.\")\n      toast({ title: \"Error\", description: \"Could not fetch all social page data.\", variant: \"destructive\" })\n      setIsLoadingPosts(false)\n      setIsLoadingLinkedItems(false)\n      setIsLoadingAvailableProps(false)\n    }\n  }, [user, toast])\n\n  React.useEffect(() => {\n    fetchData()\n  }, [fetchData])\n\n  // ... (handleCreatePostAction, calculateProgress, handlePropertySelectionInDialog, handleDeletePost remain largely the same)\n  const handleCreatePostAction = async () => {\n    if (!user) {\n      toast({ title: \"Error\", description: \"You must be logged in.\", variant: \"destructive\" })\n      return\n    }\n    if (!newPostName.trim()) {\n      toast({ title: \"Error\", description: \"Post name cannot be empty.\", variant: \"destructive\" })\n      return\n    }\n    if (selectedPropertiesForDialog.length === 0) {\n      toast({ title: \"Error\", description: \"Please select at least one listing.\", variant: \"destructive\" })\n      return\n    }\n\n    setIsCreatingPost(true)\n\n    const { data: newPost, error: postError } = await supabase\n      .from(\"social_posts\")\n      .insert({\n        user_id: user.id,\n        title: newPostName,\n        status: \"draft\",\n        content_type: newPostContentType,\n        format_type: newPostFormatType,\n      })\n      .select()\n      .single()\n\n    if (postError || !newPost) {\n      setIsCreatingPost(false)\n      toast({\n        title: \"Error Creating Post\",\n        description: postError?.message || \"Failed to create post.\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    const postPropertiesToInsert = selectedPropertiesForDialog.map((propertyId) => ({\n      social_post_id: newPost.id,\n      property_id: propertyId,\n      image_complete: false,\n      description_complete: false,\n      contacted_complete: false,\n    }))\n\n    const { error: propertiesError } = await supabase.from(\"social_post_properties\").insert(postPropertiesToInsert)\n\n    if (propertiesError) {\n      setIsCreatingPost(false)\n      // Attempt to delete the post if linking properties failed\n      await supabase.from(\"social_posts\").delete().eq(\"id\", newPost.id)\n      toast({\n        title: \"Error Linking Properties\",\n        description: propertiesError.message || \"Failed to link properties. Post creation rolled back.\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    // If you were using an `in_social_queue` flag, you'd update it here.\n    // Since you said it's not present, linking to social_post_properties effectively \"queues\" it.\n\n    toast({ title: \"Success\", description: `Social post \"${newPostName}\" created.` })\n    setIsCreatingPost(false)\n    setIsCreatePostDialogOpen(false)\n    setNewPostName(\"\")\n    setSelectedPropertiesForDialog([])\n    setNewPostContentType(undefined) // Add this\n    setNewPostFormatType(undefined) // Add this\n    fetchData() // Refresh all data\n  }\n\n  const calculateProgress = (post: EnrichedSocialPost) => {\n    if (!post.social_post_properties || post.social_post_properties.length === 0) return 0\n    let totalCompletedTasks = 0\n    const totalPossibleTasks = post.social_post_properties.length * 3\n    post.social_post_properties.forEach((spp) => {\n      if (spp.image_complete) totalCompletedTasks++\n      if (spp.description_complete) totalCompletedTasks++\n      if (spp.contacted_complete) totalCompletedTasks++\n    })\n    return totalPossibleTasks > 0 ? (totalCompletedTasks / totalPossibleTasks) * 100 : 0\n  }\n\n  const handlePropertySelectionInDialog = (propertyId: string) => {\n    setSelectedPropertiesForDialog((prev) =>\n      prev.includes(propertyId) ? prev.filter((id) => id !== propertyId) : [...prev, propertyId],\n    )\n  }\n\n  const handleDeletePost = async (postId: string, postTitle: string) => {\n    if (\n      !confirm(\n        `Are you sure you want to delete the post \"${postTitle}\"? This will also remove its linked properties from this post.`,\n      )\n    )\n      return\n    try {\n      // No need to update `in_social_queue` if it doesn't exist.\n      // Deleting from social_post_properties makes them available again by our new logic.\n      await supabase.from(\"social_post_properties\").delete().eq(\"social_post_id\", postId)\n      await supabase.from(\"social_posts\").delete().eq(\"id\", postId)\n\n      toast({ title: \"Success\", description: `Post \"${postTitle}\" and its property links deleted.` })\n      fetchData() // Refresh all data\n    } catch (err: any) {\n      toast({ title: \"Error\", description: `Failed to delete post: ${err.message}`, variant: \"destructive\" })\n    }\n  }\n\n  // Columns for Main Social Posts Table (remains the same)\n  const socialPostColumns = React.useMemo<ColumnDef<EnrichedSocialPost>[]>(\n    () => [\n      {\n        id: \"expander\",\n        header: () => null,\n        cell: ({ row }) =>\n          row.getCanExpand() ? (\n            <Button variant=\"ghost\" size=\"sm\" onClick={row.getToggleExpandedHandler()} className=\"p-1 h-auto\">\n              {row.getIsExpanded() ? <ChevronDown size={18} /> : <ChevronRight size={18} />}\n            </Button>\n          ) : null,\n        enableSorting: false,\n        enableHiding: false,\n      },\n      {\n        accessorKey: \"title\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Post Name\" />,\n        cell: ({ row }) => (\n          <Link href={`/social/${row.original.id}`} className=\"font-medium text-primary hover:underline\">\n            {row.original.title}\n          </Link>\n        ),\n      },\n      {\n        accessorKey: \"status\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Status\" />,\n        cell: ({ row }) => (\n          <Badge variant={row.original.status === \"published\" ? \"default\" : \"outline\"}>{row.original.status}</Badge>\n        ),\n      },\n      {\n        id: \"propertiesCount\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Listings\" />,\n        cell: ({ row }) => row.original.social_post_properties?.length || 0,\n      },\n      {\n        id: \"progress\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Progress\" />,\n        cell: ({ row }) => {\n          const progress = calculateProgress(row.original)\n          return (\n            <div className=\"flex items-center\">\n              <Progress value={progress} className=\"w-24 h-2 mr-2\" />\n              <span className=\"text-xs\">{Math.round(progress)}%</span>\n            </div>\n          )\n        },\n      },\n      {\n        accessorKey: \"content_type\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Content Type\" />,\n        cell: ({ row }) => row.original.content_type || \"N/A\",\n        filterFn: (row, id, value) => {\n          return value.includes(row.getValue(id))\n        },\n      },\n      {\n        accessorKey: \"format_type\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Format Type\" />,\n        cell: ({ row }) => row.original.format_type || \"N/A\",\n        filterFn: (row, id, value) => {\n          return value.includes(row.getValue(id))\n        },\n      },\n      {\n        accessorKey: \"created_at\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Created At\" />,\n        cell: ({ row }) => new Date(row.original.created_at).toLocaleDateString(),\n      },\n      {\n        id: \"actions\",\n        cell: ({ row }) => (\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"h-7 w-7 p-0\">\n                <span className=\"sr-only\">Open menu</span>\n                <MoreHorizontal className=\"h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-[160px]\">\n              <DropdownMenuLabel className=\"text-xs\">Actions</DropdownMenuLabel>\n              <DropdownMenuItem className=\"text-xs\" asChild>\n                <Link href={`/social/${row.original.id}`}>\n                  <Edit3 className=\"mr-2 h-3.5 w-3.5\" />\n                  View/Edit Details\n                </Link>\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem\n                className=\"text-xs text-red-600 focus:text-red-600 focus:bg-red-50\"\n                onClick={() => handleDeletePost(row.original.id, row.original.title || \"Untitled Post\")}\n              >\n                <Trash2 className=\"mr-2 h-3.5 w-3.5\" />\n                Delete Post\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        ),\n      },\n    ],\n    [fetchData],\n  )\n\n  // Sub-component for main social posts table (remains the same)\n  const renderSocialPostSubComponent = ({ row }: { row: Row<EnrichedSocialPost> }) => {\n    const postProperties = row.original.social_post_properties\n    if (!postProperties || postProperties.length === 0) {\n      return <div className=\"p-4 text-sm text-muted-foreground bg-muted/30\">No listings linked to this post.</div>\n    }\n    return (\n      <div className=\"p-2 pl-10 bg-muted/30\">\n        <h4 className=\"text-xs font-semibold mb-1 text-muted-foreground\">Linked Listings:</h4>\n        <ul className=\"space-y-1\">\n          {postProperties.map((spp) => (\n            <li\n              key={spp.property_id}\n              className=\"text-xs flex items-center justify-between p-1 rounded hover:bg-background\"\n            >\n              <span>{getFullAddress(spp.properties)}</span>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox id={`img-${spp.id}`} checked={spp.image_complete ?? false} disabled className=\"h-3 w-3\" />\n                <Checkbox\n                  id={`desc-${spp.id}`}\n                  checked={spp.description_complete ?? false}\n                  disabled\n                  className=\"h-3 w-3\"\n                />\n                <Checkbox\n                  id={`contact-${spp.id}`}\n                  checked={spp.contacted_complete ?? false}\n                  disabled\n                  className=\"h-3 w-3\"\n                />\n                {spp.properties && spp.properties.id && (\n                  <Link href={`/properties/${spp.properties.id}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <ExternalLink className=\"h-3 w-3 text-muted-foreground hover:text-primary\" />\n                  </Link>\n                )}\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    )\n  }\n\n  // Columns for \"All Linked Properties\" Table (remains the same)\n  const linkedPropertyItemsColumns = React.useMemo<ColumnDef<AllLinkedPropertyItem>[]>(\n    () => [\n      {\n        id: \"propertyAddress\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Property Address\" />,\n        cell: ({ row }) => (\n          <Link href={`/properties/${row.original.properties?.id}`} className=\"hover:underline text-primary\">\n            {getFullAddress(row.original.properties)}\n          </Link>\n        ),\n        accessorFn: (row) => getFullAddress(row.properties),\n      },\n      {\n        id: \"socialPostTitle\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Social Post\" />,\n        cell: ({ row }) => (\n          <Link href={`/social/${row.original.social_posts?.id}`} className=\"hover:underline\">\n            {row.original.social_posts?.title || \"N/A\"}\n          </Link>\n        ),\n        accessorFn: (row) => row.social_posts?.title,\n      },\n      {\n        accessorKey: \"image_complete\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Image\" />,\n        cell: ({ row }) =>\n          row.original.image_complete ? (\n            <CheckCircle2 className=\"h-4 w-4 text-green-500\" />\n          ) : (\n            <XCircle className=\"h-4 w-4 text-muted-foreground\" />\n          ),\n      },\n      {\n        accessorKey: \"description_complete\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Description\" />,\n        cell: ({ row }) =>\n          row.original.description_complete ? (\n            <CheckCircle2 className=\"h-4 w-4 text-green-500\" />\n          ) : (\n            <XCircle className=\"h-4 w-4 text-muted-foreground\" />\n          ),\n      },\n      {\n        accessorKey: \"contacted_complete\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Contacted\" />,\n        cell: ({ row }) =>\n          row.original.contacted_complete ? (\n            <CheckCircle2 className=\"h-4 w-4 text-green-500\" />\n          ) : (\n            <XCircle className=\"h-4 w-4 text-muted-foreground\" />\n          ),\n      },\n      {\n        accessorKey: \"created_at\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Date Linked\" />,\n        cell: ({ row }) => new Date(row.original.created_at).toLocaleDateString(),\n      },\n    ],\n    [],\n  )\n\n  // Columns for \"Properties Available for Social Queue\" Table (NEW/REVISED)\n  const availablePropertiesColumns = React.useMemo<ColumnDef<ListingRow>[]>(\n    () => [\n      {\n        id: \"select\",\n        header: ({ table }) => (\n          <Checkbox\n            checked={\n              table.getIsAllPageRowsSelected() ||\n              (selectedPropertiesForDialog.length > 0 &&\n                propertiesAvailableForQueue.every((p) => selectedPropertiesForDialog.includes(p.id)))\n            }\n            onCheckedChange={(value) => {\n              const allCurrentPageIds = table.getFilteredRowModel().rows.map((row) => row.original.id)\n              if (!!value) {\n                setSelectedPropertiesForDialog((prev) => Array.from(new Set([...prev, ...allCurrentPageIds])))\n              } else {\n                setSelectedPropertiesForDialog((prev) => prev.filter((id) => !allCurrentPageIds.includes(id)))\n              }\n              table.toggleAllPageRowsSelected(!!value)\n            }}\n            aria-label=\"Select all on current page\"\n          />\n        ),\n        cell: ({ row }) => (\n          <Checkbox\n            checked={selectedPropertiesForDialog.includes(row.original.id)}\n            onCheckedChange={() => handlePropertySelectionInDialog(row.original.id)}\n            aria-label=\"Select row\"\n          />\n        ),\n        enableSorting: false,\n        enableHiding: false,\n      },\n      {\n        accessorKey: \"mls_number\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"MLS#\" />,\n      },\n      {\n        id: \"address\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Address\" />,\n        cell: ({ row }) => getFullAddress(row.original),\n        accessorFn: (row) => getFullAddress(row),\n      },\n      {\n        accessorKey: \"status\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Status\" />,\n        cell: ({ row }) => <Badge variant=\"outline\">{row.original.status}</Badge>,\n      },\n      {\n        accessorKey: \"list_price\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"List Price\" />,\n        cell: ({ row }) => formatCurrency(row.original.list_price),\n      },\n    ],\n    [selectedPropertiesForDialog, propertiesAvailableForQueue], // Ensure re-render on selection change\n  )\n\n  if (error && !isLoadingPosts && !isLoadingLinkedItems && !isLoadingAvailableProps) {\n    return (\n      <Alert variant=\"destructive\">\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertTitle>Error</AlertTitle>\n        <AlertDescription>{error} Please try refreshing the page.</AlertDescription>\n      </Alert>\n    )\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Section 1: Social Media Posts Table */}\n      <section>\n        <div className=\"flex justify-between items-center mb-4\">\n          <h1 className=\"text-2xl font-semibold\">Social Media Posts</h1>\n          {/* \"Create Post\" Dialog Trigger - now uses propertiesAvailableForQueue */}\n          <Dialog open={isCreatePostDialogOpen} onOpenChange={setIsCreatePostDialogOpen}>\n            <DialogTrigger asChild>\n              <Button\n                onClick={() => {\n                  /* setSelectedPropertiesForDialog([]); // Clear previous selections if opening fresh */\n                  setIsCreatePostDialogOpen(true)\n                }}\n              >\n                <PlusCircle className=\"mr-2 h-4 w-4\" /> Create New Post\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[600px]\">\n              <DialogHeader>\n                <DialogTitle>Create New Social Post</DialogTitle>\n                <DialogDescription>\n                  Name your post and select listings from the list of available listings below.\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"grid gap-4 py-4\">\n                <div className=\"grid grid-cols-4 items-center gap-4\">\n                  <Label htmlFor=\"post-name-input\" className=\"text-right\">\n                    Post Name\n                  </Label>\n                  <Input\n                    id=\"post-name-input\"\n                    value={newPostName}\n                    onChange={(e) => setNewPostName(e.target.value)}\n                    className=\"col-span-3\"\n                    placeholder=\"e.g., Spring Listings Showcase\"\n                  />\n                </div>\n                <div className=\"grid grid-cols-4 items-center gap-4\">\n                  <Label htmlFor=\"post-content-type\" className=\"text-right\">\n                    Content Type\n                  </Label>\n                  <Select value={newPostContentType} onValueChange={setNewPostContentType}>\n                    <SelectTrigger id=\"post-content-type\" className=\"col-span-3\">\n                      <SelectValue placeholder=\"Select content type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Single Property\">Single Property</SelectItem>\n                      <SelectItem value=\"Multi Property\">Multi Property</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"grid grid-cols-4 items-center gap-4\">\n                  <Label htmlFor=\"post-format-type\" className=\"text-right\">\n                    Format Type\n                  </Label>\n                  <Select value={newPostFormatType} onValueChange={setNewPostFormatType}>\n                    <SelectTrigger id=\"post-format-type\" className=\"col-span-3\">\n                      <SelectValue placeholder=\"Select format type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Carousel\">Carousel</SelectItem>\n                      <SelectItem value=\"Post\">Post</SelectItem>\n                      <SelectItem value=\"Reel\">Reel</SelectItem>\n                      <SelectItem value=\"Story\">Story</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Available Listings ({propertiesAvailableForQueue.length} not in any of your posts)</Label>\n                  {isLoadingAvailableProps ? (\n                    <Loader2 className=\"h-5 w-5 animate-spin text-muted-foreground mx-auto my-4\" />\n                  ) : propertiesAvailableForQueue.length === 0 ? (\n                    <p className=\"text-sm text-muted-foreground p-4 border rounded-md text-center\">\n                      No listings available to add to a new post.\n                    </p>\n                  ) : (\n                    <div className=\"max-h-60 overflow-y-auto border rounded-md p-2 space-y-1\">\n                      {propertiesAvailableForQueue.map((prop) => (\n                        <div\n                          key={prop.id}\n                          className=\"flex items-center justify-between p-2 rounded hover:bg-muted/50 cursor-pointer\"\n                          onClick={() => handlePropertySelectionInDialog(prop.id)}\n                        >\n                          <div className=\"flex items-center space-x-2\">\n                            <Checkbox\n                              checked={selectedPropertiesForDialog.includes(prop.id)}\n                              onCheckedChange={() => handlePropertySelectionInDialog(prop.id)}\n                              id={`dialog-prop-select-${prop.id}`}\n                              aria-labelledby={`dialog-prop-label-${prop.id}`}\n                            />\n                            <Label\n                              htmlFor={`dialog-prop-select-${prop.id}`}\n                              id={`dialog-prop-label-${prop.id}`}\n                              className=\"text-sm font-normal cursor-pointer\"\n                            >\n                              {getFullAddress(prop)}\n                            </Label>\n                          </div>\n                          <span className=\"text-xs text-muted-foreground\">{prop.mls_number}</span>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n                {selectedPropertiesForDialog.length > 0 && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    {selectedPropertiesForDialog.length} listing{selectedPropertiesForDialog.length === 1 ? \"\" : \"s\"}{\" \"}\n                    selected.\n                  </p>\n                )}\n              </div>\n              <DialogFooter>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setIsCreatePostDialogOpen(false) /* setSelectedPropertiesForDialog([]); */\n                  }}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleCreatePostAction}\n                  disabled={\n                    isCreatingPost ||\n                    !newPostName.trim() ||\n                    selectedPropertiesForDialog.length === 0 ||\n                    !newPostContentType ||\n                    !newPostFormatType\n                  }\n                >\n                  {isCreatingPost ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : \"Create Post\"}\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        </div>\n        <DataTable\n          columns={socialPostColumns}\n          data={socialPosts}\n          loading={isLoadingPosts}\n          renderSubComponent={renderSocialPostSubComponent}\n          searchColumn=\"title\"\n        />\n        {socialPosts.length === 0 && !isLoadingPosts && !error && (\n          <div className=\"text-center py-10 border-2 border-dashed rounded-lg\">\n            <PackagePlus className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n            <h3 className=\"mt-2 text-lg font-medium text-muted-foreground\">No Social Posts Yet</h3>\n            <p className=\"text-sm text-muted-foreground mt-1\">Click \"Create Post\" to get started.</p>\n          </div>\n        )}\n      </section>\n\n      {/* Section 2: All Properties Currently Linked in User's Social Posts */}\n      <section className=\"mt-12\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h2 className=\"text-xl font-semibold\">All Listings Currently Linked in Your Social Posts</h2>\n        </div>\n        <DataTable\n          columns={linkedPropertyItemsColumns}\n          data={allLinkedProperties}\n          loading={isLoadingLinkedItems}\n          searchColumn=\"propertyAddress\"\n        />\n        {allLinkedProperties.length === 0 && !isLoadingLinkedItems && !error && (\n          <div className=\"text-center py-10 border-2 border-dashed rounded-lg\">\n            <ListPlus className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n            <h3 className=\"mt-2 text-lg font-medium text-muted-foreground\">No Properties Linked to Your Posts</h3>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              Create posts and link properties; they will appear here.\n            </p>\n          </div>\n        )}\n      </section>\n\n      {/* Section 3: Properties Available for Social Queue (NEW/REVISED) */}\n      <section className=\"mt-12\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h2 className=\"text-xl font-semibold\">Listings Available for Social Posts</h2>\n          {selectedPropertiesForDialog.length > 0 && (\n            <Button onClick={() => setIsCreatePostDialogOpen(true)}>\n              <PlusCircle className=\"mr-2 h-4 w-4\" /> Create Post with {selectedPropertiesForDialog.length} Selected\n            </Button>\n          )}\n        </div>\n        <DataTable\n          columns={availablePropertiesColumns}\n          data={propertiesAvailableForQueue}\n          loading={isLoadingAvailableProps}\n          searchColumn=\"address\" // Search by address\n        />\n        {propertiesAvailableForQueue.length === 0 && !isLoadingAvailableProps && !error && (\n          <div className=\"text-center py-10 border-2 border-dashed rounded-lg\">\n            <ListPlus className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n            <h3 className=\"mt-2 text-lg font-medium text-muted-foreground\">No Listings Available for New Posts</h3>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              All properties might be in existing posts, or no properties are available.\n            </p>\n          </div>\n        )}\n      </section>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/layout.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\nimport { useState, useEffect, useCallback } from \"react\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { Sidebar } from \"@/components/layout/sidebar\"\nimport { Header } from \"@/components/layout/header\"\nimport { redirect, usePathname } from \"next/navigation\"\nimport { Loader2 } from \"lucide-react\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { hexToHsl } from \"@/lib/color-utils\"\n\n// Default HSL values from globals.css (light mode)\nconst DEFAULT_PRIMARY_HSL = \"240 5.9% 10%\"\nconst DEFAULT_PRIMARY_FOREGROUND_HSL = \"0 0% 98%\"\n\nexport default function DashboardLayout({ children }: { children: React.ReactNode }) {\n  const { user, loading: authLoading, session } = useAuth()\n  const [themeLoading, setThemeLoading] = useState(true)\n  const pathname = usePathname()\n\n  const applyThemeToDocument = useCallback((primaryHsl: string, foregroundHsl: string) => {\n    if (typeof document !== \"undefined\") {\n      document.documentElement.style.setProperty(\"--primary\", primaryHsl)\n      document.documentElement.style.setProperty(\"--primary-foreground\", foregroundHsl)\n    }\n  }, [])\n\n  useEffect(() => {\n    const fetchAndApplyTheme = async () => {\n      if (authLoading) {\n        setThemeLoading(true)\n        return\n      }\n\n      setThemeLoading(true)\n\n      if (user && session) {\n        try {\n          const { data, error } = await supabase\n            .from(\"user_settings\")\n            .select(\"primary_color_hex, primary_foreground_color_hex\")\n            .eq(\"user_id\", user.id)\n            .single()\n\n          if (error && error.code !== \"PGRST116\") {\n            console.error(\"Error fetching theme settings:\", error)\n            applyThemeToDocument(DEFAULT_PRIMARY_HSL, DEFAULT_PRIMARY_FOREGROUND_HSL)\n          } else if (data) {\n            const primaryHsl = data.primary_color_hex ? hexToHsl(data.primary_color_hex) : null\n            const foregroundHsl = data.primary_foreground_color_hex ? hexToHsl(data.primary_foreground_color_hex) : null\n\n            applyThemeToDocument(primaryHsl || DEFAULT_PRIMARY_HSL, foregroundHsl || DEFAULT_PRIMARY_FOREGROUND_HSL)\n          } else {\n            applyThemeToDocument(DEFAULT_PRIMARY_HSL, DEFAULT_PRIMARY_FOREGROUND_HSL)\n          }\n        } catch (e) {\n          console.error(\"Exception during theme settings fetch:\", e)\n          applyThemeToDocument(DEFAULT_PRIMARY_HSL, DEFAULT_PRIMARY_FOREGROUND_HSL)\n        } finally {\n          setThemeLoading(false)\n        }\n      } else {\n        applyThemeToDocument(DEFAULT_PRIMARY_HSL, DEFAULT_PRIMARY_FOREGROUND_HSL)\n        setThemeLoading(false)\n      }\n    }\n\n    fetchAndApplyTheme()\n  }, [user, session, authLoading, applyThemeToDocument, pathname])\n\n  if (authLoading || themeLoading) {\n    return (\n      <div className=\"flex h-screen items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        <p className=\"ml-2 text-sm text-muted-foreground\">Initializing...</p>\n      </div>\n    )\n  }\n\n  if (!user && !session && (pathname.startsWith(\"/dashboard\") || pathname === \"/\")) {\n    redirect(\"/login\")\n    return null\n  }\n\n  if (!user && (pathname === \"/login\" || pathname === \"/register\")) {\n    return <>{children}</>\n  }\n\n  if (user && (pathname === \"/login\" || pathname === \"/register\")) {\n    redirect(\"/dashboard\")\n    return null\n  }\n\n  if (!user && !pathname.startsWith(\"/login\") && !pathname.startsWith(\"/register\")) {\n    redirect(\"/login\")\n    return null\n  }\n\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar />\n      <div className=\"flex flex-1 flex-col\">\n        <Header />\n        <main className=\"flex-1 overflow-auto bg-gray-50/30 p-4\">{children}</main>\n      </div>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/actions/ai-actions.ts\n```typescript\n\"use server\"\n\nimport { createServerClient } from \"@/lib/supabase/server\"\nimport { openai } from \"@ai-sdk/openai\" // Use Vercel AI SDK\nimport { generateText, type CoreMessage } from \"ai\" // Use Vercel AI SDK\n\nexport async function generateDescriptionWithAI(\n  actionType: \"rewrite\" | \"prompt\",\n  text: string, // For \"rewrite\", this is the text to rewrite. For \"prompt\", this is the custom prompt.\n  contextText?: string, // For \"prompt\", this is the existing description to provide as context.\n): Promise<{ generatedText: string | null; error: string | null }> {\n  console.log(\n    `AI Action: Started - Type: ${actionType}, Text Length: ${text.length}, Context Length: ${contextText?.length || 0}`,\n  )\n\n  const supabase = await createServerClient() // Correctly instantiate server client\n  const {\n    data: { user },\n    error: userError,\n  } = await supabase.auth.getUser()\n\n  if (userError || !user) {\n    console.error(\"AI Action: User not authenticated.\", userError)\n    return { generatedText: null, error: \"User not authenticated. Please log in.\" }\n  }\n  console.log(\"AI Action: User authenticated:\", user.id)\n\n  const { data: userSettings, error: settingsError } = await supabase\n    .from(\"user_settings\") // Corrected table name from previous iterations\n    .select(\"openai_api_key, openai_model\")\n    .eq(\"user_id\", user.id)\n    .single()\n\n  if (settingsError) {\n    console.error(\"AI Action: Error fetching user settings.\", settingsError)\n    if (settingsError.code === \"PGRST116\") {\n      // No row found\n      return {\n        generatedText: null,\n        error: \"AI settings not found. Please configure your OpenAI API key and model in the Integrations settings.\",\n      }\n    }\n    return { generatedText: null, error: `Could not load AI settings: ${settingsError.message}` }\n  }\n\n  if (!userSettings) {\n    // Should be caught by PGRST116, but as a safeguard\n    console.error(\"AI Action: User settings are unexpectedly null after query.\")\n    return {\n      generatedText: null,\n      error: \"AI settings not found. Please configure your OpenAI API key and model in the Integrations settings.\",\n    }\n  }\n\n  console.log(\n    \"AI Action: User settings fetched. Has API Key:\",\n    !!userSettings.openai_api_key,\n    \"Model:\",\n    userSettings.openai_model,\n  )\n\n  if (!userSettings.openai_api_key) {\n    console.warn(\"AI Action: OpenAI API key not configured for user:\", user.id)\n    return { generatedText: null, error: \"OpenAI API key not configured. Please add it in the Integrations settings.\" }\n  }\n\n  const openAIModel = userSettings.openai_model || \"gpt-3.5-turbo\" // Default model if not set\n\n  try {\n    let systemPromptMessage = \"\"\n    const messages: CoreMessage[] = []\n\n    if (actionType === \"rewrite\") {\n      systemPromptMessage =\n        \"You are an expert real estate copywriter. Rewrite the following property description to be more engaging, concise, or as instructed by the user. Retain key details and the original intent unless specified otherwise. Focus on clarity and appeal for potential buyers or renters.\"\n      messages.push({ role: \"user\", content: `Rewrite this listing description: \"${text}\"` })\n    } else if (actionType === \"prompt\") {\n      systemPromptMessage =\n        \"You are an expert real estate copywriter. Generate a property description based on the user's prompt. If context (current description) is provided, use it to inform your response, either by enhancing, replacing, or building upon it as per the user's prompt. Aim for compelling and accurate real estate copy.\"\n      let userPromptContent = `User Prompt: \"${text}\"`\n      if (contextText && contextText.trim() !== \"\") {\n        userPromptContent += `\\n\\nFor context, here is the current description (you can choose to ignore, enhance, or replace it based on my prompt): \"${contextText}\"`\n      }\n      messages.push({ role: \"user\", content: userPromptContent })\n    }\n\n    console.log(\n      `AI Action: Calling OpenAI. Model: ${openAIModel}. System Prompt: ${systemPromptMessage.substring(0, 100)}... Messages:`,\n      messages.map((m) => ({ role: m.role, content: (m.content as string)?.substring(0, 100) + \"...\" })),\n    )\n\n    const {\n      text: resultText,\n      finishReason,\n      usage,\n    } = await generateText({\n      model: openai(openAIModel, { apiKey: userSettings.openai_api_key }), // Pass API key here\n      system: systemPromptMessage,\n      messages: messages,\n      // temperature: 0.7, // Optional: Adjust creativity\n    })\n\n    console.log(\n      \"AI Action: OpenAI response received. Finish Reason:\",\n      finishReason,\n      \"Usage:\",\n      usage,\n      \"Generated Text Length:\",\n      resultText?.length,\n    )\n\n    if (!resultText && finishReason !== \"stop\" && finishReason !== \"length\") {\n      console.error(\"AI Action: OpenAI generation failed or returned empty text. Finish Reason:\", finishReason)\n      return { generatedText: null, error: `AI generation failed. Reason: ${finishReason || \"unknown\"}` }\n    }\n\n    console.log(\"AI Action: Successfully generated text.\")\n    return { generatedText: resultText || \"\", error: null } // Ensure generatedText is at least an empty string if null\n  } catch (error: any) {\n    console.error(\"AI Action: OpenAI API call error.\", error)\n    let errorMessage = \"An error occurred while generating text with AI.\"\n    if (error.message) {\n      errorMessage = error.message\n    }\n    // Specific error checks for OpenAI\n    if (error.status === 401) errorMessage = \"Invalid OpenAI API key. Please check your key in settings.\"\n    if (error.status === 429)\n      errorMessage = \"OpenAI API rate limit exceeded or quota finished. Please check your OpenAI account.\"\n    if (error.name === \"AbortError\") errorMessage = \"The AI request timed out.\"\n\n    return { generatedText: null, error: errorMessage }\n  }\n}\n```\n\n## File: dkl-microapp-2-main/app/globals.css\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 222.2 84% 4.9%;\n    --radius: 0.3rem;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground text-xs;\n    font-family: var(--font-inter);\n  }\n}\n\n/* Dense Attio-like styles */\n.dense-table {\n  font-size: 11px;\n  line-height: 1.25;\n}\n\n.dense-table th {\n  padding: 0.375rem 0.5rem;\n  font-weight: 500;\n}\n\n.dense-table td {\n  padding: 0.25rem 0.5rem;\n}\n\n.compact-card {\n  padding: 0.75rem;\n}\n\n.compact-input {\n  height: 1.75rem;\n  font-size: 0.75rem;\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n\n.compact-button {\n  height: 1.75rem;\n  font-size: 0.75rem;\n  padding-left: 0.75rem;\n  padding-right: 0.75rem;\n}\n\n.compact-select {\n  height: 1.75rem;\n  font-size: 0.75rem;\n}\n\n/* Scrollbar styling */\n::-webkit-scrollbar {\n  width: 0.5rem;\n  height: 0.5rem;\n}\n\n::-webkit-scrollbar-track {\n  background-color: #f3f4f6;\n}\n\n::-webkit-scrollbar-thumb {\n  background-color: #d1d5db;\n  border-radius: 0.25rem;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background-color: #9ca3af;\n}\n\n.mapboxgl-ctrl-logo {\n  display: none !important;\n}\n\n.mapboxgl-ctrl-attrib {\n  display: none !important;\n}\n```\n\n## File: dkl-microapp-2-main/app/layout.tsx\n```typescript\nimport type React from \"react\"\nimport type { Metadata } from \"next\"\nimport { Inter } from \"next/font/google\"\nimport \"./globals.css\"\nimport { Toaster } from \"@/components/ui/toaster\"\nimport { AuthProvider } from \"@/contexts/auth-context\"\nimport { ThemeProvider } from \"@/components/theme-provider\" // Assuming you have this\n\nconst inter = Inter({ subsets: [\"latin\"], variable: \"--font-inter\" })\n\nexport const metadata: Metadata = {\n  title: \"Real Estate Platform\",\n  description: \"Manage and analyze real estate properties and builders.\",\n    generator: 'v0.dev'\n}\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode\n}>) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <head>\n        <link href=\"https://api.mapbox.com/mapbox-gl-js/v3.4.0/mapbox-gl.css\" rel=\"stylesheet\" />\n      </head>\n      <body className={inter.variable}>\n        <AuthProvider>\n          <ThemeProvider attribute=\"class\" defaultTheme=\"system\" enableSystem disableTransitionOnChange>\n            {children}\n            <Toaster />\n          </ThemeProvider>\n        </AuthProvider>\n      </body>\n    </html>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/page.tsx\n```typescript\nimport { redirect } from \"next/navigation\"\n\nexport default function HomePage() {\n  // This component should ideally check auth status before redirecting,\n  // or rely on the layout to handle it.\n  // For simplicity, Next.js middleware or the root layout is often\n  // a better place for initial auth checks and redirects.\n  // Given our current structure, the redirect in app/(dashboard)/layout.tsx\n  // will handle unauthenticated users trying to access dashboard routes.\n  // This page itself might briefly render before that layout kicks in if not careful.\n  // However, since it's just a redirect, it's usually fine.\n  redirect(\"/dashboard\")\n  // return null; // Or a loading indicator if preferred\n}\n```\n\n## File: dkl-microapp-2-main/components/layout/header.tsx\n```typescript\n\"use client\"\n\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { User, LogOut, Settings, Search } from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport function Header() {\n  const { user, signOut } = useAuth()\n\n  return (\n    <header className=\"flex h-12 items-center justify-between border-b bg-white px-4\">\n      <div className=\"flex items-center gap-x-4\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-2.5 top-1/2 h-3.5 w-3.5 -translate-y-1/2 text-muted-foreground\" />\n          <Input\n            type=\"search\"\n            placeholder=\"Search properties, builders...\"\n            className=\"h-7 w-64 rounded pl-8 text-xs attio-input\" // Using attio-input for consistency if defined elsewhere, or remove for default shadcn\n          />\n        </div>\n      </div>\n\n      <div className=\"flex items-center gap-x-2\">\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" size=\"sm\" className=\"h-7 gap-x-1 px-2\">\n              <User className=\"h-3.5 w-3.5\" />\n              <span className=\"text-xs\">{user?.email}</span>\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-48\">\n            <DropdownMenuLabel className=\"text-xs\">My Account</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem asChild>\n              <Link href=\"/settings\" className=\"text-xs\">\n                <Settings className=\"mr-2 h-3.5 w-3.5\" />\n                Settings\n              </Link>\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={() => signOut()} className=\"text-xs\">\n              <LogOut className=\"mr-2 h-3.5 w-3.5\" />\n              Sign out\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </header>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/layout/sidebar.tsx\n```typescript\n\"use client\"\n\nimport Link from \"next/link\"\nimport { usePathname } from \"next/navigation\"\nimport { cn } from \"@/lib/utils\"\nimport {\n  LayoutDashboard,\n  Building2,\n  Users,\n  TrendingUp,\n  Upload,\n  Settings,\n  BarChart3,\n  FileText,\n  Share2,\n} from \"lucide-react\"\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/dashboard\", icon: LayoutDashboard },\n  { name: \"Listings\", href: \"/listings\", icon: Building2 },\n  { name: \"Builders\", href: \"/builders\", icon: Users },\n  { name: \"Social Posts\", href: \"/social\", icon: Share2 },\n  { name: \"Market Insights\", href: \"/insights\", icon: TrendingUp },\n  { name: \"Reports\", href: \"/reports\", icon: FileText },\n  { name: \"Analytics\", href: \"/analytics\", icon: BarChart3 },\n  { name: \"Import Data\", href: \"/import\", icon: Upload },\n  { name: \"Settings\", href: \"/settings\", icon: Settings },\n]\n\nexport function Sidebar() {\n  const pathname = usePathname()\n\n  return (\n    <div className=\"flex h-full w-48 flex-col border-r bg-gray-50/50\">\n      <div className=\"flex h-12 items-center border-b px-4\">\n        <Link href=\"/dashboard\" aria-label=\"Go to dashboard\">\n          <svg\n            width=\"105.13\"\n            height=\"36\"\n            viewBox=\"0 0 1577 541\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            className=\"h-auto\"\n            style={{ height: \"20px\" }}\n          >\n            <rect x=\"76.2188\" y=\"76.436\" width=\"178.273\" height=\"178.273\" fill=\"currentColor\" />\n            <path\n              d=\"M296.199 76.436C321.646 76.436 346.844 81.4483 370.354 91.1868C393.864 100.925 415.225 115.199 433.219 133.193C451.213 151.188 465.486 172.55 475.224 196.061C484.963 219.571 489.975 244.77 489.975 270.218C489.975 295.666 484.963 320.864 475.224 344.375C465.486 367.885 451.213 389.248 433.219 407.242C415.225 425.236 393.864 439.51 370.354 449.249C346.844 458.987 321.646 463.999 296.199 463.999L296.199 76.436Z\"\n              fill=\"currentColor\"\n            />\n            <circle cx=\"165.355\" cy=\"374.863\" r=\"89.1367\" fill=\"currentColor\" />\n            <path\n              d=\"M1401.56 186.084C1421.34 186.084 1438.65 189.606 1453.49 196.651C1468.33 203.697 1479.88 213.515 1488.12 226.106C1496.51 238.698 1500.71 253.462 1500.71 270.401C1500.71 287.189 1496.51 301.954 1488.12 314.695C1479.88 327.287 1468.33 337.105 1453.49 344.15C1438.65 351.195 1421.34 354.718 1401.56 354.718H1319.26V186.084H1401.56ZM1361.53 337.405L1340.85 317.169H1404.7C1415.5 317.169 1424.86 315.22 1432.81 311.323C1440.75 307.425 1446.9 302.029 1451.25 295.134C1455.59 288.089 1457.77 279.844 1457.77 270.401C1457.77 260.807 1455.59 252.563 1451.25 245.668C1446.9 238.773 1440.75 233.376 1432.81 229.479C1424.86 225.582 1415.5 223.633 1404.7 223.633H1340.85L1361.53 203.397V337.405Z\"\n              fill=\"currentColor\"\n            />\n            <path\n              d=\"M1126.16 260.283H1189.34C1197.28 260.283 1203.58 258.484 1208.23 254.886C1212.87 251.139 1215.2 245.968 1215.2 239.372C1215.2 232.777 1212.87 227.68 1208.23 224.083C1203.58 220.335 1197.28 218.461 1189.34 218.461H1120.09L1139.2 197.551V354.718H1096.7V186.084H1194.96C1207.55 186.084 1218.57 188.332 1228.01 192.829C1237.46 197.326 1244.8 203.547 1250.05 211.491C1255.29 219.436 1257.92 228.729 1257.92 239.372C1257.92 249.865 1255.29 259.084 1250.05 267.028C1244.8 274.973 1237.46 281.193 1228.01 285.69C1218.57 290.037 1207.55 292.211 1194.96 292.211H1126.16V260.283ZM1153.36 275.797H1201.26L1263.31 354.718H1214.07L1153.36 275.797Z\"\n              fill=\"currentColor\"\n            />\n            <path\n              d=\"M935.3 186.084V335.831L916.189 317.169H1042.55V354.718H892.805V186.084H935.3Z\"\n              fill=\"currentColor\"\n            />\n            <path\n              d=\"M734.969 186.084C754.756 186.084 772.069 189.606 786.908 196.651C801.748 203.697 813.29 213.515 821.535 226.106C829.929 238.698 834.126 253.462 834.126 270.401C834.126 287.189 829.929 301.954 821.535 314.695C813.29 327.287 801.748 337.105 786.908 344.15C772.069 351.195 754.756 354.718 734.969 354.718H652.676V186.084H734.969ZM694.947 337.405L674.261 317.169H738.117C748.91 317.169 758.278 315.22 766.223 311.323C774.167 307.425 780.313 302.029 784.66 295.134C789.007 288.089 791.181 279.844 791.181 270.401C791.181 260.807 789.007 252.563 784.66 245.668C780.313 238.773 774.167 233.376 766.223 229.479C758.278 225.582 748.91 223.633 738.117 223.633H674.261L694.947 203.397V337.405Z\"\n              fill=\"currentColor\"\n            />\n          </svg>\n        </Link>\n      </div>\n      <nav className=\"flex-1 space-y-0.5 p-2\">\n        {navigation.map((item) => {\n          const isActive = pathname === item.href || (item.href !== \"/dashboard\" && pathname.startsWith(item.href))\n          return (\n            <Link\n              key={item.name}\n              href={item.href}\n              className={cn(\n                \"flex items-center gap-x-2 rounded px-2 py-1.5 text-xs font-medium transition-colors\",\n                isActive\n                  ? \"bg-primary text-primary-foreground\"\n                  : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\",\n              )}\n            >\n              <item.icon className=\"h-3.5 w-3.5\" />\n              {item.name}\n            </Link>\n          )\n        })}\n      </nav>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/alert-dialog.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/alert.tsx\n```typescript\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n```\n\n## File: dkl-microapp-2-main/components/ui/badge.tsx\n```typescript\nimport type * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default: \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive: \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return <div className={cn(badgeVariants({ variant }), className)} {...props} />\n}\n\nexport { Badge, badgeVariants }\n```\n\n## File: dkl-microapp-2-main/components/ui/button.tsx\n```typescript\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n```\n\n## File: dkl-microapp-2-main/components/ui/card.tsx\n```typescript\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n```\n\n## File: dkl-microapp-2-main/components/ui/chart.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/checkbox.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n      \"data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className,\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator className={cn(\"flex items-center justify-center text-current\")}>\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n```\n\n## File: dkl-microapp-2-main/components/ui/command.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/data-table-column-header.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\n\nimport type { Column } from \"@tanstack/react-table\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { ArrowDown, ArrowUp, ChevronsUpDown, EyeOff } from \"lucide-react\"\n\ninterface DataTableColumnHeaderProps<TData, TValue> extends React.HTMLAttributes<HTMLDivElement> {\n  column: Column<TData, TValue>\n  title: string\n}\n\nexport function DataTableColumnHeader<TData, TValue>({\n  column,\n  title,\n  className,\n}: DataTableColumnHeaderProps<TData, TValue>) {\n  if (!column.getCanSort() && !column.getCanHide()) {\n    return <div className={cn(className)}>{title}</div>\n  }\n\n  return (\n    <div className={cn(\"flex items-center space-x-2\", className)}>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"ghost\" size=\"sm\" className=\"-ml-3 h-8 data-[state=open]:bg-accent text-xs\">\n            <span>{title}</span>\n            {column.getCanSort() && column.getIsSorted() === \"desc\" ? (\n              <ArrowDown className=\"ml-2 h-3 w-3\" />\n            ) : column.getIsSorted() === \"asc\" ? (\n              <ArrowUp className=\"ml-2 h-3 w-3\" />\n            ) : (\n              <ChevronsUpDown className=\"ml-2 h-3 w-3\" />\n            )}\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"start\">\n          {column.getCanSort() && (\n            <>\n              <DropdownMenuItem onClick={() => column.toggleSorting(false)}>\n                <ArrowUp className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n                Asc\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => column.toggleSorting(true)}>\n                <ArrowDown className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n                Desc\n              </DropdownMenuItem>\n            </>\n          )}\n          {column.getCanSort() && column.getCanHide() && <DropdownMenuSeparator />}\n          {column.getCanHide() && (\n            <DropdownMenuItem onClick={() => column.toggleVisibility(false)}>\n              <EyeOff className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n              Hide\n            </DropdownMenuItem>\n          )}\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/data-table-pagination.tsx\n```typescript\n\"use client\"\n\nimport type { Table } from \"@tanstack/react-table\"\nimport { Button } from \"@/components/ui/button\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { ChevronLeft, ChevronRight, ChevronsLeft, ChevronsRight } from \"lucide-react\"\n\ninterface DataTablePaginationProps<TData> {\n  table: Table<TData>\n}\n\nexport function DataTablePagination<TData>({ table }: DataTablePaginationProps<TData>) {\n  return (\n    <div className=\"flex items-center justify-between px-2 py-2 border-t\">\n      <div className=\"flex-1 text-sm text-muted-foreground\">\n        {table.getFilteredSelectedRowModel().rows.length} of {table.getFilteredRowModel().rows.length} row(s) selected.\n      </div>\n      <div className=\"flex items-center space-x-6 lg:space-x-8\">\n        <div className=\"flex items-center space-x-2\">\n          <p className=\"text-sm font-medium\">Rows per page</p>\n          <Select\n            value={`${table.getState().pagination.pageSize}`}\n            onValueChange={(value) => {\n              table.setPageSize(Number(value))\n            }}\n          >\n            <SelectTrigger className=\"h-8 w-[70px]\">\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\n            </SelectTrigger>\n            <SelectContent side=\"top\">\n              {[10, 20, 30, 40, 50, 100].map((pageSize) => (\n                <SelectItem key={pageSize} value={`${pageSize}`}>\n                  {pageSize}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n          Page {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\n            onClick={() => table.setPageIndex(0)}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <span className=\"sr-only\">Go to first page</span>\n            <ChevronsLeft className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"h-8 w-8 p-0\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <span className=\"sr-only\">Go to previous page</span>\n            <ChevronLeft className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"h-8 w-8 p-0\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n          >\n            <span className=\"sr-only\">Go to next page</span>\n            <ChevronRight className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\n            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n            disabled={!table.getCanNextPage()}\n          >\n            <span className=\"sr-only\">Go to last page</span>\n            <ChevronsRight className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/data-table-toolbar.tsx\n```typescript\n\"use client\"\n\nimport type { Table } from \"@tanstack/react-table\"\nimport { Input } from \"@/components/ui/input\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { SlidersHorizontal, X } from \"lucide-react\"\n\ninterface DataTableToolbarProps<TData> {\n  table: Table<TData>\n  globalFilter?: string\n  setGlobalFilter?: (value: string) => void\n  // Add props for faceted filters if needed, e.g., filterComponents?: React.ReactNode[]\n}\n\nexport function DataTableToolbar<TData>({ table, globalFilter, setGlobalFilter }: DataTableToolbarProps<TData>) {\n  const isFiltered = table.getState().columnFilters.length > 0\n\n  return (\n    <div className=\"flex items-center justify-between py-2\">\n      <div className=\"flex flex-1 items-center space-x-2\">\n        {setGlobalFilter && (\n          <Input\n            placeholder=\"Search all columns...\"\n            value={globalFilter ?? \"\"}\n            onChange={(event) => setGlobalFilter(event.target.value)}\n            className=\"h-8 w-[150px] lg:w-[250px]\"\n          />\n        )}\n        {/* Placeholder for Faceted Filter Buttons */}\n        {/* {table.getAllColumns().map(column => {\n          if (column.getCanFilter()) {\n            // Render faceted filter UIs here based on column meta or type\n          }\n          return null;\n        })} */}\n        {isFiltered && (\n          <Button variant=\"ghost\" onClick={() => table.resetColumnFilters()} className=\"h-8 px-2 lg:px-3\">\n            Reset\n            <X className=\"ml-2 h-4 w-4\" />\n          </Button>\n        )}\n      </div>\n      <div className=\"flex items-center space-x-2\">\n        {/* Placeholder for Advanced/Command Filters */}\n        {/* <Button variant=\"outline\" size=\"sm\" className=\"h-8\">Advanced Filters</Button> */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"outline\" size=\"sm\" className=\"ml-auto hidden h-8 lg:flex\">\n              <SlidersHorizontal className=\"mr-2 h-4 w-4\" />\n              View\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-[150px]\">\n            <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            {table\n              .getAllColumns()\n              .filter((column) => typeof column.accessorFn !== \"undefined\" && column.getCanHide())\n              .map((column) => {\n                return (\n                  <DropdownMenuCheckboxItem\n                    key={column.id}\n                    className=\"capitalize\"\n                    checked={column.getIsVisible()}\n                    onCheckedChange={(value) => column.toggleVisibility(!!value)}\n                  >\n                    {column.id}\n                  </DropdownMenuCheckboxItem>\n                )\n              })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/data-table.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport {\n  type ColumnDef,\n  type ColumnFiltersState,\n  type SortingState,\n  type VisibilityState,\n  type RowSelectionState,\n  flexRender,\n  getCoreRowModel,\n  getFacetedRowModel,\n  getFacetedUniqueValues,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { DataTablePagination } from \"./data-table-pagination\"\nimport { DataTableToolbar } from \"./data-table-toolbar\" // We'll create this\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[]\n  data: TData[]\n  loading?: boolean\n  // Add props for bulk actions if needed\n  renderBulkActions?: (selectedRows: TData[]) => React.ReactNode\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n  loading = false,\n  renderBulkActions,\n}: DataTableProps<TData, TValue>) {\n  const [rowSelection, setRowSelection] = React.useState<RowSelectionState>({})\n  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({})\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([])\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [globalFilter, setGlobalFilter] = React.useState(\"\")\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      sorting,\n      columnVisibility,\n      rowSelection,\n      columnFilters,\n      globalFilter,\n    },\n    enableRowSelection: true,\n    onRowSelectionChange: setRowSelection,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    onColumnVisibilityChange: setColumnVisibility,\n    onGlobalFilterChange: setGlobalFilter,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFacetedRowModel: getFacetedRowModel(),\n    getFacetedUniqueValues: getFacetedUniqueValues(),\n    manualPagination: false, // Set to true if using server-side pagination\n  })\n\n  const selectedRowsData = table.getFilteredSelectedRowModel().rows.map((row) => row.original)\n\n  return (\n    <div className=\"space-y-2\">\n      <DataTableToolbar table={table} globalFilter={globalFilter} setGlobalFilter={setGlobalFilter} />\n      <div className=\"rounded-md border bg-card\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead key={header.id} colSpan={header.colSpan} className=\"text-xs\">\n                      {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                    </TableHead>\n                  )\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {loading ? (\n              <TableRow>\n                <TableCell colSpan={columns.length} className=\"h-24 text-center text-xs\">\n                  Loading...\n                </TableCell>\n              </TableRow>\n            ) : table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow key={row.id} data-state={row.getIsSelected() && \"selected\"}>\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id} className=\"text-xs py-2\">\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell colSpan={columns.length} className=\"h-24 text-center text-xs\">\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <DataTablePagination table={table} />\n      {renderBulkActions && selectedRowsData.length > 0 && (\n        <div className=\"fixed bottom-4 left-1/2 -translate-x-1/2 z-50\">\n          <div className=\"bg-card border shadow-lg rounded-md p-2 flex items-center space-x-2\">\n            <span className=\"text-sm font-medium px-2\">{selectedRowsData.length} selected</span>\n            {renderBulkActions(selectedRowsData)}\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/dialog.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className,\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"flex flex-col space-y-1.5 text-center sm:text-left\", className)} {...props} />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)} {...props} />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/dropdown-menu.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/input.tsx\n```typescript\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n```\n\n## File: dkl-microapp-2-main/components/ui/label.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n```\n\n## File: dkl-microapp-2-main/components/ui/popover.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n```\n\n## File: dkl-microapp-2-main/components/ui/progress.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\"relative h-4 w-full overflow-hidden rounded-full bg-secondary\", className)}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n```\n\n## File: dkl-microapp-2-main/components/ui/radio-group.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n```\n\n## File: dkl-microapp-2-main/components/ui/scroll-area.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n```\n\n## File: dkl-microapp-2-main/components/ui/select.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\"flex cursor-default items-center justify-center py-1\", className)}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\"flex cursor-default items-center justify-center py-1\", className)}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName = SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className,\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\",\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label ref={ref} className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)} {...props} />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className,\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator ref={ref} className={cn(\"-mx-1 my-1 h-px bg-muted\", className)} {...props} />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/separator.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n```\n\n## File: dkl-microapp-2-main/components/ui/sheet.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/switch.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className,\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\",\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n```\n\n## File: dkl-microapp-2-main/components/ui/table.tsx\n```typescript\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<HTMLTableElement, React.HTMLAttributes<HTMLTableElement>>(\n  ({ className, ...props }, ref) => (\n    <div className=\"relative w-full overflow-auto\">\n      <table ref={ref} className={cn(\"w-full caption-bottom text-sm\", className)} {...props} />\n    </div>\n  ),\n)\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />,\n)\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => (\n    <tbody ref={ref} className={cn(\"[&_tr:last-child]:border-0\", className)} {...props} />\n  ),\n)\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => (\n    <tfoot ref={ref} className={cn(\"bg-primary font-medium text-primary-foreground\", className)} {...props} />\n  ),\n)\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<HTMLTableRowElement, React.HTMLAttributes<HTMLTableRowElement>>(\n  ({ className, ...props }, ref) => (\n    <tr\n      ref={ref}\n      className={cn(\"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\", className)}\n      {...props}\n    />\n  ),\n)\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<HTMLTableCellElement, React.ThHTMLAttributes<HTMLTableCellElement>>(\n  ({ className, ...props }, ref) => (\n    <th\n      ref={ref}\n      className={cn(\n        \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className,\n      )}\n      {...props}\n    />\n  ),\n)\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<HTMLTableCellElement, React.TdHTMLAttributes<HTMLTableCellElement>>(\n  ({ className, ...props }, ref) => (\n    <td\n      ref={ref}\n      className={cn(\"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\", className)}\n      {...props}\n    />\n  ),\n)\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<HTMLTableCaptionElement, React.HTMLAttributes<HTMLTableCaptionElement>>(\n  ({ className, ...props }, ref) => (\n    <caption ref={ref} className={cn(\"mt-4 text-sm text-muted-foreground\", className)} {...props} />\n  ),\n)\nTableCaption.displayName = \"TableCaption\"\n\nexport { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption }\n```\n\n## File: dkl-microapp-2-main/components/ui/tabs.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className,\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className,\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className,\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n```\n\n## File: dkl-microapp-2-main/components/ui/textarea.tsx\n```typescript\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n```\n\n## File: dkl-microapp-2-main/components/ui/toast.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className,\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive: \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> & VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return <ToastPrimitives.Root ref={ref} className={cn(toastVariants({ variant }), className)} {...props} />\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className,\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className,\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title ref={ref} className={cn(\"text-sm font-semibold\", className)} {...props} />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description ref={ref} className={cn(\"text-sm opacity-90\", className)} {...props} />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/toaster.tsx\n```typescript\n\"use client\"\n\nimport { Toast, ToastClose, ToastDescription, ToastProvider, ToastTitle, ToastViewport } from \"@/components/ui/toast\"\nimport { useToast } from \"@/hooks/use-toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(({ id, title, description, action, ...props }) => (\n        <Toast key={id} {...props}>\n          <div className=\"grid gap-1\">\n            {title && <ToastTitle>{title}</ToastTitle>}\n            {description && <ToastDescription>{description}</ToastDescription>}\n          </div>\n          {action}\n          <ToastClose />\n        </Toast>\n      ))}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/toggle.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n```\n\n## File: dkl-microapp-2-main/components/builder-assignment-dialog.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\"\nimport { Button } from \"@/components/ui/button\"\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport type { Database } from \"@/types/supabase\"\nimport { ChevronsUpDown, Check } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\ntype Builder = Database[\"public\"][\"Tables\"][\"builders\"][\"Row\"]\n\ninterface BuilderAssignmentDialogProps {\n  open: boolean\n  onOpenChange: (open: boolean) => void\n  selectedPropertyIds: string[]\n  onAssignmentComplete: () => void\n}\n\nexport function BuilderAssignmentDialog({\n  open,\n  onOpenChange,\n  selectedPropertyIds,\n  onAssignmentComplete,\n}: BuilderAssignmentDialogProps) {\n  const [builders, setBuilders] = React.useState<Builder[]>([])\n  const [selectedBuilderId, setSelectedBuilderId] = React.useState<string | null>(null)\n  const [isLoadingBuilders, setIsLoadingBuilders] = React.useState(false)\n  const [isAssigning, setIsAssigning] = React.useState(false)\n  const [popoverOpen, setPopoverOpen] = React.useState(false)\n\n  const { toast } = useToast()\n\n  React.useEffect(() => {\n    if (open) {\n      const fetchBuilders = async () => {\n        setIsLoadingBuilders(true)\n        // Fetch only essential fields for the dropdown\n        const { data, error } = await supabase.from(\"builders\").select(\"id, name, company_name\").order(\"name\")\n\n        if (error) {\n          toast({\n            title: \"Error fetching builders\",\n            description: error.message,\n            variant: \"destructive\",\n          })\n          setBuilders([])\n        } else {\n          setBuilders(data || [])\n        }\n        setIsLoadingBuilders(false)\n      }\n      fetchBuilders()\n      setSelectedBuilderId(null) // Reset selected builder when dialog opens\n    }\n  }, [open, toast])\n\n  const handleAssignBuilder = async () => {\n    if (!selectedBuilderId) {\n      toast({\n        title: \"No builder selected\",\n        description: \"Please select a builder to assign.\",\n        variant: \"warning\", // Changed from \"destructive\" to \"warning\" for non-critical user error\n      })\n      return\n    }\n\n    if (!selectedPropertyIds || selectedPropertyIds.length === 0) {\n      toast({\n        title: \"No listings selected\",\n        description: \"No listings were selected to assign the builder to.\", // More user-friendly message\n        variant: \"warning\",\n      })\n      return\n    }\n\n    setIsAssigning(true)\n    const updates = selectedPropertyIds.map((propertyId) => ({\n      id: propertyId, // Ensure this matches the primary key of your listings table\n      builder_id: selectedBuilderId,\n    }))\n\n    // Using .upsert might be safer if you have RLS policies that prevent updates unless certain conditions are met\n    // and you want to ensure the operation goes through. .update is also fine.\n    const { error } = await supabase.from(\"listings\").upsert(updates).select()\n\n    setIsAssigning(false)\n\n    if (error) {\n      toast({\n        title: \"Failed to assign builder\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      })\n    } else {\n      toast({\n        title: \"Builder assigned successfully\",\n        description: `Assigned builder to ${selectedPropertyIds.length} listing(s).`,\n      })\n      onAssignmentComplete() // Callback to refresh data on the parent page\n      onOpenChange(false) // Close the dialog\n    }\n  }\n\n  // Render nothing if the dialog is not open\n  if (!open) {\n    return null\n  }\n\n  return (\n    <AlertDialog open={open} onOpenChange={onOpenChange}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>Assign Builder to Listings</AlertDialogTitle>\n          <AlertDialogDescription>\n            Select a builder to assign to the {selectedPropertyIds.length} selected listing(s).\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n\n        <Popover open={popoverOpen} onOpenChange={setPopoverOpen}>\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"outline\"\n              role=\"combobox\"\n              aria-expanded={popoverOpen}\n              className=\"w-full justify-between\"\n              disabled={isLoadingBuilders || builders.length === 0}\n            >\n              {selectedBuilderId\n                ? (builders.find((builder) => builder.id === selectedBuilderId)?.name ?? \"Select builder...\")\n                : \"Select builder...\"}\n              <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-[--radix-popover-trigger-width] p-0\">\n            <Command>\n              <CommandInput placeholder=\"Search builders...\" />\n              <CommandList>\n                {isLoadingBuilders && <CommandItem disabled>Loading builders...</CommandItem>}\n                {!isLoadingBuilders && builders.length === 0 && <CommandItem disabled>No builders found.</CommandItem>}\n                <CommandEmpty>No builder found.</CommandEmpty>\n                <CommandGroup>\n                  {builders.map((builder) => (\n                    <CommandItem\n                      key={builder.id}\n                      value={builder.name || builder.id} // Ensure value is unique and searchable\n                      onSelect={() => {\n                        setSelectedBuilderId(builder.id)\n                        setPopoverOpen(false)\n                      }}\n                    >\n                      <Check\n                        className={cn(\"mr-2 h-4 w-4\", selectedBuilderId === builder.id ? \"opacity-100\" : \"opacity-0\")}\n                      />\n                      {builder.name} {builder.company_name && `(${builder.company_name})`}\n                    </CommandItem>\n                  ))}\n                </CommandGroup>\n              </CommandList>\n            </Command>\n          </PopoverContent>\n        </Popover>\n\n        <AlertDialogFooter>\n          <AlertDialogCancel disabled={isAssigning}>Cancel</AlertDialogCancel>\n          <AlertDialogAction\n            onClick={handleAssignBuilder}\n            disabled={!selectedBuilderId || isAssigning || isLoadingBuilders || selectedPropertyIds.length === 0}\n          >\n            {isAssigning ? \"Assigning...\" : \"Assign\"}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/builder-form-dialog.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\nimport { useState, useEffect } from \"react\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n  DialogClose,\n} from \"@/components/ui/dialog\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { Save, Loader2 } from \"lucide-react\"\nimport type { Database } from \"@/types/supabase\"\n\ninterface BuilderFormDialogProps {\n  open: boolean\n  onOpenChange: (open: boolean) => void\n  onBuilderCreated: () => void\n  builder?: Partial<Database[\"public\"][\"Tables\"][\"builders\"][\"Row\"]> // For potential edit mode\n}\n\nconst initialFormData = {\n  name: \"\",\n  company_name: \"\",\n  phone: \"\",\n  email: \"\",\n  website: \"\",\n  address: \"\",\n  city: \"\",\n  state: \"\",\n  zip_code: \"\",\n  years_in_business: \"\",\n  total_projects: \"\",\n  active_projects: \"\",\n  price_range_min: \"\",\n  price_range_max: \"\",\n  specialties: \"\", // Stored as comma-separated string in form, converted to array on submit\n  notes: \"\",\n}\n\nexport function BuilderFormDialog({ open, onOpenChange, onBuilderCreated, builder }: BuilderFormDialogProps) {\n  const { toast } = useToast()\n  const [loading, setLoading] = useState(false)\n  const [formData, setFormData] = useState(initialFormData)\n\n  useEffect(() => {\n    if (builder && open) {\n      setFormData({\n        name: builder.name || \"\",\n        company_name: builder.company_name || \"\",\n        phone: builder.phone || \"\",\n        email: builder.email || \"\",\n        website: builder.website || \"\",\n        address: builder.address || \"\",\n        city: builder.city || \"\",\n        state: builder.state || \"\",\n        zip_code: builder.zip_code || \"\",\n        years_in_business: builder.years_in_business?.toString() || \"\",\n        total_projects: builder.total_projects?.toString() || \"\",\n        active_projects: builder.active_projects?.toString() || \"\",\n        price_range_min: builder.price_range_min?.toString() || \"\",\n        price_range_max: builder.price_range_max?.toString() || \"\",\n        specialties: Array.isArray(builder.specialties) ? builder.specialties.join(\", \") : builder.specialties || \"\",\n        notes: builder.notes || \"\",\n      })\n    } else if (!builder && open) {\n      setFormData(initialFormData)\n    }\n  }, [builder, open])\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n\n    try {\n      const builderData = {\n        ...formData,\n        years_in_business: formData.years_in_business ? Number.parseInt(formData.years_in_business) : null,\n        total_projects: formData.total_projects ? Number.parseInt(formData.total_projects) : null,\n        active_projects: formData.active_projects ? Number.parseInt(formData.active_projects) : null,\n        price_range_min: formData.price_range_min ? Number.parseFloat(formData.price_range_min) : null,\n        price_range_max: formData.price_range_max ? Number.parseFloat(formData.price_range_max) : null,\n        specialties: formData.specialties\n          ? formData.specialties\n              .split(\",\")\n              .map((s) => s.trim())\n              .filter(Boolean)\n          : null,\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { id, created_at, updated_at, ...upsertData } = builderData\n\n      const { error } = await supabase\n        .from(\"builders\")\n        .upsert(builder?.id ? { ...upsertData, id: builder.id } : upsertData)\n\n      if (error) throw error\n\n      toast({\n        title: builder?.id ? \"Builder Updated\" : \"Builder Created\",\n        description: `Builder has been successfully ${builder?.id ? \"updated\" : \"added\"}.`,\n      })\n      onBuilderCreated()\n      onOpenChange(false)\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || `Failed to ${builder?.id ? \"update\" : \"create\"} builder.`,\n        variant: \"destructive\",\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[800px] max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>{builder?.id ? \"Edit Builder\" : \"Add New Builder\"}</DialogTitle>\n          <DialogDescription>Fill in the details for the builder. Click save when you're done.</DialogDescription>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"py-4\">\n          <div className=\"grid gap-4 lg:grid-cols-2\">\n            <div className=\"space-y-3 rounded-md border p-4\">\n              <h3 className=\"text-sm font-medium mb-2\">Basic Information</h3>\n              <div>\n                <Label htmlFor=\"name\" className=\"text-xs\">\n                  Builder Name *\n                </Label>\n                <Input\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  className=\"h-8 text-xs\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"company_name\" className=\"text-xs\">\n                  Company Name\n                </Label>\n                <Input\n                  id=\"company_name\"\n                  value={formData.company_name}\n                  onChange={(e) => setFormData({ ...formData, company_name: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"phone\" className=\"text-xs\">\n                  Phone\n                </Label>\n                <Input\n                  id=\"phone\"\n                  value={formData.phone}\n                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"email\" className=\"text-xs\">\n                  Email\n                </Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"website\" className=\"text-xs\">\n                  Website\n                </Label>\n                <Input\n                  id=\"website\"\n                  value={formData.website}\n                  onChange={(e) => setFormData({ ...formData, website: e.target.value })}\n                  className=\"h-8 text-xs\"\n                  placeholder=\"https://\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-3 rounded-md border p-4\">\n              <h3 className=\"text-sm font-medium mb-2\">Address</h3>\n              <div>\n                <Label htmlFor=\"address\" className=\"text-xs\">\n                  Street Address\n                </Label>\n                <Input\n                  id=\"address\"\n                  value={formData.address}\n                  onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"city\" className=\"text-xs\">\n                  City\n                </Label>\n                <Input\n                  id=\"city\"\n                  value={formData.city}\n                  onChange={(e) => setFormData({ ...formData, city: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <Label htmlFor=\"state\" className=\"text-xs\">\n                    State\n                  </Label>\n                  <Input\n                    id=\"state\"\n                    value={formData.state}\n                    onChange={(e) => setFormData({ ...formData, state: e.target.value })}\n                    className=\"h-8 text-xs\"\n                    placeholder=\"VA\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"zip_code\" className=\"text-xs\">\n                    Zip Code\n                  </Label>\n                  <Input\n                    id=\"zip_code\"\n                    value={formData.zip_code}\n                    onChange={(e) => setFormData({ ...formData, zip_code: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-3 rounded-md border p-4\">\n              <h3 className=\"text-sm font-medium mb-2\">Business Details</h3>\n              <div>\n                <Label htmlFor=\"years_in_business\" className=\"text-xs\">\n                  Years in Business\n                </Label>\n                <Input\n                  id=\"years_in_business\"\n                  type=\"number\"\n                  value={formData.years_in_business}\n                  onChange={(e) => setFormData({ ...formData, years_in_business: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <Label htmlFor=\"total_projects\" className=\"text-xs\">\n                    Total Projects\n                  </Label>\n                  <Input\n                    id=\"total_projects\"\n                    type=\"number\"\n                    value={formData.total_projects}\n                    onChange={(e) => setFormData({ ...formData, total_projects: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"active_projects\" className=\"text-xs\">\n                    Active Projects\n                  </Label>\n                  <Input\n                    id=\"active_projects\"\n                    type=\"number\"\n                    value={formData.active_projects}\n                    onChange={(e) => setFormData({ ...formData, active_projects: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <Label htmlFor=\"price_range_min\" className=\"text-xs\">\n                    Min Price Range\n                  </Label>\n                  <Input\n                    id=\"price_range_min\"\n                    type=\"number\"\n                    value={formData.price_range_min}\n                    onChange={(e) => setFormData({ ...formData, price_range_min: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"price_range_max\" className=\"text-xs\">\n                    Max Price Range\n                  </Label>\n                  <Input\n                    id=\"price_range_max\"\n                    type=\"number\"\n                    value={formData.price_range_max}\n                    onChange={(e) => setFormData({ ...formData, price_range_max: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-3 rounded-md border p-4\">\n              <h3 className=\"text-sm font-medium mb-2\">Additional Information</h3>\n              <div>\n                <Label htmlFor=\"specialties\" className=\"text-xs\">\n                  Specialties\n                </Label>\n                <Input\n                  id=\"specialties\"\n                  value={formData.specialties}\n                  onChange={(e) => setFormData({ ...formData, specialties: e.target.value })}\n                  className=\"h-8 text-xs\"\n                  placeholder=\"Luxury Homes, Custom Builds (comma separated)\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"notes\" className=\"text-xs\">\n                  Notes\n                </Label>\n                <Textarea\n                  id=\"notes\"\n                  value={formData.notes}\n                  onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                  className=\"text-xs\"\n                  rows={3}\n                />\n              </div>\n            </div>\n          </div>\n          <DialogFooter className=\"pt-6\">\n            <DialogClose asChild>\n              <Button type=\"button\" variant=\"outline\">\n                Cancel\n              </Button>\n            </DialogClose>\n            <Button type=\"submit\" disabled={loading}>\n              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Save className=\"mr-2 h-4 w-4\" />}\n              {builder?.id ? \"Save Changes\" : \"Create Builder\"}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/editable-field.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useEffect, useRef } from \"react\"\nimport { Input } from \"@/components/ui/input\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Button } from \"@/components/ui/button\"\nimport { Check, Edit3, X, Loader2 } from \"lucide-react\"\n\ninterface EditableFieldProps {\n  initialValue: string\n  onSave: (newValue: string) => Promise<void>\n  label: string\n  as?: \"input\" | \"textarea\"\n  inputClassName?: string\n  textClassName?: string\n  placeholder?: string\n}\n\nexport function EditableField({\n  initialValue,\n  onSave,\n  label,\n  as = \"input\",\n  inputClassName = \"\",\n  textClassName = \"\",\n  placeholder = \"Not set\",\n}: EditableFieldProps) {\n  const [isEditing, setIsEditing] = useState(false)\n  const [value, setValue] = useState(initialValue)\n  const [isLoading, setIsLoading] = useState(false)\n  const inputRef = useRef<HTMLInputElement | HTMLTextAreaElement>(null)\n\n  useEffect(() => {\n    setValue(initialValue)\n  }, [initialValue])\n\n  useEffect(() => {\n    if (isEditing && inputRef.current) {\n      inputRef.current.focus()\n      if (as === \"input\" && typeof (inputRef.current as HTMLInputElement).select === \"function\") {\n        ;(inputRef.current as HTMLInputElement).select()\n      }\n    }\n  }, [isEditing, as])\n\n  const handleSave = async () => {\n    if (value === initialValue && !isEditing) {\n      // ensure not to save if not edited or already saved\n      setIsEditing(false)\n      return\n    }\n    if (value === initialValue && isEditing) {\n      // if value is same as initial, just close edit mode\n      setIsEditing(false)\n      return\n    }\n\n    setIsLoading(true)\n    try {\n      await onSave(value)\n      setIsEditing(false) // Close edit mode on successful save\n    } catch (error) {\n      console.error(`Failed to save ${label}:`, error)\n      // Optionally, revert value or show error to user\n      // setValue(initialValue); // Revert to initial value on error\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleCancel = () => {\n    setValue(initialValue)\n    setIsEditing(false)\n  }\n\n  if (isEditing) {\n    return (\n      <div className=\"space-y-1 w-full\">\n        {as === \"input\" ? (\n          <Input\n            ref={inputRef as React.RefObject<HTMLInputElement>}\n            type=\"text\"\n            value={value}\n            onChange={(e) => setValue(e.target.value)}\n            className={`h-8 text-sm ${inputClassName}`}\n            disabled={isLoading}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\" && !e.shiftKey) {\n                e.preventDefault()\n                handleSave()\n              }\n              if (e.key === \"Escape\") handleCancel()\n            }}\n          />\n        ) : (\n          <Textarea\n            ref={inputRef as React.RefObject<HTMLTextAreaElement>}\n            value={value}\n            onChange={(e) => setValue(e.target.value)}\n            className={`text-sm min-h-[60px] ${inputClassName}`}\n            disabled={isLoading}\n            onKeyDown={(e) => {\n              if (e.key === \"Escape\") handleCancel()\n            }}\n          />\n        )}\n        <div className=\"flex items-center space-x-1 pt-1\">\n          <Button\n            variant=\"ghost\"\n            size=\"iconSm\"\n            onClick={handleSave}\n            disabled={isLoading}\n            className=\"h-6 w-6 text-green-600 hover:text-green-700\"\n            aria-label=\"Save change\"\n          >\n            {isLoading ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <Check className=\"h-4 w-4\" />}\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"iconSm\"\n            onClick={handleCancel}\n            disabled={isLoading}\n            className=\"h-6 w-6 text-red-600 hover:text-red-700\"\n            aria-label=\"Cancel change\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div\n      className={`group flex items-center cursor-pointer hover:bg-gray-100/50 dark:hover:bg-gray-800/50 p-1 -m-1 rounded transition-colors w-full ${textClassName}`}\n      onClick={() => setIsEditing(true)}\n      role=\"button\"\n      tabIndex={0}\n      onKeyDown={(e) => {\n        if (e.key === \"Enter\" || e.key === \" \") {\n          e.preventDefault()\n          setIsEditing(true)\n        }\n      }}\n      aria-label={`Edit ${label}`}\n    >\n      <span className={`flex-grow text-sm ${!initialValue && \"text-muted-foreground\"}`}>\n        {initialValue || placeholder}\n      </span>\n      <Edit3 className=\"h-3 w-3 ml-2 text-muted-foreground opacity-0 group-hover:opacity-100 transition-opacity flex-shrink-0\" />\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/field-mapping-sheet.tsx\n```typescript\n\"use client\"\nimport { useState, useEffect } from \"react\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n  SheetDescription,\n  SheetFooter,\n  SheetClose,\n} from \"@/components/ui/sheet\"\nimport { Button } from \"@/components/ui/button\"\nimport { Label } from \"@/components/ui/label\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\nimport { Check, ChevronsUpDown } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport type { ListingFieldDefinition, MappedDbColumn } from \"@/lib/listing-fields\"\n\ninterface FieldMappingSheetProps {\n  isOpen: boolean\n  onClose: () => void\n  csvHeaders: string[]\n  currentMappings: Record<string, MappedDbColumn>\n  onSaveMappings: (mappings: Record<string, MappedDbColumn>) => void\n  availableDbColumns: readonly ListingFieldDefinition[]\n}\n\nconst IGNORE_FIELD_VALUE: MappedDbColumn = \"ignore_field\"\nconst IGNORE_FIELD_LABEL = \"Ignore this field\"\n\nexport function FieldMappingSheet({\n  isOpen,\n  onClose,\n  csvHeaders,\n  currentMappings,\n  onSaveMappings,\n  availableDbColumns,\n}: FieldMappingSheetProps) {\n  const [tempMappings, setTempMappings] = useState<Record<string, MappedDbColumn>>(currentMappings)\n  const [popoverOpenStates, setPopoverOpenStates] = useState<Record<string, boolean>>({})\n\n  useEffect(() => {\n    setTempMappings(currentMappings)\n  }, [isOpen, currentMappings])\n\n  const handleMappingChange = (csvHeader: string, newDbCol: MappedDbColumn) => {\n    setTempMappings((prev) => ({ ...prev, [csvHeader]: newDbCol }))\n    setPopoverOpenStates((prev) => ({ ...prev, [csvHeader]: false }))\n  }\n\n  const handleSave = () => {\n    onSaveMappings(tempMappings)\n    onClose()\n  }\n\n  const getDisplayLabel = (value: MappedDbColumn): string => {\n    if (value === IGNORE_FIELD_VALUE) {\n      return IGNORE_FIELD_LABEL\n    }\n    const foundColumn = availableDbColumns.find((col) => col.value === value)\n    return foundColumn ? `${foundColumn.label} (${foundColumn.value})` : \"Select database field...\"\n  }\n\n  return (\n    <Sheet open={isOpen} onOpenChange={(open) => !open && onClose()}>\n      <SheetContent className=\"sm:max-w-lg w-[90vw] flex flex-col\">\n        <SheetHeader>\n          <SheetTitle>Map CSV Fields to Database Columns</SheetTitle>\n          <SheetDescription>\n            Review and adjust how your CSV fields correspond to the listing database fields. Unmapped fields or fields\n            set to \"Ignore\" will not be imported.\n          </SheetDescription>\n        </SheetHeader>\n        <ScrollArea className=\"flex-grow py-4 pr-2\">\n          <div className=\"space-y-4 pr-4\">\n            {csvHeaders.map((header) => (\n              <div key={header} className=\"grid grid-cols-2 gap-4 items-center\">\n                <Label htmlFor={`map-${header}`} className=\"truncate text-sm font-medium\">\n                  {header}\n                </Label>\n                <Popover\n                  open={popoverOpenStates[header] || false}\n                  onOpenChange={(isOpenState) => setPopoverOpenStates((prev) => ({ ...prev, [header]: isOpenState }))}\n                >\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      role=\"combobox\"\n                      aria-expanded={popoverOpenStates[header] || false}\n                      className=\"w-full justify-between\"\n                      id={`map-${header}`}\n                    >\n                      <span className=\"truncate\">{getDisplayLabel(tempMappings[header] || IGNORE_FIELD_VALUE)}</span>\n                      <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-[--radix-popover-trigger-width] p-0 max-h-[--radix-popover-content-available-height]\">\n                    <Command>\n                      <CommandInput placeholder=\"Search field...\" />\n                      <CommandEmpty>No field found.</CommandEmpty>\n                      <CommandList>\n                        <CommandGroup>\n                          <CommandItem\n                            key={IGNORE_FIELD_VALUE}\n                            value={IGNORE_FIELD_VALUE}\n                            onSelect={() => handleMappingChange(header, IGNORE_FIELD_VALUE)}\n                          >\n                            <Check\n                              className={cn(\n                                \"mr-2 h-4 w-4\",\n                                (tempMappings[header] || IGNORE_FIELD_VALUE) === IGNORE_FIELD_VALUE\n                                  ? \"opacity-100\"\n                                  : \"opacity-0\",\n                              )}\n                            />\n                            {IGNORE_FIELD_LABEL}\n                          </CommandItem>\n                          {availableDbColumns.map((col) => {\n                            const isOptionSelectedByCurrentHeader = tempMappings[header] === col.value\n                            const isOptionTakenByAnotherHeader = Object.entries(tempMappings).some(\n                              ([otherCsvHeader, mappedDbCol]) =>\n                                otherCsvHeader !== header &&\n                                mappedDbCol === col.value &&\n                                mappedDbCol !== \"ignore_field\",\n                            )\n                            return (\n                              <CommandItem\n                                key={col.value}\n                                value={col.value}\n                                onSelect={() => {\n                                  if (!(isOptionTakenByAnotherHeader && !isOptionSelectedByCurrentHeader)) {\n                                    handleMappingChange(header, col.value as MappedDbColumn)\n                                  }\n                                }}\n                                disabled={isOptionTakenByAnotherHeader && !isOptionSelectedByCurrentHeader}\n                                className={cn(\n                                  isOptionTakenByAnotherHeader &&\n                                    !isOptionSelectedByCurrentHeader &&\n                                    \"opacity-50 cursor-not-allowed\",\n                                )}\n                              >\n                                <Check\n                                  className={cn(\n                                    \"mr-2 h-4 w-4\",\n                                    isOptionSelectedByCurrentHeader ? \"opacity-100\" : \"opacity-0\",\n                                  )}\n                                />\n                                {col.label} ({col.value})\n                                {isOptionTakenByAnotherHeader && !isOptionSelectedByCurrentHeader && (\n                                  <span className=\"ml-auto text-xs text-muted-foreground\">(In use)</span>\n                                )}\n                              </CommandItem>\n                            )\n                          })}\n                        </CommandGroup>\n                      </CommandList>\n                    </Command>\n                  </PopoverContent>\n                </Popover>\n              </div>\n            ))}\n          </div>\n        </ScrollArea>\n        <SheetFooter className=\"mt-auto pt-4 border-t\">\n          <SheetClose asChild>\n            <Button variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n          </SheetClose>\n          <Button onClick={handleSave}>Save Mappings</Button>\n        </SheetFooter>\n      </SheetContent>\n    </Sheet>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/header.tsx\n```typescript\n\"use client\"\n\nimport { UserNav } from \"@/components/user-nav\"\nimport { Input } from \"@/components/ui/input\"\nimport { Search } from \"lucide-react\"\n\nexport function Header() {\n  return (\n    <header className=\"sticky top-0 z-50 flex h-12 items-center justify-between border-b bg-background px-4\">\n      <div className=\"flex items-center gap-x-4\">\n        <div className=\"text-sm font-semibold\">Real Estate Market Analysis</div>\n      </div>\n      <div className=\"flex items-center gap-x-4\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\n          <Input type=\"search\" placeholder=\"Search...\" className=\"w-64 rounded-md pl-8 attio-input\" />\n        </div>\n        <UserNav />\n      </div>\n    </header>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/listing-form-dialog.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\nimport { useState, useEffect } from \"react\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n  DialogClose,\n} from \"@/components/ui/dialog\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { Save, Loader2 } from \"lucide-react\"\nimport type { Database } from \"@/types/supabase\"\n\ntype Builder = Database[\"public\"][\"Tables\"][\"builders\"][\"Row\"]\ntype Listing = Database[\"public\"][\"Tables\"][\"listings\"][\"Row\"] // Changed from Property\n\ninterface ListingFormDialogProps {\n  open: boolean\n  onOpenChange: (open: boolean) => void\n  onListingCreated: () => void // Renamed from onPropertyCreated\n  listing?: Partial<Listing> // Changed from Property\n}\n\nconst initialFormData = {\n  mls_number: \"\",\n  status: \"Active\",\n  list_price: \"\",\n  street_number: \"\",\n  street_name: \"\",\n  city: \"\",\n  state: \"\",\n  zip_code: \"\",\n  bedrooms: \"\",\n  baths_full: \"\",\n  baths_half: \"\",\n  interior_sqft: \"\",\n  new_construction: false,\n  builder_id: \"\",\n  property_condition: \"\",\n  garage_spaces: \"\",\n  fireplace: false,\n  central_air: false,\n  basement: false,\n  // Add any other relevant fields from your 'listings' table\n}\n\nexport function ListingFormDialog({ open, onOpenChange, onListingCreated, listing }: ListingFormDialogProps) {\n  // Renamed component\n  const { toast } = useToast()\n  const [builders, setBuilders] = useState<Builder[]>([])\n  const [loading, setLoading] = useState(false)\n  const [formData, setFormData] = useState(initialFormData)\n\n  useEffect(() => {\n    fetchBuilders()\n  }, [])\n\n  useEffect(() => {\n    if (listing && open) {\n      setFormData({\n        mls_number: listing.mls_number || \"\",\n        status: listing.status || \"Active\",\n        list_price: listing.list_price?.toString() || \"\",\n        street_number: listing.street_number || \"\",\n        street_name: listing.street_name || \"\",\n        city: listing.city || \"\",\n        state: listing.state || \"\",\n        zip_code: listing.zip_code || \"\",\n        bedrooms: listing.bedrooms?.toString() || \"\",\n        baths_full: listing.baths_full?.toString() || \"\",\n        baths_half: listing.baths_half?.toString() || \"\",\n        interior_sqft: listing.interior_sqft?.toString() || \"\",\n        new_construction: listing.new_construction || false,\n        builder_id: listing.builder_id || \"\",\n        property_condition: listing.property_condition || \"\",\n        garage_spaces: listing.garage_spaces?.toString() || \"\",\n        fireplace: listing.fireplace || false,\n        central_air: listing.central_air || false,\n        basement: listing.basement || false,\n        // Map other fields from listing to formData as needed\n      })\n    } else if (!listing && open) {\n      setFormData(initialFormData)\n    }\n  }, [listing, open])\n\n  async function fetchBuilders() {\n    try {\n      const { data } = await supabase.from(\"builders\").select(\"id, name, company_name\").order(\"name\")\n      setBuilders(data || [])\n    } catch (error) {\n      console.error(\"Error fetching builders:\", error)\n      toast({ title: \"Error\", description: \"Could not fetch builders.\", variant: \"destructive\" })\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n\n    try {\n      const listingData = {\n        // Renamed from propertyData\n        ...formData,\n        list_price: formData.list_price ? Number.parseFloat(formData.list_price) : null,\n        bedrooms: formData.bedrooms ? Number.parseInt(formData.bedrooms) : null,\n        baths_full: formData.baths_full ? Number.parseInt(formData.baths_full) : null,\n        baths_half: formData.baths_half ? Number.parseInt(formData.baths_half) : null,\n        interior_sqft: formData.interior_sqft ? Number.parseInt(formData.interior_sqft) : null,\n        garage_spaces: formData.garage_spaces ? Number.parseInt(formData.garage_spaces) : null,\n        builder_id: formData.builder_id || null,\n        list_date: listing?.list_date || new Date().toISOString().split(\"T\")[0],\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { id, created_at, updated_at, ...upsertData } = listingData as Partial<Listing> & {\n        id?: string\n        created_at?: string\n        updated_at?: string\n      }\n\n      const { error } = await supabase\n        .from(\"listings\") // Changed from \"properties\"\n        .upsert(listing?.id ? { ...upsertData, id: listing.id } : upsertData)\n\n      if (error) throw error\n\n      toast({\n        title: listing?.id ? \"Listing Updated\" : \"Listing Created\",\n        description: `Listing has been successfully ${listing?.id ? \"updated\" : \"added\"}.`,\n      })\n      onListingCreated() // Call the renamed prop\n      onOpenChange(false)\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || `Failed to ${listing?.id ? \"update\" : \"create\"} listing.`,\n        variant: \"destructive\",\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[800px] max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>{listing?.id ? \"Edit Listing\" : \"Add New Listing\"}</DialogTitle>\n          <DialogDescription>Fill in the details for the listing. Click save when you're done.</DialogDescription>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"py-4\">\n          <div className=\"grid gap-4 lg:grid-cols-2\">\n            <div className=\"space-y-3 rounded-md border p-4\">\n              <h3 className=\"text-sm font-medium mb-2\">Basic Information</h3>\n              <div>\n                <Label htmlFor=\"mls_number\" className=\"text-xs\">\n                  MLS Number *\n                </Label>\n                <Input\n                  id=\"mls_number\"\n                  value={formData.mls_number}\n                  onChange={(e) => setFormData({ ...formData, mls_number: e.target.value })}\n                  className=\"h-8 text-xs\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"status\" className=\"text-xs\">\n                  Status\n                </Label>\n                <Select value={formData.status} onValueChange={(value) => setFormData({ ...formData, status: value })}>\n                  <SelectTrigger className=\"h-8 text-xs\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Active\">Active</SelectItem>\n                    <SelectItem value=\"Pending\">Pending</SelectItem>\n                    <SelectItem value=\"Under Contract\">Under Contract</SelectItem>\n                    <SelectItem value=\"Sold\">Sold</SelectItem>\n                    <SelectItem value=\"Coming Soon\">Coming Soon</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"list_price\" className=\"text-xs\">\n                  List Price\n                </Label>\n                <Input\n                  id=\"list_price\"\n                  type=\"number\"\n                  value={formData.list_price}\n                  onChange={(e) => setFormData({ ...formData, list_price: e.target.value })}\n                  className=\"h-8 text-xs\"\n                  placeholder=\"0\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"builder_id\" className=\"text-xs\">\n                  Builder\n                </Label>\n                <Select\n                  value={formData.builder_id}\n                  onValueChange={(value) =>\n                    setFormData({ ...formData, builder_id: value === \"no_builder\" ? \"\" : value })\n                  }\n                >\n                  <SelectTrigger className=\"h-8 text-xs\">\n                    <SelectValue placeholder=\"Select builder\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"no_builder\">No builder</SelectItem>\n                    {builders.map((b) => (\n                      <SelectItem key={b.id} value={b.id}>\n                        {b.name} {b.company_name && `(${b.company_name})`}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"space-y-3 rounded-md border p-4\">\n              <h3 className=\"text-sm font-medium mb-2\">Address</h3>\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <Label htmlFor=\"street_number\" className=\"text-xs\">\n                    Street Number\n                  </Label>\n                  <Input\n                    id=\"street_number\"\n                    value={formData.street_number}\n                    onChange={(e) => setFormData({ ...formData, street_number: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"street_name\" className=\"text-xs\">\n                    Street Name\n                  </Label>\n                  <Input\n                    id=\"street_name\"\n                    value={formData.street_name}\n                    onChange={(e) => setFormData({ ...formData, street_name: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"city\" className=\"text-xs\">\n                  City\n                </Label>\n                <Input\n                  id=\"city\"\n                  value={formData.city}\n                  onChange={(e) => setFormData({ ...formData, city: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <Label htmlFor=\"state\" className=\"text-xs\">\n                    State\n                  </Label>\n                  <Input\n                    id=\"state\"\n                    value={formData.state}\n                    onChange={(e) => setFormData({ ...formData, state: e.target.value })}\n                    className=\"h-8 text-xs\"\n                    placeholder=\"VA\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"zip_code\" className=\"text-xs\">\n                    Zip Code\n                  </Label>\n                  <Input\n                    id=\"zip_code\"\n                    value={formData.zip_code}\n                    onChange={(e) => setFormData({ ...formData, zip_code: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-3 rounded-md border p-4\">\n              <h3 className=\"text-sm font-medium mb-2\">Listing Details</h3> {/* Changed from Property Details */}\n              <div className=\"grid grid-cols-3 gap-2\">\n                <div>\n                  <Label htmlFor=\"bedrooms\" className=\"text-xs\">\n                    Bedrooms\n                  </Label>\n                  <Input\n                    id=\"bedrooms\"\n                    type=\"number\"\n                    value={formData.bedrooms}\n                    onChange={(e) => setFormData({ ...formData, bedrooms: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"baths_full\" className=\"text-xs\">\n                    Full Baths\n                  </Label>\n                  <Input\n                    id=\"baths_full\"\n                    type=\"number\"\n                    value={formData.baths_full}\n                    onChange={(e) => setFormData({ ...formData, baths_full: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"baths_half\" className=\"text-xs\">\n                    Half Baths\n                  </Label>\n                  <Input\n                    id=\"baths_half\"\n                    type=\"number\"\n                    value={formData.baths_half}\n                    onChange={(e) => setFormData({ ...formData, baths_half: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"interior_sqft\" className=\"text-xs\">\n                  Square Feet\n                </Label>\n                <Input\n                  id=\"interior_sqft\"\n                  type=\"number\"\n                  value={formData.interior_sqft}\n                  onChange={(e) => setFormData({ ...formData, interior_sqft: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"garage_spaces\" className=\"text-xs\">\n                  Garage Spaces\n                </Label>\n                <Input\n                  id=\"garage_spaces\"\n                  type=\"number\"\n                  value={formData.garage_spaces}\n                  onChange={(e) => setFormData({ ...formData, garage_spaces: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-3 rounded-md border p-4\">\n              <h3 className=\"text-sm font-medium mb-2\">Features</h3>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"new_construction\"\n                  checked={formData.new_construction}\n                  onCheckedChange={(checked) => setFormData({ ...formData, new_construction: !!checked })}\n                />\n                <Label htmlFor=\"new_construction\" className=\"text-xs font-normal\">\n                  New Construction\n                </Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"fireplace\"\n                  checked={formData.fireplace}\n                  onCheckedChange={(checked) => setFormData({ ...formData, fireplace: !!checked })}\n                />\n                <Label htmlFor=\"fireplace\" className=\"text-xs font-normal\">\n                  Fireplace\n                </Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"central_air\"\n                  checked={formData.central_air}\n                  onCheckedChange={(checked) => setFormData({ ...formData, central_air: !!checked })}\n                />\n                <Label htmlFor=\"central_air\" className=\"text-xs font-normal\">\n                  Central Air\n                </Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"basement\"\n                  checked={formData.basement}\n                  onCheckedChange={(checked) => setFormData({ ...formData, basement: !!checked })}\n                />\n                <Label htmlFor=\"basement\" className=\"text-xs font-normal\">\n                  Basement\n                </Label>\n              </div>\n            </div>\n          </div>\n          <DialogFooter className=\"pt-6\">\n            <DialogClose asChild>\n              <Button type=\"button\" variant=\"outline\">\n                Cancel\n              </Button>\n            </DialogClose>\n            <Button type=\"submit\" disabled={loading}>\n              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Save className=\"mr-2 h-4 w-4\" />}\n              {listing?.id ? \"Save Changes\" : \"Create Listing\"}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/main-nav.tsx\n```typescript\n\"use client\"\n\nimport Link from \"next/link\"\nimport { usePathname } from \"next/navigation\"\nimport { cn } from \"@/lib/utils\"\nimport {\n  BarChart3,\n  Building2,\n  Home,\n  Settings,\n  Upload,\n  Users,\n  TrendingUp,\n  FileText,\n  Share2,\n  Palette,\n} from \"lucide-react\"\n\nconst navItems = [\n  {\n    name: \"Dashboard\",\n    href: \"/dashboard\",\n    icon: Home,\n  },\n  {\n    name: \"Listings\",\n    href: \"/listings\",\n    icon: Building2,\n  },\n  {\n    name: \"Builders\",\n    href: \"/builders\",\n    icon: Users,\n  },\n  {\n    name: \"Social Posts\",\n    href: \"/social\",\n    icon: Share2,\n  },\n  {\n    name: \"Market Insights\",\n    href: \"/insights\",\n    icon: TrendingUp,\n  },\n  {\n    name: \"Reports\",\n    href: \"/reports\",\n    icon: FileText,\n  },\n  {\n    name: \"Analytics\",\n    href: \"/analytics\",\n    icon: BarChart3,\n  },\n  {\n    name: \"Data Import\",\n    href: \"/import\",\n    icon: Upload,\n  },\n  // This is the new item\n  {\n    name: \"Style Guide\",\n    href: \"/style-guide\",\n    icon: Palette,\n  },\n  {\n    name: \"Settings\",\n    href: \"/settings\",\n    icon: Settings,\n  },\n]\n\nexport function MainNav() {\n  const pathname = usePathname()\n\n  return (\n    <nav className=\"flex flex-col space-y-1\">\n      {navItems.map((item) => {\n        const isActive = pathname === item.href || pathname?.startsWith(`${item.href}/`)\n        const Icon = item.icon\n\n        return (\n          <Link\n            key={item.href}\n            href={item.href}\n            className={cn(\n              \"flex items-center gap-x-2 rounded-md px-3 py-2 text-xs font-medium\",\n              isActive ? \"bg-primary/10 text-primary\" : \"text-muted-foreground hover:bg-muted hover:text-foreground\",\n            )}\n          >\n            <Icon className=\"h-4 w-4\" />\n            <span>{item.name}</span>\n          </Link>\n        )\n      })}\n    </nav>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/mapbox-map.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\nimport { useEffect, useRef, useState } from \"react\"\nimport mapboxgl, { type Map } from \"mapbox-gl\" // ES6 import\nimport { Loader2, AlertTriangle } from \"lucide-react\"\n\n// Update the MappableProperty interface to include additional fields for the popup\nexport interface MappableListing {\n  id: string\n  address_line_1: string | null\n  city: string | null\n  state: string | null\n  latitude?: number | null\n  longitude?: number | null\n  status?: string | null\n  list_price?: number | null\n  builder_name?: string | null\n  [key: string]: any // Allow other listing fields\n}\n\ninterface MapboxMapProps {\n  userApiKey: string | null // API key from user settings\n  properties: MappableListing[]\n  initialViewState?: {\n    longitude: number\n    latitude: number\n    zoom: number\n  }\n  className?: string\n}\n\nconst FALLBACK_MAPBOX_TOKEN = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN\n\n// Update the MapboxMap component to use a flat projection, limit to DC area, and add popups\nconst MapboxMap: React.FC<MapboxMapProps> = ({ userApiKey, properties, initialViewState, className }) => {\n  const mapContainer = useRef<HTMLDivElement | null>(null)\n  const map = useRef<Map | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [currentMarkers, setCurrentMarkers] = useState<mapboxgl.Marker[]>([])\n  const [currentPopups, setCurrentPopups] = useState<mapboxgl.Popup[]>([])\n\n  const effectiveApiKey = userApiKey || FALLBACK_MAPBOX_TOKEN\n\n  // Washington DC coordinates\n  const DC_CENTER = [-77.0369, 38.9072]\n  const DC_BOUNDS = [\n    [-77.4369, 38.5072], // Southwest coordinates (roughly 20 miles from center)\n    [-76.6369, 39.3072], // Northeast coordinates (roughly 20 miles from center)\n  ]\n\n  // Get color based on listing status\n  const getStatusColor = (status: string | null): string => {\n    switch (status?.toLowerCase()) {\n      case \"active\":\n        return \"#10b981\" // green\n      case \"pending\":\n        return \"#f59e0b\" // yellow/amber\n      case \"sold\":\n        return \"#3b82f6\" // blue\n      case \"under contract\":\n        return \"#8b5cf6\" // purple\n      case \"coming soon\":\n        return \"#f97316\" // orange\n      default:\n        return \"#6b7280\" // gray\n    }\n  }\n\n  // Format price for popup\n  const formatPrice = (price: number | null | undefined): string => {\n    if (price == null) return \"Price not available\"\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n      maximumFractionDigits: 0,\n    }).format(price)\n  }\n\n  useEffect(() => {\n    if (!effectiveApiKey) {\n      setError(\"Mapbox Access Token is not configured. Please set it in settings or as an environment variable.\")\n      setIsLoading(false)\n      return\n    }\n\n    if (!mapContainer.current) {\n      setError(\"Map container not found.\")\n      setIsLoading(false)\n      return\n    }\n\n    if (map.current) return // Initialize map only once\n\n    mapboxgl.accessToken = effectiveApiKey\n\n    try {\n      map.current = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: \"mapbox://styles/mapbox/light-v11\", // Minimalist style\n        center: DC_CENTER, // Center on Washington DC\n        zoom: 10, // Default zoom level\n        maxBounds: DC_BOUNDS, // Restrict panning to DC area\n        minZoom: 9, // Restrict zooming out too far\n      })\n\n      map.current.addControl(new mapboxgl.NavigationControl(), \"top-right\")\n\n      map.current.on(\"load\", () => {\n        setIsLoading(false)\n      })\n\n      map.current.on(\"error\", (e) => {\n        console.error(\"Mapbox GL error:\", e.error?.message || e)\n        setError(`Mapbox error: ${e.error?.message || \"Unknown map error\"}`)\n        setIsLoading(false)\n      })\n    } catch (e: any) {\n      console.error(\"Failed to initialize Mapbox map:\", e)\n      setError(`Failed to initialize map: ${e.message}`)\n      setIsLoading(false)\n    }\n\n    return () => {\n      map.current?.remove()\n      map.current = null\n    }\n  }, [effectiveApiKey])\n\n  useEffect(() => {\n    // Guard: If map instance doesn't exist or is still in its initial loading phase.\n    if (!map.current || isLoading) {\n      // It's too early to do anything with markers.\n      // If there were old markers and the map is re-initializing or properties cleared,\n      // ensure markers are cleared.\n      if (currentMarkers.length > 0) {\n        currentMarkers.forEach((marker) => marker.remove())\n        setCurrentMarkers([])\n      }\n\n      // Also clear any popups\n      if (currentPopups.length > 0) {\n        currentPopups.forEach((popup) => popup.remove())\n        setCurrentPopups([])\n      }\n      return\n    }\n\n    // At this point, map.current exists and isLoading is false (map has loaded).\n\n    // Clear all previously added markers and popups from the map.\n    currentMarkers.forEach((marker) => marker.remove())\n    currentPopups.forEach((popup) => popup.remove())\n\n    if (!properties || properties.length === 0) {\n      setCurrentMarkers([])\n      setCurrentPopups([])\n      return\n    }\n\n    const geocodePromises: Promise<mapboxgl.Marker | null>[] = []\n    const newMarkersFromLatLon: mapboxgl.Marker[] = []\n    const newPopups: mapboxgl.Popup[] = []\n    const bounds = new mapboxgl.LngLatBounds()\n\n    properties.forEach((listing) => {\n      if (listing.latitude && listing.longitude) {\n        // Create popup for this listing\n        const popup = new mapboxgl.Popup({ offset: 25, closeButton: false }).setHTML(`\n            <div class=\"p-2\">\n              <p class=\"font-medium\">${listing.address_line_1 || \"\"}, ${listing.city || \"\"}, ${listing.state || \"\"}</p>\n              <p class=\"text-sm text-gray-600\">Status: <span class=\"font-medium\">${listing.status || \"N/A\"}</span></p>\n              <p class=\"text-sm text-gray-600\">Builder: <span class=\"font-medium\">${listing.builder_name || \"N/A\"}</span></p>\n              <p class=\"text-sm text-gray-600\">Price: <span class=\"font-medium\">${formatPrice(listing.list_price)}</span></p>\n            </div>\n          `)\n\n        newPopups.push(popup)\n\n        // Create a custom marker element\n        const el = document.createElement(\"div\")\n        el.className = \"custom-marker\"\n        el.style.backgroundColor = getStatusColor(listing.status)\n        el.style.width = \"12px\"\n        el.style.height = \"12px\"\n        el.style.borderRadius = \"50%\"\n        el.style.border = \"2px solid white\"\n        el.style.boxShadow = \"0 0 2px rgba(0,0,0,0.3)\"\n\n        // Create the marker\n        const marker = new mapboxgl.Marker(el).setLngLat([listing.longitude, listing.latitude]).setPopup(popup) // Attach popup to marker\n\n        newMarkersFromLatLon.push(marker)\n        bounds.extend([listing.longitude, listing.latitude])\n      } else if (listing.address_line_1 && listing.city && listing.state && effectiveApiKey) {\n        const query = `${listing.address_line_1}, ${listing.city}, ${listing.state}`\n        const geocodeUrl = `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(\n          query,\n        )}.json?access_token=${effectiveApiKey}&limit=1`\n\n        geocodePromises.push(\n          fetch(geocodeUrl)\n            .then((response) => response.json())\n            .then((data) => {\n              if (data.features && data.features.length > 0) {\n                const [lng, lat] = data.features[0].center\n\n                // Create popup for this listing\n                const popup = new mapboxgl.Popup({ offset: 25, closeButton: false }).setHTML(`\n                    <div class=\"p-2\">\n                      <p class=\"font-medium\">${listing.address_line_1 || \"\"}, ${listing.city || \"\"}, ${listing.state || \"\"}</p>\n                      <p class=\"text-sm text-gray-600\">Status: <span class=\"font-medium\">${listing.status || \"N/A\"}</span></p>\n                      <p class=\"text-sm text-gray-600\">Builder: <span class=\"font-medium\">${listing.builder_name || \"N/A\"}</span></p>\n                      <p class=\"text-sm text-gray-600\">Price: <span class=\"font-medium\">${formatPrice(listing.list_price)}</span></p>\n                    </div>\n                  `)\n\n                newPopups.push(popup)\n\n                // Create a custom marker element\n                const el = document.createElement(\"div\")\n                el.className = \"custom-marker\"\n                el.style.backgroundColor = getStatusColor(listing.status)\n                el.style.width = \"12px\"\n                el.style.height = \"12px\"\n                el.style.borderRadius = \"50%\"\n                el.style.border = \"2px solid white\"\n                el.style.boxShadow = \"0 0 2px rgba(0,0,0,0.3)\"\n\n                // Create the marker\n                const marker = new mapboxgl.Marker(el).setLngLat([lng, lat]).setPopup(popup) // Attach popup to marker\n\n                bounds.extend([lng, lat])\n                return marker\n              }\n              console.warn(`Geocoding failed for: ${query}`)\n              return null\n            })\n            .catch((err) => {\n              console.error(`Geocoding error for ${query}:`, err)\n              return null\n            }),\n        )\n      }\n    })\n\n    Promise.all(geocodePromises).then((resolvedGeocodedMarkers) => {\n      const allMarkersToAdd: mapboxgl.Marker[] = [...newMarkersFromLatLon]\n      const validGeocodedMarkers = resolvedGeocodedMarkers.filter(Boolean) as mapboxgl.Marker[]\n      allMarkersToAdd.push(...validGeocodedMarkers)\n\n      if (map.current && allMarkersToAdd.length > 0) {\n        allMarkersToAdd.forEach((marker) => marker.addTo(map.current!))\n\n        // Only fit bounds if we have markers and they're within our DC area\n        if (!bounds.isEmpty()) {\n          // Ensure we don't zoom out beyond our restricted area\n          map.current.fitBounds(bounds, {\n            padding: 50,\n            maxZoom: 15,\n            duration: 1000,\n            // Ensure we don't go beyond our DC bounds\n            bounds: DC_BOUNDS,\n          })\n        }\n      }\n\n      setCurrentMarkers(allMarkersToAdd)\n      setCurrentPopups(newPopups)\n    })\n  }, [properties, effectiveApiKey, isLoading])\n\n  return (\n    <div className={`relative w-full h-full min-h-[300px] ${className || \"\"}`}>\n      <div ref={mapContainer} className=\"absolute top-0 bottom-0 w-full h-full\" />\n      {isLoading && (\n        <div className=\"absolute inset-0 flex items-center justify-center bg-white/50 backdrop-blur-sm z-10\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n          <p className=\"ml-2\">Loading map...</p>\n        </div>\n      )}\n      {!isLoading && error && (\n        <div className=\"absolute inset-0 flex flex-col items-center justify-center bg-red-50 p-4 z-10\">\n          <AlertTriangle className=\"h-8 w-8 text-red-500 mb-2\" />\n          <p className=\"text-red-700 text-center text-sm\">{error}</p>\n          {error.includes(\"Access Token\") && (\n            <p className=\"text-xs text-red-600 mt-1 text-center\">\n              Please verify your Mapbox Access Token in Settings &gt; Integrations.\n            </p>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default MapboxMap\n```\n\n## File: dkl-microapp-2-main/components/pill-input.tsx\n```typescript\n\"use client\"\n\nimport { useState, type KeyboardEvent } from \"react\"\nimport { Input } from \"@/components/ui/input\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { XIcon } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\ninterface PillInputProps {\n  value: string[]\n  onChange: (newValue: string[]) => void\n  placeholder?: string\n  className?: string\n  maxPills?: number\n}\n\nexport function PillInput({ value = [], onChange, placeholder = \"Add item...\", className, maxPills }: PillInputProps) {\n  const [inputValue, setInputValue] = useState(\"\")\n\n  const handleAddPill = () => {\n    const newPill = inputValue.trim()\n    if (newPill && !value.includes(newPill) && (!maxPills || value.length < maxPills)) {\n      onChange([...value, newPill])\n      setInputValue(\"\")\n    }\n  }\n\n  const handleRemovePill = (pillToRemove: string) => {\n    onChange(value.filter((pill) => pill !== pillToRemove))\n  }\n\n  const handleKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      event.preventDefault()\n      handleAddPill()\n    } else if (event.key === \"Backspace\" && inputValue === \"\" && value.length > 0) {\n      handleRemovePill(value[value.length - 1])\n    }\n  }\n\n  return (\n    <div className={cn(\"space-y-2\", className)}>\n      <div className=\"flex flex-wrap gap-2 mb-2\">\n        {value.map((pill) => (\n          <Badge key={pill} variant=\"secondary\" className=\"flex items-center gap-1\">\n            {pill}\n            <button\n              type=\"button\"\n              onClick={() => handleRemovePill(pill)}\n              className=\"rounded-full hover:bg-muted-foreground/20 p-0.5\"\n              aria-label={`Remove ${pill}`}\n            >\n              <XIcon className=\"h-3 w-3\" />\n            </button>\n          </Badge>\n        ))}\n      </div>\n      {(!maxPills || value.length < maxPills) && (\n        <div className=\"flex gap-2\">\n          <Input\n            type=\"text\"\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={handleKeyDown}\n            placeholder={placeholder}\n            className=\"attio-input flex-grow\"\n          />\n          <Button type=\"button\" onClick={handleAddPill} variant=\"outline\" size=\"sm\">\n            Add\n          </Button>\n        </div>\n      )}\n      {maxPills && value.length >= maxPills && (\n        <p className=\"text-xs text-muted-foreground\">Maximum number of items reached.</p>\n      )}\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/sidebar.tsx\n```typescript\nimport { MainNav } from \"@/components/main-nav\"\n\nexport function Sidebar() {\n  return (\n    <aside className=\"fixed inset-y-0 left-0 z-40 hidden w-48 flex-col border-r bg-background md:flex\">\n      <div className=\"flex h-12 items-center border-b px-4\">\n        <div className=\"flex items-center gap-x-2\">\n          <div className=\"h-6 w-6 rounded-md bg-primary\" />\n          <span className=\"text-sm font-semibold\">RE Market</span>\n        </div>\n      </div>\n      <div className=\"flex-1 overflow-auto py-4 px-3\">\n        <MainNav />\n      </div>\n    </aside>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/social-post-property-item.tsx\n```typescript\n\"use client\"\n\nimport { useState, useEffect, type ChangeEvent } from \"react\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport type { Database } from \"@/types/supabase\"\nimport { Button } from \"@/components/ui/button\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { Input } from \"@/components/ui/input\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { toast } from \"@/hooks/use-toast\"\nimport { ChevronDown, ChevronUp, Plus, XIcon, ImageIcon, AlertTriangle, Loader2, Wand2 } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\"\nimport { Label } from \"@/components/ui/label\"\nimport { generateDescriptionWithAI } from \"@/app/actions/ai-actions\"\n\ntype SocialPostProperty = Database[\"public\"][\"Tables\"][\"social_post_properties\"][\"Row\"] & {\n  properties: Database[\"public\"][\"Tables\"][\"listings\"][\"Row\"] | null\n}\n\ninterface SocialPostPropertyItemProps {\n  item: SocialPostProperty\n  postId: string\n  onUpdate: (updatedItem: Partial<SocialPostProperty>) => void\n}\n\nconst formatCurrency = (amount: number | null) => {\n  if (amount === null || amount === undefined) return \"N/A\"\n  return new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(amount)\n}\n\nconst IMAGE_BUCKET_NAME = \"social-post-images\"\n\nexport function SocialPostPropertyItem({ item, postId, onUpdate }: SocialPostPropertyItemProps) {\n  const [isExpanded, setIsExpanded] = useState(true) // Default to expanded\n  const [contacted, setContacted] = useState(item.contacted_complete)\n  const [imageComplete, setImageComplete] = useState(item.image_complete)\n  const [descriptionComplete, setDescriptionComplete] = useState(item.description_complete)\n\n  const [propertyDescription, setPropertyDescription] = useState(item.description || \"\")\n  const [imageUrls, setImageUrls] = useState<string[]>(item.image_urls || [])\n  const [isUploading, setIsUploading] = useState(false)\n  const [isSavingDesc, setIsSavingDesc] = useState(false)\n\n  const [showPromptDialog, setShowPromptDialog] = useState(false)\n  const [aiPrompt, setAiPrompt] = useState(\"\")\n  const [isGenerating, setIsGenerating] = useState(false)\n\n  const property = item.properties\n\n  useEffect(() => {\n    setContacted(item.contacted_complete)\n    setImageComplete(item.image_complete)\n    setDescriptionComplete(item.description_complete)\n    setPropertyDescription(item.description || \"\")\n    setImageUrls(item.image_urls || [])\n  }, [item])\n\n  const handleCheckboxChange = async (\n    field: \"contacted_complete\" | \"image_complete\" | \"description_complete\",\n    value: boolean,\n  ) => {\n    if (!item.id) return\n    const { error } = await supabase\n      .from(\"social_post_properties\")\n      .update({ [field]: value })\n      .eq(\"id\", item.id)\n\n    if (error) {\n      toast({ title: \"Error updating status\", description: error.message, variant: \"destructive\" })\n    } else {\n      if (field === \"contacted_complete\") setContacted(value)\n      if (field === \"image_complete\") setImageComplete(value)\n      if (field === \"description_complete\") setDescriptionComplete(value)\n      onUpdate({ id: item.id, [field]: value })\n    }\n  }\n\n  const handlePropertyDescriptionSave = async (descriptionToSave?: string) => {\n    if (!item.id) return\n    const currentDesc = descriptionToSave !== undefined ? descriptionToSave : propertyDescription\n    setIsSavingDesc(true)\n    try {\n      const { error } = await supabase\n        .from(\"social_post_properties\")\n        .update({ description: currentDesc })\n        .eq(\"id\", item.id)\n\n      if (error) {\n        toast({ title: \"Error saving description\", description: error.message, variant: \"destructive\" })\n      } else {\n        toast({ title: \"Description Saved\", description: \"Listing-specific description has been updated.\" })\n        onUpdate({ id: item.id, description: currentDesc })\n        if (descriptionToSave !== undefined) {\n          setPropertyDescription(currentDesc)\n        }\n      }\n    } catch (e: any) {\n      toast({ title: \"Error\", description: e.message || \"Could not save description.\", variant: \"destructive\" })\n    } finally {\n      setIsSavingDesc(false)\n    }\n  }\n\n  const handleImageUpload = async (event: ChangeEvent<HTMLInputElement>) => {\n    if (!event.target.files || event.target.files.length === 0) return\n    const file = event.target.files[0]\n    if (!item.id || !property?.id) return\n\n    setIsUploading(true)\n    const filePath = `${postId}/${item.id}/${Date.now()}-${file.name}`\n\n    try {\n      const { error: uploadError } = await supabase.storage.from(IMAGE_BUCKET_NAME).upload(filePath, file)\n      if (uploadError) throw uploadError\n\n      const { data: publicUrlData } = supabase.storage.from(IMAGE_BUCKET_NAME).getPublicUrl(filePath)\n      if (!publicUrlData?.publicUrl) throw new Error(\"Failed to get public URL for uploaded image.\")\n\n      const newImageUrls = [...imageUrls, publicUrlData.publicUrl]\n      setImageUrls(newImageUrls)\n\n      const { error: dbError } = await supabase\n        .from(\"social_post_properties\")\n        .update({ image_urls: newImageUrls })\n        .eq(\"id\", item.id)\n      if (dbError) throw dbError\n\n      toast({ title: \"Image Uploaded\", description: \"New image added successfully.\" })\n      onUpdate({ id: item.id, image_urls: newImageUrls })\n    } catch (error: any) {\n      console.error(\"Image upload error:\", error)\n      toast({ title: \"Upload Failed\", description: error.message || \"Could not upload image.\", variant: \"destructive\" })\n    } finally {\n      setIsUploading(false)\n      if (event.target) event.target.value = \"\"\n    }\n  }\n\n  const handleImageDelete = async (imageUrlToDelete: string) => {\n    if (!item.id) return\n    const bucketBaseUrl = `${supabase.storage.url}/object/public/${IMAGE_BUCKET_NAME}/`\n    const filePath = imageUrlToDelete.replace(bucketBaseUrl, \"\")\n\n    try {\n      const { error: deleteError } = await supabase.storage.from(IMAGE_BUCKET_NAME).remove([filePath])\n      if (deleteError) throw deleteError\n\n      const newImageUrls = imageUrls.filter((url) => url !== imageUrlToDelete)\n      setImageUrls(newImageUrls)\n\n      const { error: dbError } = await supabase\n        .from(\"social_post_properties\")\n        .update({ image_urls: newImageUrls })\n        .eq(\"id\", item.id)\n      if (dbError) throw dbError\n\n      toast({ title: \"Image Deleted\", description: \"Image removed successfully.\" })\n      onUpdate({ id: item.id, image_urls: newImageUrls })\n    } catch (error: any) {\n      console.error(\"Image delete error:\", error)\n      toast({ title: \"Delete Failed\", description: error.message || \"Could not delete image.\", variant: \"destructive\" })\n    }\n  }\n\n  const handleAiRewrite = async () => {\n    if (!propertyDescription.trim()) {\n      toast({ title: \"Nothing to rewrite\", description: \"Description is empty.\", variant: \"default\" })\n      return\n    }\n    console.log(\"Client: Starting AI Rewrite for description:\", propertyDescription.substring(0, 100) + \"...\")\n    setIsGenerating(true)\n    try {\n      const result = await generateDescriptionWithAI(\"rewrite\", propertyDescription)\n      console.log(\"Client: AI Rewrite result:\", result)\n\n      if (result.error) {\n        toast({ title: \"AI Rewrite Failed\", description: result.error, variant: \"destructive\" })\n      } else if (result.generatedText !== null) {\n        // Check for null explicitly\n        setPropertyDescription(result.generatedText)\n        toast({ title: \"Text Rewritten\", description: \"Description updated with AI suggestion. Save to persist.\" })\n      } else {\n        toast({\n          title: \"AI Rewrite\",\n          description: \"No text was generated or an unknown issue occurred.\",\n          variant: \"default\",\n        })\n      }\n    } catch (e: any) {\n      console.error(\"Client: AI Rewrite caught error:\", e)\n      toast({\n        title: \"AI Rewrite Error\",\n        description: e.message || \"An unexpected error occurred.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsGenerating(false)\n      console.log(\"Client: AI Rewrite finished.\")\n    }\n  }\n\n  const handleAiPromptSubmit = async () => {\n    if (!aiPrompt.trim()) {\n      toast({ title: \"Prompt is empty\", description: \"Please enter a prompt.\", variant: \"default\" })\n      return\n    }\n    console.log(\n      \"Client: Starting AI Prompt with prompt:\",\n      aiPrompt,\n      \"and context:\",\n      propertyDescription.substring(0, 100) + \"...\",\n    )\n    setIsGenerating(true)\n    setShowPromptDialog(false)\n    try {\n      const result = await generateDescriptionWithAI(\"prompt\", aiPrompt, propertyDescription)\n      console.log(\"Client: AI Prompt result:\", result)\n\n      if (result.error) {\n        toast({ title: \"AI Generation Failed\", description: result.error, variant: \"destructive\" })\n      } else if (result.generatedText !== null) {\n        // Check for null explicitly\n        setPropertyDescription(result.generatedText)\n        toast({ title: \"Text Generated\", description: \"Description updated with AI suggestion. Save to persist.\" })\n      } else {\n        toast({\n          title: \"AI Generation\",\n          description: \"No text was generated or an unknown issue occurred.\",\n          variant: \"default\",\n        })\n      }\n    } catch (e: any) {\n      console.error(\"Client: AI Prompt caught error:\", e)\n      toast({\n        title: \"AI Generation Error\",\n        description: e.message || \"An unexpected error occurred.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setAiPrompt(\"\")\n      setIsGenerating(false)\n      console.log(\"Client: AI Prompt finished.\")\n    }\n  }\n\n  if (!property) {\n    return (\n      <div className=\"p-3 border rounded-md bg-red-50 dark:bg-red-900/30 border-red-200 dark:border-red-700 text-red-700 dark:text-red-400 flex items-center\">\n        <AlertTriangle className=\"h-5 w-5 mr-2 flex-shrink-0\" />\n        Listing data missing for this item (ID: {item.property_id}).\n      </div>\n    )\n  }\n\n  const fullAddress = [\n    property.street_number,\n    property.street_direction,\n    property.street_name,\n    property.unit_number ? `#${property.unit_number}` : null,\n    property.city,\n    property.state,\n    property.zip_code,\n  ]\n    .filter(Boolean)\n    .join(\" \")\n    .replace(/\\s+/g, \" \")\n    .trim()\n\n  return (\n    <div className=\"border border-gray-200 dark:border-gray-700 rounded-md bg-white dark:bg-gray-800/30 shadow-sm\">\n      <div className=\"p-3 flex flex-col sm:flex-row justify-between items-start sm:items-center\">\n        <div className=\"flex-grow mb-2 sm:mb-0 pr-2\">\n          <p\n            className=\"text-[11px] text-muted-foreground mb-0.5 truncate\"\n            title={fullAddress || \"Address not available\"}\n          >\n            {fullAddress || \"Address not available\"}\n          </p>\n          <p className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">MLS: {property.mls_number || \"N/A\"}</p>\n          <div className=\"flex space-x-4 mt-1\">\n            <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n              Price: <span className=\"font-normal\">{formatCurrency(property.list_price)}</span>\n            </p>\n            <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n              Status: <span className=\"font-normal\">{property.status || \"N/A\"}</span>\n            </p>\n          </div>\n        </div>\n\n        <div className=\"flex flex-col items-center space-y-1.5 sm:space-y-0 sm:flex-row sm:space-x-3 mx-auto sm:mx-0 my-2 sm:my-0 px-2\">\n          {[\n            {\n              label: \"Contacted\",\n              state: contacted,\n              setter: (val: boolean) => handleCheckboxChange(\"contacted_complete\", val),\n            },\n            {\n              label: \"Image\",\n              state: imageComplete,\n              setter: (val: boolean) => handleCheckboxChange(\"image_complete\", val),\n            },\n            {\n              label: \"Desc.\",\n              state: descriptionComplete,\n              setter: (val: boolean) => handleCheckboxChange(\"description_complete\", val),\n            },\n          ].map((cb) => (\n            <div key={cb.label} className=\"flex flex-col items-center\">\n              <label className=\"text-[10px] text-gray-500 dark:text-gray-400 mb-0.5\">{cb.label}</label>\n              <Checkbox\n                checked={cb.state}\n                onCheckedChange={cb.setter}\n                className=\"rounded-[3px] data-[state=checked]:bg-blueishGreen-500 data-[state=checked]:border-blueishGreen-500 border-gray-400 dark:border-gray-500\"\n              />\n            </div>\n          ))}\n        </div>\n\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => setIsExpanded(!isExpanded)}\n          className=\"ml-auto sm:ml-2 p-1.5 self-start sm:self-center flex-shrink-0\"\n          aria-label={isExpanded ? \"Collapse property details\" : \"Expand property details\"}\n        >\n          {isExpanded ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n        </Button>\n      </div>\n\n      {isExpanded && (\n        <div className=\"p-3 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800/50\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-grow md:w-[60%] space-y-2\">\n              <label htmlFor={`prop-desc-${item.id}`} className=\"text-xs font-medium text-gray-700 dark:text-gray-300\">\n                Property-Specific Description\n              </label>\n              <Textarea\n                id={`prop-desc-${item.id}`}\n                value={propertyDescription}\n                onChange={(e) => setPropertyDescription(e.target.value)}\n                placeholder=\"Enter description for this property in the context of this social post...\"\n                className=\"min-h-[100px] text-sm bg-white dark:bg-gray-700/50\"\n              />\n              <div className=\"flex items-center justify-between mt-1\">\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button variant=\"ghost\" size=\"sm\" className=\"text-muted-foreground hover:text-primary px-2 py-1\">\n                      <Wand2 className=\"h-4 w-4 mr-1\" /> AI Tools\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-48 p-1\">\n                    <Button\n                      variant=\"ghost\"\n                      className=\"w-full justify-start text-sm font-normal px-2 py-1.5 h-auto\"\n                      onClick={handleAiRewrite}\n                      disabled={isGenerating || !propertyDescription.trim()}\n                    >\n                      {isGenerating && <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />} Rewrite\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      className=\"w-full justify-start text-sm font-normal px-2 py-1.5 h-auto\"\n                      onClick={() => setShowPromptDialog(true)}\n                      disabled={isGenerating}\n                    >\n                      {isGenerating && <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />} Prompt...\n                    </Button>\n                  </PopoverContent>\n                </Popover>\n                <Button\n                  size=\"sm\"\n                  onClick={() => handlePropertyDescriptionSave()}\n                  disabled={isSavingDesc || isGenerating}\n                  className=\"text-xs\"\n                >\n                  {isSavingDesc ? <Loader2 className=\"mr-1 h-3 w-3 animate-spin\" /> : null}\n                  Save Description\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"flex-grow md:w-[40%] space-y-2\">\n              <label className=\"text-xs font-medium text-gray-700 dark:text-gray-300\">Images</label>\n              <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-2 mb-2\">\n                {imageUrls.map((url) => (\n                  <div key={url} className=\"relative group aspect-square bg-gray-100 dark:bg-gray-700 rounded\">\n                    <img\n                      src={url || \"/placeholder.svg?width=100&height=100&query=property\"}\n                      alt=\"Listing image\"\n                      className=\"object-cover w-full h-full rounded\"\n                      onError={(e) => (e.currentTarget.src = \"/placeholder.svg?width=100&height=100\")}\n                    />\n                    <Button\n                      variant=\"destructive\"\n                      size=\"iconSm\"\n                      className=\"absolute top-1 right-1 h-5 w-5 p-0 opacity-0 group-hover:opacity-100 focus:opacity-100\"\n                      onClick={() => handleImageDelete(url)}\n                      aria-label=\"Delete image\"\n                    >\n                      <XIcon className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                ))}\n                <label\n                  htmlFor={`img-upload-${item.id}`}\n                  className={cn(\n                    \"aspect-square flex flex-col items-center justify-center border-2 border-dashed border-gray-300 dark:border-gray-600 rounded cursor-pointer hover:border-blueishGreen-500 dark:hover:border-blueishGreen-400 transition-colors\",\n                    isUploading && \"opacity-50 cursor-not-allowed\",\n                  )}\n                >\n                  {isUploading ? (\n                    <Loader2 className=\"h-6 w-6 animate-spin text-blueishGreen-500\" />\n                  ) : (\n                    <>\n                      <Plus className=\"h-6 w-6 text-gray-400 dark:text-gray-500\" />\n                      <span className=\"text-[10px] text-muted-foreground mt-1\">Add Image</span>\n                    </>\n                  )}\n                  <Input\n                    id={`img-upload-${item.id}`}\n                    type=\"file\"\n                    className=\"hidden\"\n                    onChange={handleImageUpload}\n                    accept=\"image/png, image/jpeg, image/gif, image/webp\"\n                    disabled={isUploading}\n                  />\n                </label>\n              </div>\n              {imageUrls.length === 0 && !isUploading && (\n                <div className=\"text-center py-4 text-xs text-muted-foreground\">\n                  <ImageIcon className=\"mx-auto h-8 w-8 mb-1 text-gray-400 dark:text-gray-500\" />\n                  No images added yet.\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n      <Dialog open={showPromptDialog} onOpenChange={setShowPromptDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Generate with AI Prompt</DialogTitle>\n          </DialogHeader>\n          <div className=\"py-4 space-y-2\">\n            <Label htmlFor=\"ai-prompt-input\">Your Prompt</Label>\n            <Textarea\n              id=\"ai-prompt-input\"\n              value={aiPrompt}\n              onChange={(e) => setAiPrompt(e.target.value)}\n              placeholder=\"e.g., Write a catchy description focusing on the new kitchen...\"\n              className=\"min-h-[80px]\"\n            />\n            {propertyDescription && (\n              <p className=\"text-xs text-muted-foreground\">\n                Current description will be used as context if relevant to your prompt.\n              </p>\n            )}\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowPromptDialog(false)} disabled={isGenerating}>\n              Cancel\n            </Button>\n            <Button onClick={handleAiPromptSubmit} disabled={isGenerating || !aiPrompt.trim()}>\n              {isGenerating && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              Generate\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/theme-provider.tsx\n```typescript\n'use client'\n\nimport * as React from 'react'\nimport {\n  ThemeProvider as NextThemesProvider,\n  type ThemeProviderProps,\n} from 'next-themes'\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n```\n\n## File: dkl-microapp-2-main/components/user-nav.tsx\n```typescript\n\"use client\"\n\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { LogOut, Settings, User } from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport function UserNav() {\n  const { user, signOut } = useAuth()\n\n  if (!user) return null\n\n  const initials = user.email ? user.email.substring(0, 2).toUpperCase() : \"U\"\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n          <Avatar className=\"h-8 w-8\">\n            <AvatarFallback className=\"text-xs\">{initials}</AvatarFallback>\n          </Avatar>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n        <DropdownMenuLabel className=\"font-normal\">\n          <div className=\"flex flex-col space-y-1\">\n            <p className=\"text-sm font-medium leading-none\">{user.email}</p>\n            <p className=\"text-xs leading-none text-muted-foreground\">{user.id.substring(0, 8)}</p>\n          </div>\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuGroup>\n          <DropdownMenuItem asChild>\n            <Link href=\"/profile\">\n              <User className=\"mr-2 h-4 w-4\" />\n              <span>Profile</span>\n            </Link>\n          </DropdownMenuItem>\n          <DropdownMenuItem asChild>\n            <Link href=\"/settings\">\n              <Settings className=\"mr-2 h-4 w-4\" />\n              <span>Settings</span>\n            </Link>\n          </DropdownMenuItem>\n        </DropdownMenuGroup>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem onClick={() => signOut()}>\n          <LogOut className=\"mr-2 h-4 w-4\" />\n          <span>Log out</span>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/contexts/auth-context.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\n\nimport { createContext, useContext, useEffect, useState } from \"react\"\nimport type { User, Session } from \"@supabase/supabase-js\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { useRouter } from \"next/navigation\"\n\ninterface AuthContextType {\n  user: User | null\n  session: Session | null\n  loading: boolean\n  signIn: (email: string, password: string) => Promise<void>\n  signUp: (email: string, password: string) => Promise<void>\n  signOut: () => Promise<void>\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null)\n  const [session, setSession] = useState<Session | null>(null)\n  const [loading, setLoading] = useState(true)\n  const router = useRouter()\n\n  useEffect(() => {\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      setSession(session)\n      setUser(session?.user ?? null)\n      setLoading(false)\n\n      if (event === \"SIGNED_OUT\") {\n        router.push(\"/login\")\n      }\n    })\n\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session)\n      setUser(session?.user ?? null)\n      setLoading(false)\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [router])\n\n  const signIn = async (email: string, password: string) => {\n    const { error } = await supabase.auth.signInWithPassword({ email, password })\n    if (error) throw error\n    router.push(\"/dashboard\")\n  }\n\n  const signUp = async (email: string, password: string) => {\n    const { error } = await supabase.auth.signUp({ email, password })\n    if (error) throw error\n  }\n\n  const signOut = async () => {\n    const { error } = await supabase.auth.signOut()\n    if (error) throw error\n  }\n\n  return (\n    <AuthContext.Provider value={{ user, session, loading, signIn, signUp, signOut }}>{children}</AuthContext.Provider>\n  )\n}\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\")\n  }\n  return context\n}\n```\n\n## File: dkl-microapp-2-main/hooks/use-toast.ts\n```typescript\n\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type { ToastActionElement, ToastProps } from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 5\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_VALUE\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) => (t.id === action.toast.id ? { ...t, ...action.toast } : t)),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n```\n\n## File: dkl-microapp-2-main/lib/supabase/client.ts\n```typescript\nimport { createClient } from \"@supabase/supabase-js\"\nimport type { Database } from \"@/types/supabase\"\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\nif (!supabaseUrl) {\n  console.error(\"Supabase URL is not defined. Please check your NEXT_PUBLIC_SUPABASE_URL environment variable.\")\n  // throw new Error(\"Supabase URL is not defined.\"); // Optionally throw to halt execution\n}\n\nif (!supabaseAnonKey) {\n  console.error(\n    \"Supabase Anon Key is not defined. Please check your NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable.\",\n  )\n  // throw new Error(\"Supabase Anon Key is not defined.\"); // Optionally throw\n}\n\n// The export should only happen if the keys are defined, or handle the error gracefully.\n// For Next.js, we'll proceed with the export, relying on the console errors for debugging.\nexport const supabase = createClient<Database>(supabaseUrl!, supabaseAnonKey!)\n```\n\n## File: dkl-microapp-2-main/lib/supabase/server.ts\n```typescript\nimport { createClient } from \"@supabase/supabase-js\"\nimport { cookies } from \"next/headers\"\nimport type { Database } from \"@/types/supabase\"\n\nexport async function createServerClient() {\n  const cookieStore = cookies()\n\n  return createClient<Database>(process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!, {\n    cookies: {\n      get(name: string) {\n        return cookieStore.get(name)?.value\n      },\n    },\n  })\n}\n```\n\n## File: dkl-microapp-2-main/lib/builder-fields.ts\n```typescript\nimport type { Database } from \"@/types/supabase\"\n\ntype BuilderRowKeys = keyof Database[\"public\"][\"Tables\"][\"builders\"][\"Row\"]\n\nexport interface BuilderFieldDefinition {\n  value: BuilderRowKeys\n  label: string\n  typeHint: \"string\" | \"number\" | \"boolean\" | \"date\" | \"array_string\" | \"json\"\n}\n\nexport const builderTableColumns: readonly BuilderFieldDefinition[] = [\n  { value: \"name\", label: \"Builder Name\", typeHint: \"string\" },\n  { value: \"company_name\", label: \"Company Name\", typeHint: \"string\" },\n  { value: \"phone\", label: \"Phone\", typeHint: \"string\" },\n  { value: \"email\", label: \"Email\", typeHint: \"string\" },\n  { value: \"website\", label: \"Website\", typeHint: \"string\" },\n  { value: \"address\", label: \"Address\", typeHint: \"string\" },\n  { value: \"city\", label: \"City\", typeHint: \"string\" },\n  { value: \"state\", label: \"State\", typeHint: \"string\" },\n  { value: \"zip_code\", label: \"Zip Code\", typeHint: \"string\" },\n  { value: \"years_in_business\", label: \"Years In Business\", typeHint: \"number\" },\n  { value: \"total_projects\", label: \"Total Projects\", typeHint: \"number\" },\n  { value: \"active_projects\", label: \"Active Projects\", typeHint: \"number\" },\n  { value: \"specialties\", label: \"Specialties\", typeHint: \"array_string\" },\n  { value: \"price_range_min\", label: \"Price Range Min\", typeHint: \"number\" },\n  { value: \"price_range_max\", label: \"Price Range Max\", typeHint: \"number\" },\n  { value: \"rating\", label: \"Rating\", typeHint: \"number\" },\n  { value: \"notes\", label: \"Notes\", typeHint: \"string\" },\n  { value: \"metadata\", label: \"Metadata\", typeHint: \"json\" },\n] as const\n\nexport type MappedBuilderDbColumn = BuilderFieldDefinition[\"value\"] | \"ignore_field\"\n```\n\n## File: dkl-microapp-2-main/lib/color-utils.ts\n```typescript\n/**\n * Converts a HEX color value to HSL. Conversion formula\n * adapted from https://stackoverflow.com/a/9493060.\n * Assumes hex is a valid color string.\n * @param   {string}  hex       The hex color to convert\n * @returns {string | null}     The HSL representation \"H S% L%\" or null on error\n */\nexport function hexToHsl(hex: string): string | null {\n  let r = 0,\n    g = 0,\n    b = 0\n  // 3 digits\n  if (hex.length == 4) {\n    r = Number.parseInt(hex[1] + hex[1], 16)\n    g = Number.parseInt(hex[2] + hex[2], 16)\n    b = Number.parseInt(hex[3] + hex[3], 16)\n  }\n  // 6 digits\n  else if (hex.length == 7) {\n    r = Number.parseInt(hex.substring(1, 3), 16)\n    g = Number.parseInt(hex.substring(3, 5), 16)\n    b = Number.parseInt(hex.substring(5, 7), 16)\n  } else {\n    return null // Invalid hex format\n  }\n\n  r /= 255\n  g /= 255\n  b /= 255\n  const max = Math.max(r, g, b)\n  const min = Math.min(r, g, b)\n  let h = 0,\n    s = 0,\n    l = (max + min) / 2\n\n  if (max == min) {\n    h = s = 0 // achromatic\n  } else {\n    const d = max - min\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min)\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0)\n        break\n      case g:\n        h = (b - r) / d + 2\n        break\n      case b:\n        h = (r - g) / d + 4\n        break\n    }\n    h /= 6\n  }\n\n  h = Math.round(h * 360)\n  s = Math.round(s * 100)\n  l = Math.round(l * 100)\n\n  return `${h} ${s}% ${l}%`\n}\n\n/**\n * Converts an HSL color value to HEX. Conversion formula\n * adapted from https://stackoverflow.com/a/9493060.\n * Assumes h, s, and l are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   {string}  hsl       The HSL color \"H S% L%\"\n * @returns {string | null}     The HEX representation or null on error\n */\nexport function hslToHex(hsl: string): string | null {\n  const hslMatch = hsl.match(/(\\d+)\\s+(\\d+)%\\s+(\\d+)%/)\n  if (!hslMatch) return null\n\n  let h = Number.parseInt(hslMatch[1])\n  let s = Number.parseInt(hslMatch[2])\n  let l = Number.parseInt(hslMatch[3])\n\n  h /= 360\n  s /= 100\n  l /= 100\n\n  let r, g, b\n  if (s == 0) {\n    r = g = b = l // achromatic\n  } else {\n    const hue2rgb = (p: number, q: number, t: number) => {\n      if (t < 0) t += 1\n      if (t > 1) t -= 1\n      if (t < 1 / 6) return p + (q - p) * 6 * t\n      if (t < 1 / 2) return q\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6\n      return p\n    }\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s\n    const p = 2 * l - q\n    r = hue2rgb(p, q, h + 1 / 3)\n    g = hue2rgb(p, q, h)\n    b = hue2rgb(p, q, h - 1 / 3)\n  }\n\n  const toHex = (x: number) => {\n    const hex = Math.round(x * 255).toString(16)\n    return hex.length == 1 ? \"0\" + hex : hex\n  }\n\n  return `#${toHex(r)}${toHex(g)}${toHex(b)}`\n}\n```\n\n## File: dkl-microapp-2-main/lib/listing-fields.ts\n```typescript\nimport type { Database } from \"@/types/supabase\"\n\n// Extracting keys from a specific table's Row type\ntype ListingRowKeys = keyof Database[\"public\"][\"Tables\"][\"listings\"][\"Row\"]\n\n// Define a structure for our mapping options\nexport interface ListingFieldDefinition {\n  value: ListingRowKeys\n  label: string\n  typeHint: \"string\" | \"number\" | \"boolean\" | \"date\" | \"array_string\" | \"json\" // Add more as needed\n}\n\n// Manually define user-friendly labels and type hints for each listing column\nexport const listingTableColumns: ListingFieldDefinition[] = [\n  { value: \"mls_number\", label: \"MLS Number\", typeHint: \"string\" },\n  { value: \"status\", label: \"Status\", typeHint: \"string\" },\n  { value: \"type\", label: \"Type\", typeHint: \"string\" },\n  { value: \"dom\", label: \"DOM (Days on Market)\", typeHint: \"number\" },\n  { value: \"cdom\", label: \"CDOM (Cumulative Days on Market)\", typeHint: \"number\" },\n  { value: \"list_date\", label: \"List Date\", typeHint: \"date\" },\n  { value: \"off_market_date\", label: \"Off Market Date\", typeHint: \"date\" },\n  { value: \"settled_date\", label: \"Settled Date\", typeHint: \"date\" },\n  { value: \"original_price\", label: \"Original Price\", typeHint: \"number\" },\n  { value: \"list_price\", label: \"List Price\", typeHint: \"number\" },\n  { value: \"sold_price\", label: \"Sold Price\", typeHint: \"number\" },\n  { value: \"city\", label: \"City\", typeHint: \"string\" },\n  { value: \"state\", label: \"State\", typeHint: \"string\" },\n  { value: \"zip_code\", label: \"Zip Code\", typeHint: \"string\" },\n  { value: \"county\", label: \"County\", typeHint: \"string\" },\n  { value: \"subdivision\", label: \"Subdivision\", typeHint: \"string\" },\n  { value: \"list_agent_name\", label: \"List Agent Name\", typeHint: \"string\" },\n  { value: \"list_office_name\", label: \"List Office Name\", typeHint: \"string\" },\n  { value: \"acres_total\", label: \"Acres Total\", typeHint: \"number\" },\n  { value: \"land_use_code\", label: \"Land Use Code\", typeHint: \"string\" },\n  { value: \"hoa\", label: \"HOA\", typeHint: \"boolean\" },\n  { value: \"association_fee_frequency\", label: \"Association Fee Frequency\", typeHint: \"string\" },\n  { value: \"property_condition\", label: \"Listing Condition\", typeHint: \"string\" },\n  { value: \"bedrooms\", label: \"Bedrooms\", typeHint: \"number\" },\n  { value: \"baths_full\", label: \"Baths Full\", typeHint: \"number\" },\n  { value: \"baths_half\", label: \"Baths Half\", typeHint: \"number\" },\n  { value: \"style\", label: \"Style\", typeHint: \"string\" },\n  { value: \"basement\", label: \"Basement\", typeHint: \"boolean\" },\n  { value: \"garage_spaces\", label: \"Garage Spaces\", typeHint: \"number\" },\n  { value: \"fireplace\", label: \"Fireplace\", typeHint: \"boolean\" },\n  { value: \"new_construction\", label: \"New Construction (Y/N)\", typeHint: \"boolean\" },\n  { value: \"new_construction_details\", label: \"New Construction Details\", typeHint: \"string\" },\n  { value: \"model_name\", label: \"Model Name\", typeHint: \"string\" },\n  { value: \"builder_id\", label: \"Builder ID\", typeHint: \"string\" },\n  { value: \"metadata\", label: \"Metadata\", typeHint: \"json\" },\n  { value: \"in_social_queue\", label: \"In Social Queue\", typeHint: \"boolean\" },\n  { value: \"owner_name\", label: \"Owner Name\", typeHint: \"string\" },\n  { value: \"construction_completed_yn\", label: \"Construction Completed (Y/N)\", typeHint: \"boolean\" },\n  { value: \"year_built\", label: \"Year Built\", typeHint: \"number\" },\n  { value: \"year_built_source\", label: \"Year Built Source\", typeHint: \"string\" },\n  { value: \"imported_builder_name\", label: \"Imported Builder Name\", typeHint: \"string\" },\n  { value: \"occupant_type\", label: \"Occupant Type\", typeHint: \"string\" },\n  { value: \"occupant_name\", label: \"Occupant Name\", typeHint: \"string\" },\n  { value: \"previous_list_price\", label: \"Previous List Price\", typeHint: \"number\" },\n  { value: \"architect_name\", label: \"Architect Name\", typeHint: \"string\" },\n  { value: \"structure_type\", label: \"Structure Type\", typeHint: \"string\" },\n  { value: \"block_lot\", label: \"Block/Lot\", typeHint: \"string\" },\n  { value: \"remarks_private\", label: \"Remarks - Private\", typeHint: \"string\" },\n  { value: \"remarks_public\", label: \"Remarks - Public\", typeHint: \"string\" },\n  { value: \"year_major_reno_remodel\", label: \"Year Major Reno/Remodel\", typeHint: \"number\" },\n  { value: \"change_info\", label: \"Change Info\", typeHint: \"string\" },\n  { value: \"close_date\", label: \"Close Date\", typeHint: \"date\" },\n  { value: \"close_price\", label: \"Close Price\", typeHint: \"number\" },\n  { value: \"close_sale_type\", label: \"Close Sale Type\", typeHint: \"string\" },\n  { value: \"foundation_details\", label: \"Foundation Details\", typeHint: \"string\" },\n  { value: \"land_assessed_value\", label: \"Land Assessed Value\", typeHint: \"number\" },\n  { value: \"list_picture_url\", label: \"List Picture URL\", typeHint: \"string\" },\n  { value: \"lot_features\", label: \"Lot Features\", typeHint: \"array_string\" },\n  { value: \"lot_size_sqft\", label: \"Lot Size SqFt\", typeHint: \"number\" },\n  { value: \"address_line_1\", label: \"Address Line 1\", typeHint: \"string\" },\n  { value: \"latitude\", label: \"Latitude\", typeHint: \"number\" },\n  { value: \"longitude\", label: \"Longitude\", typeHint: \"number\" },\n  { value: \"last_sold_date\", label: \"Last Sold Date\", typeHint: \"date\" },\n  { value: \"last_sold_price\", label: \"Last Sold Price\", typeHint: \"number\" },\n  { value: \"property_type\", label: \"Listing Type\", typeHint: \"string\" },\n  { value: \"description\", label: \"Description\", typeHint: \"string\" },\n]\n\nexport type MappedDbColumn = ListingFieldDefinition[\"value\"] | \"ignore_field\"\n```\n\n## File: dkl-microapp-2-main/lib/supabase.ts\n```typescript\nimport { createClient } from \"@supabase/supabase-js\"\nimport type { Database } from \"@/types/supabase\"\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n\n// Create a single supabase client for interacting with your database\nexport const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey)\n\n// Server-side client with service role for admin operations\nexport const createServerSupabaseClient = () => {\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\n  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!\n  return createClient<Database>(supabaseUrl, supabaseServiceKey)\n}\n```\n\n## File: dkl-microapp-2-main/lib/utils.ts\n```typescript\nimport { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function formatCurrency(value: number | null | undefined): string {\n  if (value === null || value === undefined) return \"-\"\n  return new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    maximumFractionDigits: 0,\n  }).format(value)\n}\n\nexport function formatNumber(value: number | null | undefined): string {\n  if (value === null || value === undefined) return \"-\"\n  return new Intl.NumberFormat(\"en-US\").format(value)\n}\n\nexport function formatDate(date: string | null | undefined): string {\n  if (!date) return \"-\"\n  try {\n    // Attempt to parse common date formats, including those with slashes or hyphens\n    const parsedDate = new Date(date.replace(/-/g, \"/\"))\n    if (isNaN(parsedDate.getTime())) {\n      // Handle cases where date might be just a year or invalid\n      if (/^\\d{4}$/.test(date)) return date // If it's just a year, return it\n      return \"-\" // Invalid date\n    }\n    return parsedDate.toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    })\n  } catch (error) {\n    console.warn(`Could not parse date: ${date}`, error)\n    return \"-\"\n  }\n}\n\nexport function getFullAddress(listing: any): string {\n  const parts = [\n    listing.street_number,\n    listing.street_direction,\n    listing.street_name,\n    listing.unit_number ? `Unit ${listing.unit_number}` : \"\",\n  ]\n    .filter(Boolean)\n    .join(\" \")\n\n  const cityStateZip = [listing.city, listing.state, listing.zip_code].filter(Boolean).join(\", \")\n\n  return [parts, cityStateZip].filter(Boolean).join(\", \")\n}\n\nexport function getStatusColor(status: string | null): string {\n  switch (status?.toLowerCase()) {\n    case \"active\":\n      return \"bg-green-100 text-green-800\"\n    case \"pending\":\n      return \"bg-yellow-100 text-yellow-800\"\n    case \"sold\":\n      return \"bg-blue-100 text-blue-800\"\n    case \"under contract\":\n      return \"bg-purple-100 text-purple-800\"\n    case \"coming soon\":\n      return \"bg-orange-100 text-orange-800\"\n    default:\n      return \"bg-gray-100 text-gray-800\"\n  }\n}\n\nexport function parseCSVValue(\n  value: string | null | undefined,\n  targetTypeHint?: \"string\" | \"number\" | \"boolean\" | \"date\" | \"array_string\",\n): any {\n  if (value === null || value === undefined || value.trim() === \"\") return null\n\n  // Remove dollar signs and commas for currency/numbers before other parsing\n  const cleanedValue = value.replace(/[$,]/g, \"\")\n\n  if (targetTypeHint === \"array_string\") {\n    return value\n      .split(\",\")\n      .map((item) => item.trim())\n      .filter(Boolean)\n  }\n\n  // Convert Yes/No to boolean\n  if (cleanedValue.toLowerCase() === \"yes\") return true\n  if (cleanedValue.toLowerCase() === \"no\") return false\n\n  // Try to parse as number if it looks like one or hinted\n  if (targetTypeHint === \"number\" || /^-?\\d+(\\.\\d+)?$/.test(cleanedValue)) {\n    const num = Number.parseFloat(cleanedValue)\n    if (!isNaN(num)) {\n      return num\n    }\n  }\n\n  // Try to parse as date if hinted\n  if (targetTypeHint === \"date\") {\n    try {\n      const dateVal = new Date(value.replace(/-/g, \"/\")) // Normalize separators\n      if (!isNaN(dateVal.getTime())) {\n        return dateVal.toISOString()\n      }\n    } catch (e) {\n      /* ignore, will return original string */\n    }\n  }\n\n  // If it's a boolean string \"true\" or \"false\"\n  if (cleanedValue.toLowerCase() === \"true\") return true\n  if (cleanedValue.toLowerCase() === \"false\") return false\n\n  // Default to string\n  return value.trim()\n}\n\nexport function toTitleCase(str: string | null | undefined): string | null {\n  if (!str) return null\n  // Handle cases like \"McKinley\" or \"O'Malley\" by not lowercasing the entire string first.\n  // This regex capitalizes the first letter of each word.\n  // It also handles hyphens by capitalizing the letter after a hyphen.\n  return str\n    .replace(/\\b([a-z'])([a-z']*)\\b|\\b([A-Z'])([A-Z']*)\\b/g, (match, firstLower, restLower, firstUpper, restUpper) => {\n      if (firstLower) {\n        return firstLower.toUpperCase() + (restLower || \"\")\n      }\n      if (firstUpper) {\n        // If it's already mostly uppercase (e.g., an acronym), leave it, unless it's a single char.\n        // Or if it's a mixed case word that starts with uppercase.\n        if ((restUpper && restUpper.match(/[a-z]/)) || !restUpper || restUpper.length === 0) {\n          return firstUpper + (restUpper || \"\")\n        }\n        // If it's all caps and longer than 1 char, convert to title case.\n        if (restUpper && !restUpper.match(/[a-z]/) && (firstUpper + restUpper).length > 1) {\n          return firstUpper + restUpper.toLowerCase()\n        }\n        return firstUpper + (restUpper || \"\")\n      }\n      return match\n    })\n    .replace(/([a-zA-Z])(?:-|_)+([a-zA-Z])/g, (match, p1, p2) => p1 + \"-\" + p2.toUpperCase()) // Capitalize after hyphen\n}\n\n/**\n * Normalizes a CSV header string.\n * - Trims whitespace.\n * - Converts to uppercase.\n * - Replaces sequences of non-alphanumeric characters (excluding underscore) with a single underscore.\n * - Removes leading and trailing underscores.\n * Example: \"  List Price ($)  \" -> \"LIST_PRICE\"\n * Example: \"MLS #\" -> \"MLS_\"\n */\nexport function normalizeHeader(header: string): string {\n  if (!header) return \"\"\n  return header\n    .trim()\n    .toUpperCase()\n    .replace(/[^A-Z0-9_]+/g, \"_\") // Replace one or more non-alphanumeric (A-Z, 0-9) or non-underscore chars with a single underscore\n    .replace(/^_|_$/g, \"\") // Remove leading/trailing underscores\n}\n```\n\n## File: dkl-microapp-2-main/public/placeholder-logo.svg\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"215\" height=\"48\" fill=\"none\"><path fill=\"#000\" d=\"M57.588 9.6h6L73.828 38h-5.2l-2.36-6.88h-11.36L52.548 38h-5.2l10.24-28.4Zm7.16 17.16-4.16-12.16-4.16 12.16h8.32Zm23.694-2.24c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.486-7.72.12 3.4c.534-1.227 1.307-2.173 2.32-2.84 1.04-.693 2.267-1.04 3.68-1.04 1.494 0 2.76.387 3.8 1.16 1.067.747 1.827 1.813 2.28 3.2.507-1.44 1.294-2.52 2.36-3.24 1.094-.747 2.414-1.12 3.96-1.12 1.414 0 2.64.307 3.68.92s1.84 1.52 2.4 2.72c.56 1.2.84 2.667.84 4.4V38h-4.96V25.92c0-1.813-.293-3.187-.88-4.12-.56-.96-1.413-1.44-2.56-1.44-.906 0-1.68.213-2.32.64-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.84-.48 3.04V38h-4.56V25.92c0-1.2-.133-2.213-.4-3.04-.24-.827-.626-1.453-1.16-1.88-.506-.427-1.133-.64-1.88-.64-.906 0-1.68.227-2.32.68-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.827-.48 3V38h-4.96V16.8h4.48Zm26.723 10.6c0-2.24.427-4.187 1.28-5.84.854-1.68 2.067-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.84 0 3.494.413 4.96 1.24 1.467.827 2.64 2.08 3.52 3.76.88 1.653 1.347 3.693 1.4 6.12v1.32h-15.08c.107 1.813.614 3.227 1.52 4.24.907.987 2.134 1.48 3.68 1.48.987 0 1.88-.253 2.68-.76a4.803 4.803 0 0 0 1.84-2.2l5.08.36c-.64 2.027-1.84 3.64-3.6 4.84-1.733 1.173-3.733 1.76-6 1.76-2.08 0-3.906-.453-5.48-1.36-1.573-.907-2.786-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84Zm15.16-2.04c-.213-1.733-.76-3.013-1.64-3.84-.853-.827-1.893-1.24-3.12-1.24-1.44 0-2.6.453-3.48 1.36-.88.88-1.44 2.12-1.68 3.72h9.92ZM163.139 9.6V38h-5.04V9.6h5.04Zm8.322 7.2.24 5.88-.64-.36c.32-2.053 1.094-3.56 2.32-4.52 1.254-.987 2.787-1.48 4.6-1.48 2.32 0 4.107.733 5.36 2.2 1.254 1.44 1.88 3.387 1.88 5.84V38h-4.96V25.92c0-1.253-.12-2.28-.36-3.08-.24-.8-.64-1.413-1.2-1.84-.533-.427-1.253-.64-2.16-.64-1.44 0-2.573.48-3.4 1.44-.8.933-1.2 2.307-1.2 4.12V38h-4.96V16.8h4.48Zm30.003 7.72c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.443 8.16V38h-5.6v-5.32h5.6Z\"/><path fill=\"#171717\" fill-rule=\"evenodd\" d=\"m7.839 40.783 16.03-28.054L20 6 0 40.783h7.839Zm8.214 0H40L27.99 19.894l-4.02 7.032 3.976 6.914H20.02l-3.967 6.943Z\" clip-rule=\"evenodd\"/></svg>\n```\n\n## File: dkl-microapp-2-main/public/placeholder.svg\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1200\" height=\"1200\" fill=\"none\"><rect width=\"1200\" height=\"1200\" fill=\"#EAEAEA\" rx=\"3\"/><g opacity=\".5\"><g opacity=\".5\"><path fill=\"#FAFAFA\" d=\"M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z\"/><path stroke=\"#C9C9C9\" stroke-width=\"2.418\" d=\"M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z\"/></g><path stroke=\"url(#a)\" stroke-width=\"2.418\" d=\"M0-1.209h553.581\" transform=\"scale(1 -1) rotate(45 1163.11 91.165)\"/><path stroke=\"url(#b)\" stroke-width=\"2.418\" d=\"M404.846 598.671h391.726\"/><path stroke=\"url(#c)\" stroke-width=\"2.418\" d=\"M599.5 795.742V404.017\"/><path stroke=\"url(#d)\" stroke-width=\"2.418\" d=\"m795.717 796.597-391.441-391.44\"/><path fill=\"#fff\" d=\"M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z\"/><g clip-path=\"url(#e)\"><path fill=\"#666\" fill-rule=\"evenodd\" d=\"M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z\" clip-rule=\"evenodd\"/></g><path stroke=\"#C9C9C9\" stroke-width=\"2.418\" d=\"M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z\"/></g><defs><linearGradient id=\"a\" x1=\"554.061\" x2=\"-.48\" y1=\".083\" y2=\".087\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#C9C9C9\" stop-opacity=\"0\"/><stop offset=\".208\" stop-color=\"#C9C9C9\"/><stop offset=\".792\" stop-color=\"#C9C9C9\"/><stop offset=\"1\" stop-color=\"#C9C9C9\" stop-opacity=\"0\"/></linearGradient><linearGradient id=\"b\" x1=\"796.912\" x2=\"404.507\" y1=\"599.963\" y2=\"599.965\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#C9C9C9\" stop-opacity=\"0\"/><stop offset=\".208\" stop-color=\"#C9C9C9\"/><stop offset=\".792\" stop-color=\"#C9C9C9\"/><stop offset=\"1\" stop-color=\"#C9C9C9\" stop-opacity=\"0\"/></linearGradient><linearGradient id=\"c\" x1=\"600.792\" x2=\"600.794\" y1=\"403.677\" y2=\"796.082\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#C9C9C9\" stop-opacity=\"0\"/><stop offset=\".208\" stop-color=\"#C9C9C9\"/><stop offset=\".792\" stop-color=\"#C9C9C9\"/><stop offset=\"1\" stop-color=\"#C9C9C9\" stop-opacity=\"0\"/></linearGradient><linearGradient id=\"d\" x1=\"404.85\" x2=\"796.972\" y1=\"403.903\" y2=\"796.02\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#C9C9C9\" stop-opacity=\"0\"/><stop offset=\".208\" stop-color=\"#C9C9C9\"/><stop offset=\".792\" stop-color=\"#C9C9C9\"/><stop offset=\"1\" stop-color=\"#C9C9C9\" stop-opacity=\"0\"/></linearGradient><clipPath id=\"e\"><path fill=\"#fff\" d=\"M581.364 580.535h38.689v38.689h-38.689z\"/></clipPath></defs></svg>\n```\n\n## File: dkl-microapp-2-main/styles/globals.css\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n@layer utilities {\n  .text-balance {\n    text-wrap: balance;\n  }\n}\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 0 0% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 0 0% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 0 0% 3.9%;\n    --primary: 0 0% 9%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 0 0% 96.1%;\n    --secondary-foreground: 0 0% 9%;\n    --muted: 0 0% 96.1%;\n    --muted-foreground: 0 0% 45.1%;\n    --accent: 0 0% 96.1%;\n    --accent-foreground: 0 0% 9%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 89.8%;\n    --input: 0 0% 89.8%;\n    --ring: 0 0% 3.9%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem;\n    --sidebar-background: 0 0% 98%;\n    --sidebar-foreground: 240 5.3% 26.1%;\n    --sidebar-primary: 240 5.9% 10%;\n    --sidebar-primary-foreground: 0 0% 98%;\n    --sidebar-accent: 240 4.8% 95.9%;\n    --sidebar-accent-foreground: 240 5.9% 10%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n  .dark {\n    --background: 0 0% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 0 0% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 0 0% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 0 0% 9%;\n    --secondary: 0 0% 14.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 0 0% 14.9%;\n    --muted-foreground: 0 0% 63.9%;\n    --accent: 0 0% 14.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 14.9%;\n    --input: 0 0% 14.9%;\n    --ring: 0 0% 83.1%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n```\n\n## File: dkl-microapp-2-main/supabase/functions/geocode-properties/index.ts\n```typescript\n// Setup type definitions for built-in Supabase Runtime APIs\nimport \"jsr:@supabase/functions-js/edge-runtime.d.ts\"\nimport { createClient } from \"jsr:@supabase/supabase-js@2\"\n\n// Configuration\nconst BATCH_SIZE = 10 // Number of listings to process in one go\nconst DELAY_BETWEEN_REQUESTS_MS = 200 // Delay to avoid hitting Mapbox API rate limits\n\n// CORS headers\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n  \"Access-Control-Allow-Methods\": \"POST, OPTIONS\",\n}\n\nasync function geocodeAddress(address: string, mapboxApiKey: string) {\n  const url = `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(address)}.json?access_token=${mapboxApiKey}&limit=1`\n  try {\n    const response = await fetch(url)\n    if (!response.ok) {\n      console.error(`Mapbox API error: ${response.status} ${await response.text()}`)\n      return null\n    }\n    const data = await response.json()\n    if (data.features && data.features.length > 0) {\n      const [longitude, latitude] = data.features[0].center\n      return {\n        latitude,\n        longitude,\n      }\n    }\n    return null\n  } catch (error) {\n    console.error(\"Error geocoding address:\", error)\n    return null\n  }\n}\n\nDeno.serve(async (req) => {\n  // Handle OPTIONS request for CORS preflight\n  if (req.method === \"OPTIONS\") {\n    return new Response(\"ok\", {\n      headers: corsHeaders,\n    })\n  }\n\n  try {\n    const supabaseUrl = Deno.env.get(\"SUPABASE_URL\")\n    const serviceRoleKey = Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\")\n    const mapboxApiKey = Deno.env.get(\"MAPBOX_ACCESS_TOKEN\")\n\n    if (!supabaseUrl || !serviceRoleKey || !mapboxApiKey) {\n      throw new Error(\"Missing environment variables: SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, or MAPBOX_ACCESS_TOKEN\")\n    }\n\n    // Create a Supabase client with the service role key for admin privileges\n    const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey)\n\n    // Fetch listings that need geocoding\n    // UPDATED: Changed from 'properties' to 'listings'\n    const { data: listingsToGeocode, error: fetchError } = await supabaseAdmin\n      .from(\"listings\")\n      .select(\"id, address_line_1, city, state, latitude, longitude\")\n      .or(\"latitude.is.null,longitude.is.null\") // Listings missing either lat or lng\n      .not(\"address_line_1\", \"is\", null) // Must have address_line_1\n      .not(\"city\", \"is\", null) // Must have city\n      .not(\"state\", \"is\", null) // Must have state\n      .limit(BATCH_SIZE)\n\n    if (fetchError) {\n      console.error(\"Error fetching listings:\", fetchError) // UPDATED: Message text\n      throw fetchError\n    }\n\n    if (!listingsToGeocode || listingsToGeocode.length === 0) {\n      return new Response(\n        JSON.stringify({\n          success: true,\n          message: \"No listings found needing geocoding in this batch.\", // UPDATED: Message text\n          propertiesFound: 0, // Kept for client compatibility\n          geocodedCount: 0,\n          failedCount: 0,\n          details: [],\n        }),\n        {\n          headers: {\n            ...corsHeaders,\n            \"Content-Type\": \"application/json\",\n          },\n          status: 200,\n        },\n      )\n    }\n\n    let geocodedCount = 0\n    let failedCount = 0\n    const processingDetails = []\n\n    for (const listing of listingsToGeocode) {\n      // UPDATED: Variable name\n      // Ensure all parts of the address are present before attempting to geocode\n      if (!listing.address_line_1 || !listing.city || !listing.state) {\n        processingDetails.push({\n          id: listing.id,\n          status: \"skipped\",\n          reason: \"Missing address components\",\n        })\n        failedCount++\n        continue\n      }\n\n      // Construct the full address string\n      const fullAddress = `${listing.address_line_1}, ${listing.city}, ${listing.state}`\n      const coordinates = await geocodeAddress(fullAddress, mapboxApiKey)\n\n      if (coordinates) {\n        // UPDATED: Changed from 'properties' to 'listings'\n        const { error: updateError } = await supabaseAdmin\n          .from(\"listings\")\n          .update({\n            latitude: coordinates.latitude,\n            longitude: coordinates.longitude,\n          })\n          .eq(\"id\", listing.id)\n\n        if (updateError) {\n          console.error(`Error updating listing ${listing.id}:`, updateError) // UPDATED: Message text\n          failedCount++\n          processingDetails.push({\n            id: listing.id,\n            status: \"failed_update\",\n            address: fullAddress,\n            error: updateError.message,\n          })\n        } else {\n          geocodedCount++\n          processingDetails.push({\n            id: listing.id,\n            status: \"success\",\n            address: fullAddress,\n            coordinates,\n          })\n        }\n      } else {\n        failedCount++\n        processingDetails.push({\n          id: listing.id,\n          status: \"failed_geocode\",\n          address: fullAddress,\n        })\n        console.warn(`Failed to geocode address for listing ${listing.id}: ${fullAddress}`) // UPDATED: Message text\n      }\n\n      // Add a small delay between requests to Mapbox\n      if (listingsToGeocode.indexOf(listing) < listingsToGeocode.length - 1) {\n        await new Promise((resolve) => setTimeout(resolve, DELAY_BETWEEN_REQUESTS_MS))\n      }\n    }\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        message: `Batch processing complete. Processed: ${listingsToGeocode.length}, Geocoded: ${geocodedCount}, Failed: ${failedCount}.`,\n        propertiesFound: listingsToGeocode.length, // Kept for client compatibility\n        geocodedCount,\n        failedCount,\n        details: processingDetails,\n      }),\n      {\n        headers: {\n          ...corsHeaders,\n          \"Content-Type\": \"application/json\",\n        },\n        status: 200,\n      },\n    )\n  } catch (err) {\n    console.error(\"Main function error:\", err)\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: err?.message ?? String(err),\n        propertiesFound: 0, // Kept for client compatibility\n        geocodedCount: 0,\n        failedCount: 0,\n      }),\n      {\n        headers: {\n          ...corsHeaders,\n          \"Content-Type\": \"application/json\",\n        },\n        status: 500,\n      },\n    )\n  }\n})\n```\n\n## File: dkl-microapp-2-main/supabase/migrations/001_add_user_field_mappings.sql\n```sql\n-- Create user_field_mappings table\nCREATE TABLE IF NOT EXISTS public.user_field_mappings (\n    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,\n    target_table_name VARCHAR(255) NOT NULL, -- e.g., 'properties', 'builders'\n    target_database_column VARCHAR(255) NOT NULL, -- e.g., 'mls_number', 'status'\n    source_csv_header VARCHAR(255) NOT NULL, -- Normalized CSV header provided by user\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),\n    CONSTRAINT user_field_mappings_user_table_csv_header_unique UNIQUE (user_id, target_table_name, source_csv_header)\n);\n\nCOMMENT ON TABLE public.user_field_mappings IS 'Stores user-defined mappings from CSV headers to database columns.';\nCOMMENT ON COLUMN public.user_field_mappings.target_table_name IS 'The name of the database table (e.g., ''properties'', ''builders'').';\nCOMMENT ON COLUMN public.user_field_mappings.target_database_column IS 'The name of the column in the target_table_name.';\nCOMMENT ON COLUMN public.user_field_mappings.source_csv_header IS 'The user-defined CSV header (normalized) that maps to the target_database_column.';\n\n-- Create indexes\nCREATE INDEX IF NOT EXISTS idx_user_field_mappings_user_table_db_column\nON public.user_field_mappings(user_id, target_table_name, target_database_column);\n\n-- Enable RLS\nALTER TABLE public.user_field_mappings ENABLE ROW LEVEL SECURITY;\n\n-- RLS Policies\nCREATE POLICY \"Users can manage their own field mappings\"\nON public.user_field_mappings\nFOR ALL\nUSING (auth.uid() = user_id);\n\n-- Trigger for updated_at\nDROP TRIGGER IF EXISTS update_user_field_mappings_updated_at ON public.user_field_mappings;\nCREATE TRIGGER update_user_field_mappings_updated_at\nBEFORE UPDATE ON public.user_field_mappings\nFOR EACH ROW\nEXECUTE FUNCTION update_updated_at_column();\n```\n\n## File: dkl-microapp-2-main/supabase/migrations/002_add_mapbox_key_to_user_settings.sql\n```sql\n-- Add mapbox_api_key column to user_settings table\n    ALTER TABLE public.user_settings\n    ADD COLUMN IF NOT EXISTS mapbox_api_key TEXT NULL;\n\n    COMMENT ON COLUMN public.user_settings.mapbox_api_key IS 'Stores the Mapbox API key for the user';\n\n    -- Output a success message\n    SELECT 'Column mapbox_api_key added to user_settings successfully.' AS result;\n```\n\n## File: dkl-microapp-2-main/supabase/migrations/003_update_existing_mappings.sql\n```sql\n-- Description: Updates existing user field mappings from the old 'properties' table name to the new 'listings' table name.\n    -- This ensures that previously saved CSV import mappings continue to work after the table rename.\n    UPDATE public.user_field_mappings\n    SET target_table_name = 'listings'\n    WHERE target_table_name = 'properties';\n\n    -- Description: Updates the foreign key relationship in social_post_properties.\n    -- This renames the relationship name that Supabase uses for joins from 'properties' to 'listings'.\n    -- Note: This assumes the constraint was named 'social_post_properties_property_id_fkey'.\n    -- You may need to verify the actual constraint name in your Supabase dashboard.\n    ALTER TABLE public.social_post_properties\n    DROP CONSTRAINT IF EXISTS social_post_properties_property_id_fkey,\n    ADD CONSTRAINT social_post_properties_property_id_fkey\n        FOREIGN KEY (property_id)\n        REFERENCES public.listings(id)\n        ON DELETE CASCADE;\n```\n\n## File: dkl-microapp-2-main/supabase/schema.sql\n```sql\n-- Main schema definition for the Attio clone project\n-- Drop existing tables if they exist (optional, for a clean slate during development)\nDROP TABLE IF EXISTS public.social_post_properties CASCADE;\nDROP TABLE IF EXISTS public.social_posts CASCADE;\nDROP TABLE IF EXISTS public.csv_uploads CASCADE;\nDROP TABLE IF EXISTS public.user_field_mappings CASCADE;\nDROP TABLE IF EXISTS public.listings CASCADE; -- Changed from properties\nDROP TABLE IF EXISTS public.builders CASCADE;\nDROP TABLE IF EXISTS public.user_settings CASCADE;\n\n-- Extensions\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\" WITH SCHEMA extensions;\n\n-- Builders Table\nCREATE TABLE public.builders (\n    id uuid DEFAULT extensions.uuid_generate_v4() PRIMARY KEY,\n    name TEXT NOT NULL,\n    company_name TEXT,\n    phone TEXT,\n    email TEXT,\n    website TEXT,\n    address TEXT,\n    city TEXT,\n    state TEXT,\n    zip_code TEXT,\n    years_in_business INTEGER,\n    total_projects INTEGER,\n    active_projects INTEGER,\n    specialties TEXT[],\n    price_range_min NUMERIC,\n    price_range_max NUMERIC,\n    rating NUMERIC,\n    notes TEXT,\n    metadata JSONB,\n    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,\n    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL\n);\n\n-- Listings Table (formerly Properties)\nCREATE TABLE public.listings (\n    id uuid DEFAULT extensions.uuid_generate_v4() PRIMARY KEY,\n    mls_number TEXT UNIQUE, -- Assuming MLS number should be unique for listings\n    category TEXT,\n    status TEXT,\n    type TEXT,\n    dom INTEGER,\n    cdom INTEGER,\n    list_date DATE,\n    agreement_date DATE,\n    off_market_date DATE,\n    settled_date DATE,\n    original_price NUMERIC,\n    list_price NUMERIC,\n    sold_price NUMERIC,\n    street_number TEXT,\n    street_direction TEXT,\n    street_name TEXT,\n    unit_number TEXT,\n    city TEXT,\n    state TEXT,\n    zip_code TEXT,\n    county TEXT,\n    mls_area TEXT,\n    subdivision TEXT,\n    list_agent_name TEXT,\n    list_agent_code TEXT,\n    list_office_name TEXT,\n    list_office_code TEXT,\n    list_office_phone TEXT,\n    selling_agent TEXT,\n    selling_agent_code TEXT,\n    selling_office_name TEXT,\n    selling_office_code TEXT,\n    selling_office_phone TEXT,\n    final_financing TEXT,\n    final_short_sale BOOLEAN,\n    final_third_party_approval BOOLEAN,\n    final_bank_owned BOOLEAN,\n    tax_annual_total NUMERIC,\n    tax_year INTEGER,\n    acres_total NUMERIC,\n    land_use_code TEXT,\n    ownership TEXT,\n    senior_community BOOLEAN,\n    condo_coop_assoc BOOLEAN,\n    hoa BOOLEAN,\n    one_time_association_fee NUMERIC,\n    association_fee NUMERIC,\n    association_fee_frequency TEXT,\n    age INTEGER,\n    interior_sqft INTEGER,\n    property_condition TEXT,\n    bedrooms INTEGER,\n    baths_full INTEGER,\n    baths_half INTEGER,\n    design TEXT,\n    style TEXT,\n    number_of_stories TEXT,\n    floor_number TEXT,\n    basement BOOLEAN,\n    garage_spaces INTEGER,\n    fireplace BOOLEAN,\n    laundry TEXT,\n    other_rooms TEXT,\n    room_count INTEGER,\n    central_air BOOLEAN,\n    waterfront BOOLEAN,\n    new_construction BOOLEAN,\n    model_name TEXT,\n    originating_mls TEXT,\n    above_grade_sqft INTEGER,\n    below_grade_sqft INTEGER,\n    home_built TEXT,\n    basement_footprint_pct NUMERIC,\n    basement_finished_pct NUMERIC,\n    builder_id uuid REFERENCES public.builders(id) ON DELETE SET NULL,\n    development_status TEXT,\n    metadata JSONB,\n    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,\n    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL,\n    in_social_queue BOOLEAN DEFAULT FALSE,\n    owner_name TEXT,\n    construction_completed_yn BOOLEAN,\n    year_built INTEGER,\n    year_built_source TEXT,\n    imported_builder_name TEXT,\n    occupant_type TEXT,\n    occupant_name TEXT,\n    previous_list_price NUMERIC,\n    architect_name TEXT,\n    structure_type TEXT,\n    block_lot TEXT,\n    remarks_private TEXT,\n    remarks_public TEXT,\n    year_major_reno_remodel INTEGER,\n    change_info TEXT,\n    close_date DATE,\n    close_price NUMERIC,\n    close_sale_type TEXT,\n    foundation_details TEXT,\n    land_assessed_value NUMERIC,\n    list_picture_url TEXT,\n    lot_features TEXT[],\n    lot_size_sqft NUMERIC,\n    address_line_1 TEXT, -- Combined address for easier geocoding if components are missing\n    latitude NUMERIC,\n    longitude NUMERIC,\n    last_sold_date DATE,\n    last_sold_price NUMERIC,\n    property_type TEXT, -- Retained, ensure it's used consistently\n    description TEXT, -- Retained\n    new_construction_details TEXT -- Retained\n);\n\n-- User Settings Table\nCREATE TABLE public.user_settings (\n    id uuid DEFAULT extensions.uuid_generate_v4() PRIMARY KEY,\n    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE UNIQUE NOT NULL,\n    theme TEXT DEFAULT 'light'::text,\n    notifications_enabled BOOLEAN DEFAULT true,\n    email_notifications BOOLEAN DEFAULT true,\n    default_view TEXT DEFAULT 'grid'::text,\n    items_per_page INTEGER DEFAULT 50,\n    metadata JSONB,\n    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,\n    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL,\n    openai_api_key TEXT,\n    openai_model TEXT,\n    primary_color_hex TEXT,\n    primary_foreground_color_hex TEXT,\n    mapbox_api_key TEXT\n);\n\n-- CSV Uploads Table\nCREATE TABLE public.csv_uploads (\n    id uuid DEFAULT extensions.uuid_generate_v4() PRIMARY KEY,\n    user_id uuid REFERENCES auth.users(id) ON DELETE SET NULL,\n    filename TEXT,\n    upload_date TIMESTAMPTZ DEFAULT now() NOT NULL,\n    records_processed INTEGER,\n    records_created INTEGER,\n    records_updated INTEGER,\n    records_failed INTEGER,\n    status TEXT,\n    error_log TEXT,\n    metadata JSONB\n);\n\n-- Social Posts Table\nCREATE TABLE public.social_posts (\n    id uuid DEFAULT extensions.uuid_generate_v4() PRIMARY KEY,\n    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'draft'::text NOT NULL, -- e.g., draft, scheduled, posted, error\n    post_url TEXT, -- URL of the live post\n    content_type TEXT, -- e.g., 'Single Property', 'Multi Property', 'Market Update'\n    format_type TEXT, -- e.g., 'Carousel', 'Post', 'Reel', 'Story'\n    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,\n    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL\n);\n\n-- Social Post Properties Junction Table\nCREATE TABLE public.social_post_properties (\n    id uuid DEFAULT extensions.uuid_generate_v4() PRIMARY KEY,\n    social_post_id uuid REFERENCES public.social_posts(id) ON DELETE CASCADE NOT NULL,\n    property_id uuid REFERENCES public.listings(id) ON DELETE CASCADE NOT NULL, -- Changed from properties\n    image_complete BOOLEAN DEFAULT FALSE,\n    description_complete BOOLEAN DEFAULT FALSE,\n    contacted_complete BOOLEAN DEFAULT FALSE,\n    image_urls TEXT[], -- Array of URLs for images specific to this property in this post\n    description TEXT, -- Description specific to this property in this post\n    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,\n    UNIQUE (social_post_id, property_id) -- Ensure a property is linked only once per post\n);\n\n-- User Field Mappings Table\nCREATE TABLE public.user_field_mappings (\n    id uuid DEFAULT extensions.uuid_generate_v4() PRIMARY KEY,\n    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,\n    target_table_name TEXT NOT NULL, -- e.g., 'listings', 'builders'\n    target_database_column TEXT NOT NULL,\n    source_csv_header TEXT NOT NULL,\n    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,\n    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL,\n    UNIQUE (user_id, target_table_name, source_csv_header) -- A CSV header can only map to one DB column for a user and table\n    -- Consider adding: UNIQUE (user_id, target_table_name, target_database_column) if a DB column can only be mapped by one CSV header\n);\n\n-- Function to update 'updated_at' column\nCREATE OR REPLACE FUNCTION public.update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n   NEW.updated_at = now();\n   RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n-- Triggers for 'updated_at'\nCREATE TRIGGER update_builders_updated_at BEFORE UPDATE ON public.builders FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();\nCREATE TRIGGER update_listings_updated_at BEFORE UPDATE ON public.listings FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column(); -- Changed\nCREATE TRIGGER update_user_settings_updated_at BEFORE UPDATE ON public.user_settings FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();\nCREATE TRIGGER update_social_posts_updated_at BEFORE UPDATE ON public.social_posts FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();\nCREATE TRIGGER update_user_field_mappings_updated_at BEFORE UPDATE ON public.user_field_mappings FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();\n\n-- Enable Row Level Security (RLS) for all tables\nALTER TABLE public.builders ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.listings ENABLE ROW LEVEL SECURITY; -- Changed\nALTER TABLE public.user_settings ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.csv_uploads ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.social_posts ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.social_post_properties ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.user_field_mappings ENABLE ROW LEVEL SECURITY;\n\n-- Policies for user_settings\nDROP POLICY IF EXISTS \"Allow individual read access on user_settings\" ON public.user_settings;\nCREATE POLICY \"Allow individual read access on user_settings\" ON public.user_settings\n    FOR SELECT USING (auth.uid() = user_id);\n\nDROP POLICY IF EXISTS \"Allow individual update access on user_settings\" ON public.user_settings;\nCREATE POLICY \"Allow individual update access on user_settings\" ON public.user_settings\n    FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);\n\nDROP POLICY IF EXISTS \"Allow individual insert access on user_settings\" ON public.user_settings;\nCREATE POLICY \"Allow individual insert access on user_settings\" ON public.user_settings\n    FOR INSERT WITH CHECK (auth.uid() = user_id);\n\n-- Policies for builders (assuming builders are public or managed by auth users)\nDROP POLICY IF EXISTS \"Allow public read access on builders\" ON public.builders;\nCREATE POLICY \"Allow public read access on builders\" ON public.builders\n    FOR SELECT USING (true); -- Or auth.role() = 'authenticated' if only for logged-in users\n\nDROP POLICY IF EXISTS \"Allow authenticated users to insert builders\" ON public.builders;\nCREATE POLICY \"Allow authenticated users to insert builders\" ON public.builders\n    FOR INSERT TO authenticated WITH CHECK (true);\n\nDROP POLICY IF EXISTS \"Allow authenticated users to update builders\" ON public.builders;\nCREATE POLICY \"Allow authenticated users to update builders\" ON public.builders\n    FOR UPDATE TO authenticated USING (true) WITH CHECK (true); -- More specific ownership checks can be added\n\nDROP POLICY IF EXISTS \"Allow authenticated users to delete builders\" ON public.builders;\nCREATE POLICY \"Allow authenticated users to delete builders\" ON public.builders\n    FOR DELETE TO authenticated USING (true); -- More specific ownership checks can be added\n\n\n-- Policies for listings (assuming listings are public or managed by auth users)\nDROP POLICY IF EXISTS \"Allow public read access on listings\" ON public.listings;\nCREATE POLICY \"Allow public read access on listings\" ON public.listings\n    FOR SELECT USING (true); -- Or auth.role() = 'authenticated'\n\nDROP POLICY IF EXISTS \"Allow authenticated users to insert listings\" ON public.listings;\nCREATE POLICY \"Allow authenticated users to insert listings\" ON public.listings\n    FOR INSERT TO authenticated WITH CHECK (true);\n\nDROP POLICY IF EXISTS \"Allow authenticated users to update listings\" ON public.listings;\nCREATE POLICY \"Allow authenticated users to update listings\" ON public.listings\n    FOR UPDATE TO authenticated USING (true) WITH CHECK (true);\n\nDROP POLICY IF EXISTS \"Allow authenticated users to delete listings\" ON public.listings;\nCREATE POLICY \"Allow authenticated users to delete listings\" ON public.listings\n    FOR DELETE TO authenticated USING (true);\n\n\n-- Policies for csv_uploads (user-specific)\nDROP POLICY IF EXISTS \"Allow individual access on csv_uploads\" ON public.csv_uploads;\nCREATE POLICY \"Allow individual access on csv_uploads\" ON public.csv_uploads\n    FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);\n\n-- Policies for social_posts (user-specific)\nDROP POLICY IF EXISTS \"Allow individual access on social_posts\" ON public.social_posts;\nCREATE POLICY \"Allow individual access on social_posts\" ON public.social_posts\n    FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);\n\n-- Policies for social_post_properties (derived from social_posts ownership)\nDROP POLICY IF EXISTS \"Allow access based on social_post ownership\" ON public.social_post_properties;\nCREATE POLICY \"Allow access based on social_post ownership\" ON public.social_post_properties\n    FOR ALL USING (\n        EXISTS (\n            SELECT 1 FROM public.social_posts sp\n            WHERE sp.id = social_post_id AND sp.user_id = auth.uid()\n        )\n    ) WITH CHECK (\n         EXISTS (\n            SELECT 1 FROM public.social_posts sp\n            WHERE sp.id = social_post_id AND sp.user_id = auth.uid()\n        )\n    );\n\n-- Policies for user_field_mappings (user-specific)\nDROP POLICY IF EXISTS \"Allow individual access on user_field_mappings\" ON public.user_field_mappings;\nCREATE POLICY \"Allow individual access on user_field_mappings\" ON public.user_field_mappings\n    FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);\n\n-- Seed initial data (optional)\n-- Example: INSERT INTO public.user_settings (user_id, theme) VALUES ('your-user-id', 'dark');\n```\n\n## File: dkl-microapp-2-main/supabase/seed-social-posts.sql\n```sql\n-- Insert a sample social post\nINSERT INTO social_posts (\n  title, \n  description, \n  status, \n  user_id\n) VALUES (\n  'Luxury Homes Showcase', \n  'Featuring our top luxury properties in the DC area',\n  'draft',\n  (SELECT auth.uid())\n);\n\n-- Get the ID of the social post we just created\nDO $$\nDECLARE\n  social_post_id UUID;\nBEGIN\n  SELECT id INTO social_post_id FROM social_posts ORDER BY created_at DESC LIMIT 1;\n  \n  -- Add properties to the social post\n  INSERT INTO social_post_properties (\n    social_post_id,\n    property_id,\n    image_complete,\n    description_complete,\n    contacted_complete\n  )\n  SELECT \n    social_post_id,\n    id,\n    CASE WHEN random() > 0.5 THEN true ELSE false END,\n    CASE WHEN random() > 0.5 THEN true ELSE false END,\n    CASE WHEN random() > 0.5 THEN true ELSE false END\n  FROM properties\n  WHERE mls_number IN ('DC2024001', 'MD2024002', 'VA2024003')\n  AND in_social_queue = true;\n  \n  -- Remove these properties from the queue\n  UPDATE properties\n  SET in_social_queue = false\n  WHERE mls_number IN ('DC2024001', 'MD2024002', 'VA2024003');\nEND $$;\n```\n\n## File: dkl-microapp-2-main/supabase/social-schema.sql\n```sql\n-- Create social_posts table\nCREATE TABLE IF NOT EXISTS social_posts (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  description TEXT,\n  status VARCHAR(50) DEFAULT 'draft', -- 'draft', 'completed', 'posted'\n  post_url VARCHAR(500),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),\n  user_id UUID REFERENCES auth.users(id)\n);\n\n-- Create social_post_properties table (junction table)\nCREATE TABLE IF NOT EXISTS social_post_properties (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  social_post_id UUID REFERENCES social_posts(id) ON DELETE CASCADE,\n  property_id UUID REFERENCES properties(id) ON DELETE CASCADE,\n  image_complete BOOLEAN DEFAULT false,\n  description_complete BOOLEAN DEFAULT false,\n  contacted_complete BOOLEAN DEFAULT false,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),\n  UNIQUE(social_post_id, property_id)\n);\n\n-- Add social_queue column to properties\nALTER TABLE properties ADD COLUMN IF NOT EXISTS in_social_queue BOOLEAN DEFAULT false;\n\n-- Create indexes\nCREATE INDEX IF NOT EXISTS idx_social_posts_user_id ON social_posts(user_id);\nCREATE INDEX IF NOT EXISTS idx_social_posts_status ON social_posts(status);\nCREATE INDEX IF NOT EXISTS idx_social_post_properties_post_id ON social_post_properties(social_post_id);\nCREATE INDEX IF NOT EXISTS idx_social_post_properties_property_id ON social_post_properties(property_id);\nCREATE INDEX IF NOT EXISTS idx_properties_social_queue ON properties(in_social_queue);\n\n-- Create updated_at trigger for social_posts\nDROP TRIGGER IF EXISTS update_social_posts_updated_at ON social_posts;\nCREATE TRIGGER update_social_posts_updated_at BEFORE UPDATE ON social_posts\n  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\n-- Enable RLS\nALTER TABLE social_posts ENABLE ROW LEVEL SECURITY;\nALTER TABLE social_post_properties ENABLE ROW LEVEL SECURITY;\n\n-- Create RLS policies\nCREATE POLICY \"Users can manage own social posts\" ON social_posts\n  FOR ALL USING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can manage social post properties\" ON social_post_properties\n  FOR ALL USING (\n    EXISTS (\n      SELECT 1 FROM social_posts \n      WHERE social_posts.id = social_post_properties.social_post_id \n      AND social_posts.user_id = auth.uid()\n    )\n  );\n```\n\n## File: dkl-microapp-2-main/supabase/update-schema.sql\n```sql\n-- Ensure builder_id column exists in properties table\nALTER TABLE properties ADD COLUMN IF NOT EXISTS builder_id UUID REFERENCES builders(id);\n\n-- Create index for better performance\nCREATE INDEX IF NOT EXISTS idx_properties_builder_id ON properties(builder_id);\n\n-- Update some existing properties to have builders assigned\nUPDATE properties \nSET builder_id = (\n  SELECT id FROM builders \n  WHERE name = 'Toll Brothers' \n  LIMIT 1\n)\nWHERE mls_number IN ('DC2024001', 'MD2024002', 'VA2024003');\n\nUPDATE properties \nSET builder_id = (\n  SELECT id FROM builders \n  WHERE name = 'Ryan Homes' \n  LIMIT 1\n)\nWHERE mls_number IN ('DC2024004', 'MD2024005', 'VA2024006');\n```\n\n## File: dkl-microapp-2-main/types/supabase.ts\n```typescript\nexport type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[]\n\nexport interface Database {\n  public: {\n    Tables: {\n      builders: {\n        Row: {\n          id: string\n          name: string\n          company_name: string | null\n          phone: string | null\n          email: string | null\n          website: string | null\n          address: string | null\n          city: string | null\n          state: string | null\n          zip_code: string | null\n          years_in_business: number | null\n          total_projects: number | null\n          active_projects: number | null\n          specialties: string[] | null\n          price_range_min: number | null\n          price_range_max: number | null\n          rating: number | null\n          notes: string | null\n          metadata: Json | null\n          created_at: string\n          updated_at: string\n        }\n        Insert: Omit<Database[\"public\"][\"Tables\"][\"builders\"][\"Row\"], \"id\" | \"created_at\" | \"updated_at\"> & {\n          id?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Update: Partial<Database[\"public\"][\"Tables\"][\"builders\"][\"Row\"]>\n      }\n      listings: {\n        // Renamed from properties\n        Row: {\n          id: string\n          mls_number: string | null\n          category: string | null\n          status: string | null\n          type: string | null\n          dom: number | null\n          cdom: number | null\n          list_date: string | null\n          agreement_date: string | null\n          off_market_date: string | null\n          settled_date: string | null\n          original_price: number | null\n          list_price: number | null\n          sold_price: number | null\n          street_number: string | null\n          street_direction: string | null\n          street_name: string | null\n          unit_number: string | null\n          city: string | null\n          state: string | null\n          zip_code: string | null\n          county: string | null\n          mls_area: string | null\n          subdivision: string | null\n          list_agent_name: string | null\n          list_agent_code: string | null\n          list_office_name: string | null\n          list_office_code: string | null\n          list_office_phone: string | null\n          selling_agent: string | null\n          selling_agent_code: string | null\n          selling_office_name: string | null\n          selling_office_code: string | null\n          selling_office_phone: string | null\n          final_financing: string | null\n          final_short_sale: boolean | null\n          final_third_party_approval: boolean | null\n          final_bank_owned: boolean | null\n          tax_annual_total: number | null\n          tax_year: number | null\n          acres_total: number | null\n          land_use_code: string | null\n          ownership: string | null\n          senior_community: boolean | null\n          condo_coop_assoc: boolean | null\n          hoa: boolean | null\n          one_time_association_fee: number | null\n          association_fee: number | null\n          association_fee_frequency: string | null\n          age: number | null\n          interior_sqft: number | null\n          property_condition: string | null\n          bedrooms: number | null\n          baths_full: number | null\n          baths_half: number | null\n          design: string | null\n          style: string | null\n          number_of_stories: string | null\n          floor_number: string | null\n          basement: boolean | null\n          garage_spaces: number | null\n          fireplace: boolean | null\n          laundry: string | null\n          other_rooms: string | null\n          room_count: number | null\n          central_air: boolean | null\n          waterfront: boolean | null\n          new_construction: boolean | null\n          model_name: string | null\n          originating_mls: string | null\n          above_grade_sqft: number | null\n          below_grade_sqft: number | null\n          home_built: string | null\n          basement_footprint_pct: number | null\n          basement_finished_pct: number | null\n          builder_id: string | null\n          development_status: string | null\n          metadata: Json | null\n          created_at: string\n          updated_at: string\n          in_social_queue: boolean | null\n          owner_name: string | null\n          construction_completed_yn: boolean | null\n          year_built: number | null\n          year_built_source: string | null\n          imported_builder_name: string | null\n          occupant_type: string | null\n          occupant_name: string | null\n          previous_list_price: number | null\n          architect_name: string | null\n          structure_type: string | null\n          block_lot: string | null\n          remarks_private: string | null\n          remarks_public: string | null\n          year_major_reno_remodel: number | null\n          change_info: string | null\n          close_date: string | null\n          close_price: number | null\n          close_sale_type: string | null\n          foundation_details: string | null\n          land_assessed_value: number | null\n          list_picture_url: string | null\n          lot_features: string[] | null\n          lot_size_sqft: number | null\n          address_line_1: string | null\n          latitude: number | null\n          longitude: number | null\n          last_sold_date: string | null\n          last_sold_price: number | null\n          property_type: string | null // Retained from previous, ensure it's in schema if used\n          description: string | null // Retained from previous, ensure it's in schema if used\n          new_construction_details: string | null // Retained from previous\n        }\n        Insert: Omit<Database[\"public\"][\"Tables\"][\"listings\"][\"Row\"], \"id\" | \"created_at\" | \"updated_at\"> & {\n          // Renamed\n          id?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Update: Partial<Database[\"public\"][\"Tables\"][\"listings\"][\"Row\"]> // Renamed\n      }\n      user_settings: {\n        Row: {\n          id: string\n          user_id: string\n          theme: string\n          notifications_enabled: boolean\n          email_notifications: boolean\n          default_view: string\n          items_per_page: number\n          metadata: Json | null\n          created_at: string\n          updated_at: string\n          openai_api_key: string | null\n          openai_model: string | null\n          primary_color_hex: string | null\n          primary_foreground_color_hex: string | null\n          mapbox_api_key: string | null\n        }\n        Insert: Omit<Database[\"public\"][\"Tables\"][\"user_settings\"][\"Row\"], \"id\" | \"created_at\" | \"updated_at\"> & {\n          id?: string\n          created_at?: string\n          updated_at?: string\n          openai_api_key?: string | null\n          openai_model?: string | null\n          primary_color_hex?: string | null\n          primary_foreground_color_hex?: string | null\n          mapbox_api_key?: string | null\n        }\n        Update: Partial<Database[\"public\"][\"Tables\"][\"user_settings\"][\"Row\"]> & {\n          openai_api_key?: string | null\n          openai_model?: string | null\n          primary_color_hex?: string | null\n          primary_foreground_color_hex?: string | null\n          mapbox_api_key?: string | null\n        }\n      }\n      csv_uploads: {\n        Row: {\n          id: string\n          user_id: string | null\n          filename: string | null\n          upload_date: string\n          records_processed: number | null\n          records_created: number | null\n          records_updated: number | null\n          records_failed: number | null\n          status: string | null\n          error_log: string | null\n          metadata: Json | null\n        }\n        Insert: Omit<Database[\"public\"][\"Tables\"][\"csv_uploads\"][\"Row\"], \"id\" | \"upload_date\"> & {\n          id?: string\n          upload_date?: string\n        }\n        Update: Partial<Database[\"public\"][\"Tables\"][\"csv_uploads\"][\"Row\"]>\n      }\n      social_posts: {\n        Row: {\n          id: string\n          title: string\n          description: string | null\n          status: string\n          post_url: string | null\n          created_at: string\n          updated_at: string\n          user_id: string | null\n          content_type: string | null\n          format_type: string | null\n        }\n        Insert: Omit<Database[\"public\"][\"Tables\"][\"social_posts\"][\"Row\"], \"id\" | \"created_at\" | \"updated_at\"> & {\n          id?: string\n          created_at?: string\n          updated_at?: string\n          content_type?: string | null\n          format_type?: string | null\n        }\n        Update: Partial<Database[\"public\"][\"Tables\"][\"social_posts\"][\"Row\"]> & {\n          content_type?: string | null\n          format_type?: string | null\n        }\n      }\n      social_post_properties: {\n        // Name remains, but property_id now refers to listings.id\n        Row: {\n          id: string\n          social_post_id: string\n          property_id: string // This ID now points to a row in the 'listings' table\n          image_complete: boolean\n          description_complete: boolean\n          contacted_complete: boolean\n          created_at: string\n          image_urls: string[] | null // Added from social-post-property-item.tsx\n          description: string | null // Added from social-post-property-item.tsx\n        }\n        Insert: Omit<Database[\"public\"][\"Tables\"][\"social_post_properties\"][\"Row\"], \"id\" | \"created_at\"> & {\n          id?: string\n          created_at?: string\n        }\n        Update: Partial<Database[\"public\"][\"Tables\"][\"social_post_properties\"][\"Row\"]>\n      }\n      user_field_mappings: {\n        Row: {\n          id: string\n          user_id: string\n          target_table_name: string // This will now store 'listings' for new mappings\n          target_database_column: string\n          source_csv_header: string\n          created_at: string\n          updated_at: string\n        }\n        Insert: Omit<Database[\"public\"][\"Tables\"][\"user_field_mappings\"][\"Row\"], \"id\" | \"created_at\" | \"updated_at\"> & {\n          id?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Update: Partial<\n          Omit<Database[\"public\"][\"Tables\"][\"user_field_mappings\"][\"Row\"], \"id\" | \"user_id\" | \"created_at\">\n        >\n      }\n    }\n    Functions: {\n      update_updated_at_column: {\n        Args: Record<string, unknown>\n        Returns: unknown\n      }\n    }\n    Enums: {}\n    CompositeTypes: {}\n  }\n}\n```\n\n## File: dkl-microapp-2-main/.gitignore\n```\n# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n\n# next.js\n/.next/\n/out/\n\n# production\n/build\n\n# debug\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n.pnpm-debug.log*\n\n# env files\n.env*\n\n# vercel\n.vercel\n\n# typescript\n*.tsbuildinfo\nnext-env.d.ts\n```\n\n## File: dkl-microapp-2-main/components.json\n```json\n{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"default\",\n  \"rsc\": true,\n  \"tsx\": true,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.ts\",\n    \"css\": \"app/globals.css\",\n    \"baseColor\": \"neutral\",\n    \"cssVariables\": true,\n    \"prefix\": \"\"\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\",\n    \"ui\": \"@/components/ui\",\n    \"lib\": \"@/lib\",\n    \"hooks\": \"@/hooks\"\n  },\n  \"iconLibrary\": \"lucide\"\n}\n```\n\n## File: dkl-microapp-2-main/next.config.mjs\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  eslint: {\n    ignoreDuringBuilds: true,\n  },\n  typescript: {\n    ignoreBuildErrors: true,\n  },\n  images: {\n    unoptimized: true,\n  },\n}\n\nexport default nextConfig\n```\n\n## File: dkl-microapp-2-main/package.json\n```json\n{\n  \"name\": \"real-estate-platform\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  },\n  \"dependencies\": {\n    \"@ai-sdk/openai\": \"latest\",\n    \"@radix-ui/react-alert-dialog\": \"^1.0.5\",\n    \"@radix-ui/react-avatar\": \"^1.0.4\",\n    \"@radix-ui/react-checkbox\": \"latest\",\n    \"@radix-ui/react-dialog\": \"latest\",\n    \"@radix-ui/react-dropdown-menu\": \"^2.0.6\",\n    \"@radix-ui/react-label\": \"^2.0.2\",\n    \"@radix-ui/react-progress\": \"latest\",\n    \"@radix-ui/react-select\": \"latest\",\n    \"@radix-ui/react-slot\": \"^1.0.2\",\n    \"@radix-ui/react-switch\": \"latest\",\n    \"@radix-ui/react-tabs\": \"latest\",\n    \"@radix-ui/react-toast\": \"latest\",\n    \"@supabase/supabase-js\": \"latest\",\n    \"@tanstack/react-table\": \"latest\",\n    \"ai\": \"latest\",\n    \"class-variance-authority\": \"^0.7.1\",\n    \"clsx\": \"^2.1.1\",\n    \"jsr:\": \"supabase\",\n    \"lucide-react\": \"^0.454.0\",\n    \"mapbox-gl\": \"latest\",\n    \"next\": \"14.2.16\",\n    \"papaparse\": \"latest\",\n    \"react\": \"^18\",\n    \"react-dom\": \"^18\",\n    \"react-dropzone\": \"latest\",\n    \"recharts\": \"latest\",\n    \"tailwind-merge\": \"^2.5.5\",\n    \"tailwindcss-animate\": \"^1.0.7\",\n    \"zod\": \"latest\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^22\",\n    \"@types/react\": \"^18\",\n    \"@types/react-dom\": \"^18\",\n    \"autoprefixer\": \"^10.0.1\",\n    \"eslint\": \"^8\",\n    \"eslint-config-next\": \"14.1.0\",\n    \"postcss\": \"^8.5\",\n    \"tailwindcss\": \"^3.3.0\",\n    \"typescript\": \"^5\"\n  }\n}\n```\n\n## File: dkl-microapp-2-main/postcss.config.mjs\n```\n/** @type {import('postcss-load-config').Config} */\nconst config = {\n  plugins: {\n    tailwindcss: {},\n  },\n};\n\nexport default config;\n```\n\n## File: dkl-microapp-2-main/README.md\n```markdown\n# Attio clone project\n\n*Automatically synced with your [v0.dev](https://v0.dev) deployments*\n\n[![Deployed on Vercel](https://img.shields.io/badge/Deployed%20on-Vercel-black?style=for-the-badge&logo=vercel)](https://vercel.com/alexander-leanos-projects/v0-attio-clone-project-a0)\n[![Built with v0](https://img.shields.io/badge/Built%20with-v0.dev-black?style=for-the-badge)](https://v0.dev/chat/projects/D4LOmdOGoSu)\n\n## Overview\n\nThis repository will stay in sync with your deployed chats on [v0.dev](https://v0.dev).\nAny changes you make to your deployed app will be automatically pushed to this repository from [v0.dev](https://v0.dev).\n\n## Deployment\n\nYour project is live at:\n\n**[https://vercel.com/alexander-leanos-projects/v0-attio-clone-project-a0](https://vercel.com/alexander-leanos-projects/v0-attio-clone-project-a0)**\n\n## Build your app\n\nContinue building your app on:\n\n**[https://v0.dev/chat/projects/D4LOmdOGoSu](https://v0.dev/chat/projects/D4LOmdOGoSu)**\n\n## How It Works\n\n1. Create and modify your project using [v0.dev](https://v0.dev)\n2. Deploy your chats from the v0 interface\n3. Changes are automatically pushed to this repository\n4. Vercel deploys the latest version from this repository\n```\n\n## File: dkl-microapp-2-main/tailwind.config.ts\n```typescript\nimport type { Config } from \"tailwindcss\"\n\nconst config: Config = {\n  darkMode: [\"class\"],\n  content: [\n    \"./pages/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./app/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  theme: {\n    extend: {\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n        blueishGreen: {\n          // Ensure this is correctly defined\n          DEFAULT: \"#14b8a6\", // teal-500\n          foreground: \"#ffffff\", // White text on teal-500\n          50: \"#f0fdfa\",\n          100: \"#ccfbf1\",\n          200: \"#99f6e4\",\n          300: \"#5eead4\",\n          400: \"#2dd4bf\",\n          500: \"#14b8a6\",\n          600: \"#0d9488\",\n          700: \"#0f766e\",\n          800: \"#115e59\",\n          900: \"#134e4a\",\n          950: \"#042f2e\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}\nexport default config\n```\n\n## File: dkl-microapp-2-main/tsconfig.json\n```json\n{\n  \"compilerOptions\": {\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"target\": \"ES6\",\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n```\n"
            }
          ],
          "modelId": "tY0lQTJu9ofNB2E2kqCuo:o3"
        }
      },
      "response": null,
      "status": "ERROR",
      "startedAt": "2025-06-16T19:55:08.300Z",
      "endedAt": "2025-06-16T19:55:09.184Z",
      "metadata": {
        "enabledTools": [
          "gitCommit",
          "gitInit",
          "gitPull",
          "gitPush",
          "gitStatus",
          "vfsCreateDirectory",
          "vfsDelete",
          "vfsListFiles",
          "vfsReadFile",
          "vfsRename",
          "vfsWriteFile"
        ],
        "maxSteps": 20,
        "attachedFiles": [
          {
            "id": "m1RVTCKHVnImZ6-9TXCCA",
            "source": "direct",
            "name": "app-prompt-history-1.txt",
            "type": "text/plain",
            "size": 28382,
            "contentText": "app-prompt-history-1\r\n-------------------------------------------------------------------------\r\n\r\n\r\n\r\n----------------------------------------------------------\r\n\r\nok we now need to make an important and potentially complicated change:\r\n\r\n(1) we need to change the name of the \"properties\" backend table to \"listings\".\r\n\r\n(2) we need to change anything throughout our entire codebase that references \"properties\" to reference the updated \"listings\" name\r\n\r\n(3) we need to change all front-end text instances of properties (\"properties\" or \"Properties\" or \"property\" or \"Prtoperty\") to the cooresponding variant of listings (e.g. \"listings\", \"Listings\", \"listing\", \"Listing\")\r\n\r\n----------------------------------------------------------\r\n----------------------------------------------------------\r\n----------------------------------------------------------\r\n\r\nfor the mapbox component, switch from a globe projection to a flat map projection to improve usability and visual clarity.. also change the markers to simple small circular dots with dot color corresponding to property status.\r\n\r\nlimit the map view to the area roughly 20 miles around Washington DC. allow zooming in but not zooming out beyond that area\r\n\r\nlastly, add a small popup that appears when clicking a marker that shows the associated address, status, builder, and price\r\n\r\n----------------------------------------------------------\r\n\r\nthe Start Geocoding Batch button is working but only in batches of 10 - we need to maintain the rate-limiting to respect mapbox limits, but the button should continue to run through all properties table records that meet the existing geocoding conditions (missing coordinates but have address_line_1, city, and state column values)\r\n\r\n----------------------------------------------------------\r\n\r\ni tried the \"Geocode Missing Coordinates\" button and am getting the following error:\r\n\r\nFailed to fetch properties: column properties.street_number does not exist\r\n\r\nnote: it is true that the preoperties backend table does not have a street_number column. we should only be using the \"address_line_1\", \"city\", and \"state\" columnlumns from the backend properties table. if any record does nnot have compleye information for those columns then omit it from geocoding/mapping\r\n\r\n----------------------------------------------------------\r\n\r\nok now, let's implement your recommendation regarding server-side geocoding. is this something where supabase edge functions are appropriate? we want to check all of the records in our backend properties table and geocode any that (1) have \"address_line_1\", \"city\", \"state\" column values, AND (2) are missing \"longitude\" and \"latitude\" column values\r\n\r\n----------------------------------------------------------\r\n\r\nok now I want to integrate working map components into the app using mapbox\r\n\r\nin the Integrations tabs of the Settings page, we need to another container after the \"AI Integrations\" container called the \"Mapbox\" where the user can input and save their Mapbox API key, as well as adjust any other Mapbox settings/parameters we expose\r\n\r\nNote: we want our default maps component to use very minimal styling - white background with only regional/state/city/county/neighborhood outlines (depending on zoom level) and road lines in grey, and mapped properties shown as circular markers in a reddish orange color\r\n\r\nthe map component should handle mapping single propeties, subgroups of properties, or all properties in the backend properties table, using only the respective  \"address_line_1\", \"city\", and \"state\" column values\r\n\r\nthe first place we need to add this maps component is to the lower left side of dashboard page - this instance should display a map of all properties in the backend properties table with status of \"Active\"  or \"Coming Soon\"\r\n\r\n----------------------------------------------------------\r\n\r\ni just tested the import again - it completed succesfully and correctly impacted the properties backend table.\r\n\r\nhowever, the upload history table is still not showing correct values for the new record after it appears following completion of the import processing.\r\n\r\nadditionally, there was no toast notification or console error\r\n\r\nI checked the backend csv_uploads table and it appears the filename and upload_date columns are correct for the newly added record. The other columns are showing no or incorrect values - here is a table of the csv_uploads table columns and what I am seeing for each in the supabase backend:\r\n\r\n| filename | working - correct value |\r\n| upload_date | working - correct value |\r\n| records_processed | no value |\r\n| records_created | no value |\r\n| records_updated | no value |\r\n| status | incorrect value \"processing\" |\r\n| error_log | working - no value expected given import completed successfully with no error |\r\n| metadata | may be working - no value - not sure if we expect any value here |\r\n| records_failed | no value |\r\n\r\nNote: the actual import functionality with respect to adding  and/or updating the properties backend table continues to work correctly, so should not be changed. We need to fix the issues directly pertaining to the post-import results reporting in csv_uploads table\r\n\r\n----------------------------------------------------------\r\n\r\nI am now able to successfully import files with saved field mappings, and upon completion a new record is correctly shown in the \"Upload History\" table. however, none of the fields associated with the record are being populated (i.e. the Date, Total, New, Updated, Ignored, and Failed fields). Additionally, the \"Status\" field has a value of \"processing\" despite the import having completed and without error.\r\n\r\nadditionally, for this table (Upload HIstory table), make sure\r\n1. none of the text/values in the record rows use bold font weight (use normal font weight)\r\n2. the Total/New/Updated/Ignored/Failed columns have equal width\r\n\r\n----------------------------------------------------------\r\n\r\nnote that we should no longer be using hsl color values since we switched to hex color values - we may be able to drop the hsl color value columsn from the user_settings table\r\n\r\n----------------------------------------------------------\r\n\r\nthe field mappings saved from the sheet component in the import data page should be reflected in the data structure tab of the settings page after clicking the save button (on import data page sheet component)\r\n\r\ncurrently this is not working\r\n\r\n----------------------------------------------------------\r\n\r\nwe need to save users' upload field mappings so they do not have to map fields they have already mapped and saved.\r\n\r\ncreate a new tab in the settings page after the \"Integrations\" tab named \"Data Structure\". in this tab there should be a dropdown select to choose either the \"properties\" or \"builders\" backend table -> upon selecting one, all column names from the corresponding table should be loaded as a vertical list. to the right of each column name we need a pill input box containing (1) previously saved mappings are shown, and (2) the user can start typing a new field name to map, which converts to a pill upon hitting enter.\r\n\r\nthen when the user adds a file to upload in the import page, the Map Fields sheet component should pre-map any field that is present in the saved list of fields that map to a given backend table column (if more than one upload file field map to the same backend table column, only allow one to be set and disable the others that map to the same backend table column)\r\n\r\nNote: if you need to make backend changes, make them directly in supabase. also  do not change anything across the rest of the app. do not change the settings page tabs.\r\n\r\n----------------------------------------------------------\r\n\r\nwe need to improve the speed of the import/upload processing - currently it is too slow\r\n\r\nadditionally we also need to add some post-upload processing of specific properties table columns - e.g. the subdivision column values need to be converted to Title Case, and the status column values need to be mapped to the corresponding valeus in this table:\r\n\r\n| A/C \t|   Active Under Contract |\r\n| ACT\t|   Active |\r\n| C/S \t| \tComing Soon |\r\n| CLS \t| \tClosed |\r\n| CNL\t| \tCanceled |\r\n| PND\t| \tPending |\r\n| T/O\t| \tTemporary Off Market |\r\n| WTH\t| \tWithdrawn |\r\n| EXP\t| \tExpired |\r\nadditionally, for the import functionality, we need to add a toggle next to the \"Map Fields\" button giving the user the option to \"Override Existing Values\" - if turned on, existing column values for records in the upload file that already existing in the backend proeprties table (based on MLS ID) will be replaced by the upload file values\r\n\r\nlastly, for the upload history table in the Import Data page, limit the visible rows to 5 and paginate the rest\r\n\r\n----------------------------------------------------------\r\n\r\nok now we need to clean up the backend  properties table. we need to remove the following columns completely:\r\n\r\n```\r\n  category,\r\n  agreement_date,\r\n  street_number,\r\n  street_direction,\r\n  street_name,\r\n  unit_number,\r\n  mls_area,\r\n  list_agent_code,\r\n  list_office_code,\r\n  list_office_phone,\r\n  selling_agent,\r\n  selling_agent_code,\r\n  selling_office_name,\r\n  selling_office_code,\r\n  selling_office_phone,\r\n  final_financing,\r\n  final_short_sale,\r\n  final_third_party_approval,\r\n  final_bank_owned,\r\n  tax_annual_total,\r\n  tax_year,\r\n  ownership,\r\n  senior_community,\r\n  condo_coop_assoc,\r\n  one_time_association_fee,\r\n  association_fee,\r\n  age,\r\n  interior_sqft,\r\n  design,\r\n  number_of_stories,\r\n  floor_number,\r\n  laundry,\r\n  other_rooms,\r\n  room_count,\r\n  central_air,\r\n  waterfront,\r\n  originating_mls,\r\n  above_grade_sqft,\r\n  below_grade_sqft,\r\n  home_built,\r\n  basement_footprint_pct,\r\n  basement_finished_pct,\r\n  development_status\r\n```\r\nfor the import functionality, please make sure that \"MLS #\"  in import files is auto-mapped to mls_number (our properties table mls id)\r\n\r\nadditionally, on the import page, we need to add:\r\n1. additional pre-processing information when a file is added - specifically, the number of records in the file, the number of new records (new MLS ID) in the file, the number of matched records (where MLS ID is alreadh in properties table), the total number of column/fields in file, the number of fields from file auto-matched to properties table columns, and the number of fields from file that were not auto-matched to any properties table fields\r\n2. a table below the \"Import Property Data\" component containing upload history including the post-processing results for each\r\n\r\n----------------------------------------------------------\r\n\r\nnow we need to improve the import functionality.\r\n\r\nwe need to move the \"Start Import\" button to the right side  of its container, and add a \"Map Fields\" button in the Start Import button's current place.\r\n\r\nafter a file has been added, clicking the \"map fields\" button will trigger a shadcn \"Sheet\" component to open from the right - this will contain a vertical list of all fields from the csv file - next to each field will be a dropdown to select the corresponding backend proeprties table field.\r\n\r\nadditionally, we need to add a \"plus\" icon button to create additional database fields\r\n\r\nafter the user has finished adjusting the field mappings, they can click the Done/Save button at the bottom of the Sheet component, which saves the configuration and closes the component. The user can then click the Start Import button, initiating the processing using the user's mapping configuration\r\n\r\n----------------------------------------------------------\r\nhttps://ttrsir.okta.com/oauth2/v1/authorize?client_id=okta.2b1959c8-bcc0-56eb-a589-cfcfb7422f26&code_challenge=5BBrzfABgsIoz0c3GuhUestxhPlhNx0biSolMKXPN-4&code_challenge_method=S256&nonce=15UGRvRT5iqSIgHa1ho5R8Da93coytBCpCACWIupnAzMcQDgnvtLwMCbFKNFwJXR&redirect_uri=https%3A%2F%2Fttrsir.okta.com%2Fenduser%2Fcallback&response_type=code&state=5HnQMqUeBFHParuiauCRxnZ4QYihUoCUioYnztVNaA4jnooqWKziW0obPwyGi31X&scope=openid%20profile%20email%20okta.users.read.self%20okta.users.manage.self%20okta.internal.enduser.read%20okta.internal.enduser.manage%20okta.enduser.dashboard.read%20okta.enduser.dashboard.manage%20okta.myAccount.sessions.manage\r\n\r\n----------------------------------------------------------\r\n\r\nit seems we are still experiencing the user_id error, as well as a couple others\r\n\r\none of the others may be due to the fact that there are 2 fields related to \"New Construction...\" - one is \"New Construction\" and the other is \"New Construction YN\". the \"New Construction YN\" column should be handled fine as its only possible values are yes or no. However the \"New Construction\" column includes more information: it provides the yes or no as well as completion status if the first part of the stirng is yes. we want this information in the backend properties table, so may just have to map it to a new column\r\n\r\n----------------------------------------------------------\r\n\r\nnow, for the social post objects - we need to modify so the user can specify (1) the content type of the social post object (\"Single Property\" or \"Multi Property\" and (2) the format type of the social post object (Carousel, Post, Reel, Story)\r\n\r\nthe user should be able to edit both of these from the social post object details view page, and should be prompted to choose each when creating a new social post object\r\n\r\nadditionally,, for the social post details view page, change the default of the associated property containers to expanded (currently collapsed)\r\n\r\nlastly, we need to integrate AI features in multiple places - for now, we want to add an icon button under the \"Description\" input box for  each associated property in the social post details view page - clicking this button should present a popover menu with a couple options (\"Rewrite\", \"Prompt\"). Choosing prompt will present a larger input popup for the user to type a prompt and a button to submit, the output response will then be inserted into the description box; the rewrite option will rewrite the content that already exists in the description box.\r\n\r\nfor the AI integration, we need to use the OpenAI API - to enable the AI, the user must  navigate to the settings page, where a new tab titled \"Integrations\" will display an input box where they can input and save their own API key, as well as select from a dropdown list of available OpenAI models. these should be added to the user's settings in the backend\r\n\r\n----------------------------------------------------------\r\n\r\nfor the style guide, change the HSL color inputs to HEX code color inputs instead.  additionally, add more of our components and their variants, like tables/data tables, modals, popovers, toast notifications , dropdown menus, multi-select and select, checkboxes and radios, cards, dialogs/alert dialogs, switches, toggles, buttons with icons, button groups, and comboboxes,\r\n\r\nadditionally, for the Import Data page:\r\n- add a drag & drop area and style the elements on page more like the attached screenshot.\r\n- add another container that shows results of data upload after processing, include breakdown of new records successfully added, records updated (i.e. where null/missing data fields were provided), and ignored/duplicate records; also include count of records that failed to upload due to error\r\n\r\nlastly, check the \"Create Post\" button on the Social Posts page - it is still not working (not creating new social post object and no notifications/communication provided)\r\n\r\n----------------------------------------------------------\r\n\r\nnow the \"Create Post\" button on the social psots page is not working again - please fix it.\r\n\r\nadditionally, for the \"Progress\" value for each social post object - make the progress % based on the aggregate tasks completed as % of aggregate total tasks (aggregated of child properties of the social post object)\r\n\r\nlastly, for the social posts table on the Social posts page, make the expanded sub-rows background color the same as the parent/collapsed rows, and replace the MLS ID with the address value (remove the \r\n\r\n----------------------------------------------------------\r\n\r\nhttps://apps.oag.state.md.us/hb_uploads/\r\n\r\n----------------------------------------------------------\r\n\r\nin the Post Details view page, seperate out the post name and make it editable (should update backend upon changing). also seperate the description and make it editable. show the status as a badge.\r\n\r\nchange the \"Assoicated Properties\" Title to just \"Properties\", move it outside/above the container and make it smaller like a tagline/eyebrow format.\r\n\r\nthen for each record associate dproperty record,  add a very small header above the MLS label/value and set that header's text to the Address of the property.. remove the bold format for the Price and Status labels\r\n\r\nmove thecheckboxes to the horizontal middle of the record container and position the checkbox labels above the checkboxes and set font color to more muted/grey\r\n\r\nadditionally make each record expandable - when expanded, everything visible in the collapsed view remains unchanged with no height change. the expanded area displays an text input box with label Description, which uses ~60% of the available width; the remaining width  contains the image or images set by user for the property specifically for this social post object - if multiple images, shrink them to fit as equal size thumbnails. there should be a plus button to add additional photos via upload, as well as the ability to remove images by clicking a small \"X\" button that appears in the top right of each thumbnail when hovered\r\n\r\nnote: uploaded images should be added to a new storage bucket in supabase, and removed upon deletion\r\n\r\nalso, make the view pages style more like the style in this attached screenshot\r\n\r\n----------------------------------------------------------\r\n\r\nnow, instead of displaying an additional container for the new post (which I currently see as \"New Post 1 - Properties\" after having created a new post named \"New Post 1\"),  make the post objects table rows expandable/toggleable so that when a row is expanded, each associated property is displayed as a subrow w the fields Status, Builder, Price, and Address display across the sub-row, and the 3 checkbox elements on the far right/end of the sub-row.\r\n\r\nadditionally add labels of \"Contacted\", \"Image\", \"Description\" for the  three checkboxes using very small font size and muted/neutral font color; also make the checkbox checked state color a blueish green instead of the current black. also make the checkbox border radius slightly rounded (only a bit). For the social posts table, seperate out the \"Mark Posted\" button (that appears when progress value is 100%) in a new columnn and use the same blueish green color instead of the current black background; also make the progress bar accent color use the blueish green color when it has reached 100%.\r\n\r\nalso for the Social Posts table, the user needs the ability to select rows and perform actions like \"Complete All\" or \"Delete\". Note that deleting posts does not delete the underlying property lsiting records, only the social post object\r\n\r\nLastly, each social post object in the table should have an \"Open\" button on the far right of each row - this button needs to open a Post Details view page\r\n\r\n----------------------------------------------------------\r\n\r\nthe \"Create Post\" button is still not working - clicking it while properties are selected does not do anything and I do not see any errors logged in the console. please make sure it is fixed and functional, with the social post object being created in backend and toast notifications communicating processing state, error, or success\r\n\r\nthe button is still not working/doing anything - and i see no toast notifications or error logging indicating an issue. please fix and make sure that when the object is created in backend it is then visible in the \"Social Posts\" table as well\r\n\r\n----------------------------------------------------------\r\n\r\nthe assign builder functionality must present a popup list of builders with search ability and await the user's selection and confirmation of the selected builder before assigning a builder to the property record(s)\r\n\r\nadditionally, the properties table on the properties page should have a column showing the builder associated with each property. NOTE: some properties may not have an associated builder if one was not automatically identified or manually set.\r\n\r\nthe edit button does not work in the property details page view and edit button does not work in the builder details page view\r\n\r\nin the builder details view page, add a column chart that displays the builder's listings over time (3 month, 6 month, 1 yr, 3 yr. 5 yr, all) with the y-axis/column height value being the sale/listing price. Also, add a data table component to the builder detail view page with all associated listings, including all relevant columns. Lastly, add a small, minimal map component that displays small circular markers (using color #c22f47) for their associated property listings. the map  can be integrated later but will be very minimal in style (white background only showing regional/county/neighborhood outlines and prominent roads using grey line colors)\r\n\r\n----------------------------------------------------------\r\n\r\nthe import functionality seems ot be working now, however there does not seem to be anything preventing duplicate records from being created - use the MLS ID in the upload as an additional unique ID check in order to prevent creating listing records for which a record with the same MLS ID already exists in the backend table\r\n\r\nthe add new builder button and the add new property buttons do not work\r\n\r\nI cannot open the builder profile page for any of the builders listed in the Builders page - there should be a Builder details page view for each builder, showing all info for the builder as well as their past builds found in the listings backend table\r\n\r\nadditionally, in the properties page  table and the property details view page, the user needs to be able to update the Builder assoicated with the listing record (individually and in bulk via the table) --- update the listings backend table schema if necessary to add a field for builder ID associated with each record - i.e. connecting to the builders backend table\r\n\r\nthe Analytics & Reports pages do not seem to exist\r\n\r\n----------------------------------------------------------\r\n\r\nthe import functionality does not seem to be working - the Import button is stuck on a loading state after clicking\r\n\r\nthe add new builder button and the add enw property buttons do not work\r\n\r\nI cannot open the builder profile page for any of the builders listed in the Builders page\r\n\r\nthe Analytics & Reports pages do not seem to exist\r\n\r\non the properties page, the Export button does not work and the Filters button does not do anything. additionally, I cannot open the details page for any of the properties in the table. also, we need to make the properties in the table selectable with the ability to perform bulk actions - like \"Hide\", \"Add Tag\", and \"Add to Social Qeue\"\r\n\r\nlastly, we must add another tool/page to the app - the tool is called \"Social Posts\" - which presents a table of properties the user has added to the \"Social post pipeline\" . the user should be able to add new properties and delete existing properties from the qeue on this page (individual and in bulk). Additionally the user must be able to select properties and mark/add them to a new or existing \"Post\" object. Lastly,the user must be able to change the status of multiple fields/columns for each property via the table - e.g. mark \"image\", \"description\", \"contacted\" as complete.\r\n\r\nanother table on this new tool page with contain all past (posted) and current (incomplete and/or complete but not posted) social post objects. Current post objects will show a progress bar with progress calculated as the % of child properties marked as complete. Once the final property is marked as complete for a given social post object, the user should be prompted whether they would like to mark the social object as \"Posted\" - if they confirm, they must provide a link to the post (an instagram link) in order for the \"Posted\" status to be assigned. Otherwise, the social post object will show as completed but will not have a check-mark \"Posted\" badge in the status column. Posted object rows will display a button to open the associated post link.\r\n\r\n----------------------------------------------------------\r\n\r\ni am creating a highly tailored micro-application for a real estate agent who specializes in luxury residential new construction in the DC/MD/VA region. the aim of the micro-app is to provide:\r\n\r\n(1) a view of the current state of the local new construction market and builder activity\r\n\r\n\t- (all listings identified as new construction or associated with a builder that are currently active, coming soon, or other desired statuses selected by user, as well as properties that have no current listing/status of any kind across feeds but have been identified as builder-owned based on either (a) last sale data from historical transaction database or (b) manual tag) insights on, the local new construction market trends and current status\r\n\r\n----------------------------------------------------------\r\n\r\ncreate an exactly identical clone of Attio's web app, with fully functional backend implemented using Supabase, but tailored for a real estate agent specializing in luxury residential new construction in the DC/MD/VA region. instead of a CRM-style focus on contacts, the app must focus on the local new residential construction market - frontend features tools, insights/trends, and current view of state of the market using database table of listing data (current and historical) and database table of local builders (with extensive information/data profiles for each). one view should show a data table/spreadsheet style view of all current (and coming soon) listings identified as new construction, as well as all properties with no current listing status but which have been identified as in development/construction phase (based on last sale metadata or manually added tag). for now, use the attached csv to seed the backend/use as initial data set - include page and implement functionality for manual data updates (via subsequent csv uploads by user). third party real estate data feeds/APIs will be integrated later, and potentially enrichment APIs for more complete builder profiles. \r\n\r\n----------------------------------------------------------\r\n\r\ncreate an exactly identical clone of Attio's web app using NextJS, with fully functional backend implemented using Supabase, but tailored for a real estate agent specializing in luxury residential new construction in the DC/MD/VA region. instead of a CRM-style focus on contacts, the app must focus on the local new residential construction market - frontend features tools, insights/trends, and current view of state of the market using database table of listing data (current and historical) and database table of local builders (with extensive information/data profiles for each). one view should show a data table/spreadsheet style view of all current (and coming soon) listings identified as new construction, as well as all properties with no current listing status but which have been identified as in development/construction phase (based on last sale metadata or manually added tag). for now, use the attached csv to seed the backend/use as initial data set - include page and implement functionality for manual data updates (via subsequent csv uploads by user). third party real estate data feeds/APIs will be integrated later, and potentially enrichment APIs for more complete builder profiles.\r\n\r\nalso include auth, user management, user settings, etc\r\n\r\nNOTE: do not approach design decisions from a marketing or customer-facing product perspective - this is INTERNAL TOOLING. it should be identical to Attio's design system, or similar to Vercel's web app interface components - largely white with very dense/compact layouts. aim to reduce empty/unused/white-space throughout the interface and use smaller than normal font sizes\r\n\r\n----------------------------------------------------------"
          },
          {
            "id": "EEhayQc7plQi1IlrevrOb",
            "source": "direct",
            "name": "repomix-output-dkl-microapp-2-main.md",
            "type": "application/octet-stream",
            "size": 574571,
            "contentText": "This file is a merged representation of the entire codebase, combined into a single document by Repomix.\nThe content has been processed where security check has been disabled.\n\n# File Summary\n\n## Purpose\nThis file contains a packed representation of the entire repository's contents.\nIt is designed to be easily consumable by AI systems for analysis, code review,\nor other automated processes.\n\n## File Format\nThe content is organized as follows:\n1. This summary section\n2. Repository information\n3. Directory structure\n4. Repository files (if enabled)\n5. Multiple file entries, each consisting of:\n  a. A header with the file path (## File: path/to/file)\n  b. The full contents of the file in a code block\n\n## Usage Guidelines\n- This file should be treated as read-only. Any changes should be made to the\n  original repository files, not this packed version.\n- When processing this file, use the file path to distinguish\n  between different files in the repository.\n- Be aware that this file may contain sensitive information. Handle it with\n  the same level of security as you would the original repository.\n\n## Notes\n- Some files may have been excluded based on .gitignore rules and Repomix's configuration\n- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files\n- Files matching patterns in .gitignore are excluded\n- Files matching default ignore patterns are excluded\n- Security check has been disabled - content may contain sensitive information\n- Files are sorted by Git change count (files with more changes are at the bottom)\n\n# Directory Structure\n```\ndkl-microapp-2-main/\n  app/\n    (auth)/\n      login/\n        page.tsx\n      register/\n        page.tsx\n      signup/\n        page.tsx\n      layout.tsx\n    (dashboard)/\n      analytics/\n        page.tsx\n      builders/\n        [id]/\n          edit/\n            page.tsx\n          page.tsx\n        loading.tsx\n        page.tsx\n      dashboard/\n        page.tsx\n      import/\n        page.tsx\n      insights/\n        page.tsx\n      listings/\n        [id]/\n          edit/\n            page.tsx\n          page.tsx\n        page.tsx\n      reports/\n        page.tsx\n      settings/\n        page.tsx\n      social/\n        [postId]/\n          page.tsx\n        loading.tsx\n        page.tsx\n      layout.tsx\n    actions/\n      ai-actions.ts\n    globals.css\n    layout.tsx\n    page.tsx\n  components/\n    layout/\n      header.tsx\n      sidebar.tsx\n    ui/\n      alert-dialog.tsx\n      alert.tsx\n      badge.tsx\n      button.tsx\n      card.tsx\n      chart.tsx\n      checkbox.tsx\n      command.tsx\n      data-table-column-header.tsx\n      data-table-pagination.tsx\n      data-table-toolbar.tsx\n      data-table.tsx\n      dialog.tsx\n      dropdown-menu.tsx\n      input.tsx\n      label.tsx\n      popover.tsx\n      progress.tsx\n      radio-group.tsx\n      scroll-area.tsx\n      select.tsx\n      separator.tsx\n      sheet.tsx\n      switch.tsx\n      table.tsx\n      tabs.tsx\n      textarea.tsx\n      toast.tsx\n      toaster.tsx\n      toggle.tsx\n    builder-assignment-dialog.tsx\n    builder-form-dialog.tsx\n    editable-field.tsx\n    field-mapping-sheet.tsx\n    header.tsx\n    listing-form-dialog.tsx\n    main-nav.tsx\n    mapbox-map.tsx\n    pill-input.tsx\n    sidebar.tsx\n    social-post-property-item.tsx\n    theme-provider.tsx\n    user-nav.tsx\n  contexts/\n    auth-context.tsx\n  hooks/\n    use-toast.ts\n  lib/\n    supabase/\n      client.ts\n      server.ts\n    builder-fields.ts\n    color-utils.ts\n    listing-fields.ts\n    supabase.ts\n    utils.ts\n  public/\n    placeholder-logo.svg\n    placeholder.svg\n  styles/\n    globals.css\n  supabase/\n    functions/\n      geocode-properties/\n        index.ts\n    migrations/\n      001_add_user_field_mappings.sql\n      002_add_mapbox_key_to_user_settings.sql\n      003_update_existing_mappings.sql\n    schema.sql\n    seed-social-posts.sql\n    social-schema.sql\n    update-schema.sql\n  types/\n    supabase.ts\n  .gitignore\n  components.json\n  next.config.mjs\n  package.json\n  postcss.config.mjs\n  README.md\n  tailwind.config.ts\n  tsconfig.json\n```\n\n# Files\n\n## File: dkl-microapp-2-main/app/(auth)/login/page.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Loader2 } from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport default function LoginPage() {\n  const { signIn } = useAuth()\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [error, setError] = useState(\"\")\n  const [loading, setLoading] = useState(false)\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setError(\"\")\n    setLoading(true)\n\n    try {\n      await signIn(email, password)\n    } catch (err: any) {\n      setError(err.message || \"Failed to sign in\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-sm\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-xl\">Sign in</CardTitle>\n          <CardDescription className=\"text-xs\">Enter your email and password to access the platform</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-3\">\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription className=\"text-xs\">{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"email\" className=\"text-xs\">\n                Email\n              </Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"name@example.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                className=\"h-8 text-xs\"\n              />\n            </div>\n\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"password\" className=\"text-xs\">\n                Password\n              </Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                className=\"h-8 text-xs\"\n              />\n            </div>\n\n            <Button type=\"submit\" className=\"h-8 w-full text-xs\" disabled={loading}>\n              {loading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-3 w-3 animate-spin\" />\n                  Signing in...\n                </>\n              ) : (\n                \"Sign in\"\n              )}\n            </Button>\n          </form>\n\n          <div className=\"mt-4 text-center text-xs text-gray-600\">\n            Don't have an account?{\" \"}\n            <Link href=\"/signup\" className=\"text-blue-600 hover:underline\">\n              Sign up\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(auth)/register/page.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport Link from \"next/link\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { AlertCircle } from \"lucide-react\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\n\nexport default function RegisterPage() {\n  const router = useRouter()\n  const { signUp } = useAuth()\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [error, setError] = useState<string | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const [isSuccess, setIsSuccess] = useState(false)\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setError(null)\n    setIsLoading(true)\n\n    try {\n      await signUp(email, password)\n      setIsSuccess(true)\n    } catch (error: any) {\n      setError(error.message || \"Failed to sign up\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  if (isSuccess) {\n    return (\n      <div className=\"flex min-h-screen flex-col items-center justify-center\">\n        <div className=\"mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]\">\n          <div className=\"flex flex-col space-y-2 text-center\">\n            <h1 className=\"text-2xl font-semibold tracking-tight\">Check your email</h1>\n            <p className=\"text-sm text-muted-foreground\">We&apos;ve sent you a confirmation link to {email}</p>\n          </div>\n          <Button asChild>\n            <Link href=\"/login\">Return to login</Link>\n          </Button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"flex min-h-screen flex-col items-center justify-center\">\n      <div className=\"mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]\">\n        <div className=\"flex flex-col space-y-2 text-center\">\n          <h1 className=\"text-2xl font-semibold tracking-tight\">Create an account</h1>\n          <p className=\"text-sm text-muted-foreground\">Enter your email below to create your account</p>\n        </div>\n        <div className=\"grid gap-6\">\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n          <form onSubmit={handleSubmit}>\n            <div className=\"grid gap-4\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  placeholder=\"name@example.com\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  autoCapitalize=\"none\"\n                  autoComplete=\"email\"\n                  autoCorrect=\"off\"\n                  disabled={isLoading}\n                  required\n                />\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  autoCapitalize=\"none\"\n                  autoComplete=\"new-password\"\n                  autoCorrect=\"off\"\n                  disabled={isLoading}\n                  required\n                />\n              </div>\n              <Button type=\"submit\" disabled={isLoading}>\n                {isLoading ? \"Creating account...\" : \"Create account\"}\n              </Button>\n            </div>\n          </form>\n          <div className=\"text-center text-sm\">\n            Already have an account?{\" \"}\n            <Link href=\"/login\" className=\"text-primary underline-offset-4 hover:underline\">\n              Sign in\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(auth)/signup/page.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Loader2 } from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport default function SignupPage() {\n  const { signUp } = useAuth()\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [confirmPassword, setConfirmPassword] = useState(\"\")\n  const [error, setError] = useState(\"\")\n  const [loading, setLoading] = useState(false)\n  const [success, setSuccess] = useState(false)\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setError(\"\")\n\n    if (password !== confirmPassword) {\n      setError(\"Passwords do not match\")\n      return\n    }\n\n    setLoading(true)\n\n    try {\n      await signUp(email, password)\n      setSuccess(true)\n    } catch (err: any) {\n      setError(err.message || \"Failed to sign up\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (success) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center bg-gray-50\">\n        <Card className=\"w-full max-w-sm\">\n          <CardHeader>\n            <CardTitle className=\"text-xl\">Check your email</CardTitle>\n            <CardDescription className=\"text-xs\">We've sent a confirmation link to {email}</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Link href=\"/login\">\n              <Button className=\"h-8 w-full text-xs\">Back to login</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-sm\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-xl\">Create an account</CardTitle>\n          <CardDescription className=\"text-xs\">Enter your details to create your account</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-3\">\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription className=\"text-xs\">{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"email\" className=\"text-xs\">\n                Email\n              </Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"name@example.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                className=\"h-8 text-xs\"\n              />\n            </div>\n\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"password\" className=\"text-xs\">\n                Password\n              </Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                className=\"h-8 text-xs\"\n              />\n            </div>\n\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"confirmPassword\" className=\"text-xs\">\n                Confirm Password\n              </Label>\n              <Input\n                id=\"confirmPassword\"\n                type=\"password\"\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                required\n                className=\"h-8 text-xs\"\n              />\n            </div>\n\n            <Button type=\"submit\" className=\"h-8 w-full text-xs\" disabled={loading}>\n              {loading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-3 w-3 animate-spin\" />\n                  Creating account...\n                </>\n              ) : (\n                \"Sign up\"\n              )}\n            </Button>\n          </form>\n\n          <div className=\"mt-4 text-center text-xs text-gray-600\">\n            Already have an account?{\" \"}\n            <Link href=\"/login\" className=\"text-blue-600 hover:underline\">\n              Sign in\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(auth)/layout.tsx\n```typescript\nimport type React from \"react\"\nexport default function AuthLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <>{children}</>\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/analytics/page.tsx\n```typescript\n\"use client\"\n\nimport { useEffect, useState } from \"react\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\"\nimport { formatCurrency } from \"@/lib/utils\"\nimport { BarChart3, TrendingUp, PieChartIcon as PieIcon, Activity, DollarSign, Home } from \"lucide-react\" // Renamed PieChart to PieIcon\nimport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n} from \"@/components/ui/chart\"\nimport { Bar, XAxis, YAxis, CartesianGrid, ResponsiveContainer, PieChart, Pie, Cell, BarChart } from \"recharts\" // Recharts components\n\n// ... (MetricCard and formatPriceRange remain the same for now, or can be refactored if needed)\nfunction MetricCard({ title, value, icon: Icon, change }: any) {\n  const isPositive = change > 0\n  const isNegative = change < 0\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-xs font-medium text-gray-600\">{title}</CardTitle>\n        <Icon className=\"h-3.5 w-3.5 text-gray-400\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-lg font-bold\">{value}</div>\n        {change !== undefined && (\n          <p className=\"text-xs text-muted-foreground\">\n            <span\n              className={`inline-flex items-center gap-x-1 ${\n                isPositive ? \"text-green-600\" : isNegative ? \"text-red-600\" : \"text-gray-600\"\n              }`}\n            >\n              {isPositive ? \"▲\" : isNegative ? \"▼\" : \"\"}\n              {Math.abs(change)}% from last month\n            </span>\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  )\n}\n\nfunction formatPriceRange(range: string): string {\n  const ranges: Record<string, string> = {\n    under500k: \"Under $500K\",\n    \"500k-1M\": \"$500K - $1M\",\n    \"1M-2M\": \"$1M - $2M\",\n    \"2M-5M\": \"$2M - $5M\",\n    over5M: \"Over $5M\",\n  }\n  return ranges[range] || range\n}\n\nconst PRICE_RANGE_COLORS = [\n  \"hsl(var(--chart-1))\",\n  \"hsl(var(--chart-2))\",\n  \"hsl(var(--chart-3))\",\n  \"hsl(var(--chart-4))\",\n  \"hsl(var(--chart-5))\",\n]\n\nexport default function AnalyticsPage() {\n  const [analytics, setAnalytics] = useState<any>(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    fetchAnalytics()\n  }, [])\n\n  async function fetchAnalytics() {\n    setLoading(true)\n    try {\n      const { data: properties } = await supabase\n        .from(\"listings\")\n        .select(\"list_price, interior_sqft, status, new_construction, city\")\n      const { data: builders } = await supabase.from(\"builders\").select(\"id, name, company_name\")\n\n      if (!properties) {\n        setAnalytics(null) // Or some default empty state\n        return\n      }\n      if (properties.length === 0) {\n        setAnalytics({\n          totalProperties: 0,\n          totalValue: 0,\n          avgListPrice: 0,\n          avgPricePerSqft: 0,\n          activeListings: 0,\n          newConstruction: 0,\n          soldProperties: 0,\n          priceRanges: {},\n          cityStats: {},\n          builderStats: [],\n          inventoryTurnover: 0,\n          newConstructionShare: 0,\n        })\n        return\n      }\n\n      const totalValue = properties.reduce((sum, p) => sum + (p.list_price || 0), 0)\n      const propertiesWithPrice = properties.filter((p) => p.list_price != null && p.list_price > 0)\n      const avgListPrice =\n        propertiesWithPrice.length > 0\n          ? propertiesWithPrice.reduce((sum, p) => sum + p.list_price!, 0) / propertiesWithPrice.length\n          : 0\n\n      const propertiesWithPriceAndSqft = properties.filter(\n        (p) => p.list_price != null && p.list_price > 0 && p.interior_sqft != null && p.interior_sqft > 0,\n      )\n      const avgPricePerSqft =\n        propertiesWithPriceAndSqft.length > 0\n          ? propertiesWithPriceAndSqft.reduce((sum, p) => sum + p.list_price! / p.interior_sqft!, 0) /\n            propertiesWithPriceAndSqft.length\n          : 0\n\n      const activeListings = properties.filter((p) => p.status === \"Active\")\n      const newConstructionProps = properties.filter((p) => p.new_construction)\n      const soldProperties = properties.filter((p) => p.status === \"Sold\")\n\n      const priceRangesData = [\n        {\n          name: \"Under $500K\",\n          value: properties.filter((p) => (p.list_price || 0) < 500000).length,\n          fill: PRICE_RANGE_COLORS[0],\n        },\n        {\n          name: \"$500K - $1M\",\n          value: properties.filter((p) => (p.list_price || 0) >= 500000 && (p.list_price || 0) < 1000000).length,\n          fill: PRICE_RANGE_COLORS[1],\n        },\n        {\n          name: \"$1M - $2M\",\n          value: properties.filter((p) => (p.list_price || 0) >= 1000000 && (p.list_price || 0) < 2000000).length,\n          fill: PRICE_RANGE_COLORS[2],\n        },\n        {\n          name: \"$2M - $5M\",\n          value: properties.filter((p) => (p.list_price || 0) >= 2000000 && (p.list_price || 0) < 5000000).length,\n          fill: PRICE_RANGE_COLORS[3],\n        },\n        {\n          name: \"Over $5M\",\n          value: properties.filter((p) => (p.list_price || 0) >= 5000000).length,\n          fill: PRICE_RANGE_COLORS[4],\n        },\n      ].filter((range) => range.value > 0)\n\n      const cityStats = properties.reduce((acc: any, p) => {\n        const city = p.city || \"Unknown\"\n        if (!acc[city]) {\n          acc[city] = { name: city, count: 0, totalValue: 0, avgPrice: 0 }\n        }\n        acc[city].count++\n        acc[city].totalValue += p.list_price || 0\n        acc[city].avgPrice = acc[city].totalValue / acc[city].count\n        return acc\n      }, {})\n      const cityChartData = Object.values(cityStats)\n        .sort((a: any, b: any) => b.totalValue - a.totalValue)\n        .slice(0, 6)\n\n      const builderStats = await Promise.all(\n        (builders || []).map(async (builder) => {\n          const { data: builderProperties, error } = await supabase\n            .from(\"listings\")\n            .select(\"list_price\")\n            .eq(\"builder_id\", builder.id)\n          if (error) {\n            console.error(`Error fetching properties for builder ${builder.id}:`, error)\n            return { ...builder, propertyCount: 0, totalValue: 0, avgPrice: 0 }\n          }\n\n          return {\n            ...builder,\n            propertyCount: builderProperties?.length || 0,\n            totalValue: builderProperties?.reduce((sum, p) => sum + (p.list_price || 0), 0) || 0,\n            avgPrice: builderProperties?.length\n              ? builderProperties.reduce((sum, p) => sum + (p.list_price || 0), 0) / builderProperties.length\n              : 0,\n          }\n        }),\n      )\n\n      setAnalytics({\n        totalProperties: properties.length,\n        totalValue,\n        avgListPrice,\n        avgPricePerSqft,\n        activeListings: activeListings.length,\n        newConstruction: newConstructionProps.length,\n        soldProperties: soldProperties.length,\n        priceRangesChartData: priceRangesData,\n        cityChartData: cityChartData,\n        builderStats: builderStats.sort((a, b) => b.totalValue - a.totalValue),\n        inventoryTurnover: properties.length > 0 ? (soldProperties.length / properties.length) * 100 : 0,\n        newConstructionShare: properties.length > 0 ? (newConstructionProps.length / properties.length) * 100 : 0,\n      })\n    } catch (error) {\n      console.error(\"Error fetching analytics:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4 p-4 md:p-6\">\n        <div className=\"h-8 bg-muted rounded w-1/4 animate-pulse mb-2\"></div>\n        <div className=\"h-4 bg-muted rounded w-1/2 animate-pulse\"></div>\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4 mt-4\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"h-28 animate-pulse bg-muted/50\"></Card>\n          ))}\n        </div>\n        <div className=\"grid gap-4 lg:grid-cols-2 mt-4\">\n          <Card className=\"h-72 animate-pulse bg-muted/50\"></Card>\n          <Card className=\"h-72 animate-pulse bg-muted/50\"></Card>\n        </div>\n      </div>\n    )\n  }\n\n  if (!analytics) {\n    return <div className=\"p-4 md:p-6 text-center text-muted-foreground\">No analytics data available.</div>\n  }\n\n  return (\n    <div className=\"space-y-6 p-4 md:p-6\">\n      <div>\n        <h1 className=\"text-2xl font-semibold\">Market Analytics</h1>\n        <p className=\"text-sm text-muted-foreground\">Advanced market analytics and performance metrics</p>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <MetricCard\n          title=\"Total Portfolio Value\"\n          value={formatCurrency(analytics?.totalValue)}\n          icon={DollarSign}\n          change={analytics?.totalValue > 1000000 ? 8.5 : undefined} // Example change\n        />\n        <MetricCard\n          title=\"Avg List Price\"\n          value={formatCurrency(analytics?.avgListPrice)}\n          icon={Home}\n          change={analytics?.avgListPrice > 100000 ? 3.2 : undefined}\n        />\n        <MetricCard\n          title=\"Avg Price/SqFt\"\n          value={formatCurrency(analytics?.avgPricePerSqft)}\n          icon={TrendingUp}\n          change={analytics?.avgPricePerSqft > 100 ? 5.1 : undefined}\n        />\n        <MetricCard\n          title=\"Inventory Turnover\"\n          value={`${analytics?.inventoryTurnover?.toFixed(1)}%`}\n          icon={Activity}\n          change={analytics?.inventoryTurnover > 10 ? -2.3 : undefined}\n        />\n      </div>\n\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base flex items-center gap-x-2\">\n              <PieIcon className=\"h-5 w-5 text-primary\" />\n              Price Distribution\n            </CardTitle>\n            <CardDescription>Distribution of listings by list price ranges.</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ChartContainer config={{}} className=\"mx-auto aspect-square max-h-[300px]\">\n              <PieChart>\n                <ChartTooltip content={<ChartTooltipContent nameKey=\"name\" hideLabel />} />\n                <Pie\n                  data={analytics.priceRangesChartData}\n                  dataKey=\"value\"\n                  nameKey=\"name\"\n                  labelLine={false}\n                  label={({ cx, cy, midAngle, innerRadius, outerRadius, percent, index }) => {\n                    const RADIAN = Math.PI / 180\n                    const radius = innerRadius + (outerRadius - innerRadius) * 0.5\n                    const x = cx + radius * Math.cos(-midAngle * RADIAN)\n                    const y = cy + radius * Math.sin(-midAngle * RADIAN)\n                    return percent * 100 > 5 ? ( // Only show label if percent is > 5%\n                      <text\n                        x={x}\n                        y={y}\n                        fill=\"white\"\n                        textAnchor={x > cx ? \"start\" : \"end\"}\n                        dominantBaseline=\"central\"\n                        fontSize=\"10px\"\n                      >\n                        {`${(percent * 100).toFixed(0)}%`}\n                      </text>\n                    ) : null\n                  }}\n                >\n                  {analytics.priceRangesChartData.map((entry: any, index: number) => (\n                    <Cell key={`cell-${index}`} fill={entry.fill} />\n                  ))}\n                </Pie>\n                <ChartLegend\n                  content={<ChartLegendContent nameKey=\"name\" />}\n                  className=\"-translate-y-2 flex-wrap gap-2 [&>*]:basis-1/4 [&>*]:justify-center\"\n                />\n              </PieChart>\n            </ChartContainer>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base flex items-center gap-x-2\">\n              <BarChart3 className=\"h-5 w-5 text-primary\" />\n              Top Markets by Value\n            </CardTitle>\n            <CardDescription>Total listing value by city (Top 6).</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ChartContainer\n              config={{\n                totalValue: { label: \"Total Value\", color: \"hsl(var(--chart-1))\" },\n              }}\n              className=\"h-[300px] w-full\"\n            >\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={analytics.cityChartData} layout=\"vertical\" margin={{ left: 10, right: 30 }}>\n                  <CartesianGrid horizontal={false} />\n                  <XAxis\n                    type=\"number\"\n                    dataKey=\"totalValue\"\n                    tickFormatter={(value) => `$${(value / 1000000).toFixed(0)}M`}\n                  />\n                  <YAxis type=\"category\" dataKey=\"name\" width={80} tickLine={false} axisLine={false} />\n                  <ChartTooltip cursor={false} content={<ChartTooltipContent indicator=\"line\" />} />\n                  <Bar dataKey=\"totalValue\" radius={5}>\n                    {analytics.cityChartData.map((entry: any, index: number) => (\n                      <Cell key={`cell-${index}`} fill={PRICE_RANGE_COLORS[index % PRICE_RANGE_COLORS.length]} />\n                    ))}\n                  </Bar>\n                </BarChart>\n              </ResponsiveContainer>\n            </ChartContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base\">Top Builder Performance</CardTitle>\n          <CardDescription>Overview of top builders by total listing value.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {analytics?.builderStats?.slice(0, 5).map((builder: any) => (\n              <div\n                key={builder.id}\n                className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center p-3 border rounded-lg hover:bg-muted/50\"\n              >\n                <div>\n                  <div className=\"text-sm font-medium text-primary\">{builder.name}</div>\n                  <div className=\"text-xs text-muted-foreground\">{builder.company_name}</div>\n                </div>\n                <div className=\"flex gap-4 mt-2 sm:mt-0 text-xs text-right\">\n                  <div>\n                    <div className=\"text-muted-foreground\">Listings</div>\n                    <div className=\"font-medium\">{builder.propertyCount}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-muted-foreground\">Avg Price</div>\n                    <div className=\"font-medium\">{formatCurrency(builder.avgPrice)}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-muted-foreground\">Total Value</div>\n                    <div className=\"font-medium\">{formatCurrency(builder.totalValue)}</div>\n                  </div>\n                </div>\n              </div>\n            ))}\n            {analytics?.builderStats?.length === 0 && (\n              <p className=\"text-sm text-muted-foreground text-center py-4\">No builder data available.</p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/builders/[id]/edit/page.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useEffect } from \"react\"\nimport { useParams, useRouter } from \"next/navigation\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { ArrowLeft, Save } from \"lucide-react\"\nimport Link from \"next/link\"\nimport { useToast } from \"@/hooks/use-toast\"\n\nexport default function EditBuilderPage() {\n  const params = useParams()\n  const router = useRouter()\n  const { toast } = useToast()\n  const [loading, setLoading] = useState(false)\n  const [initialLoading, setInitialLoading] = useState(true)\n  const [formData, setFormData] = useState({\n    name: \"\",\n    company_name: \"\",\n    phone: \"\",\n    email: \"\",\n    website: \"\",\n    address: \"\",\n    city: \"\",\n    state: \"\",\n    zip_code: \"\",\n    years_in_business: \"\",\n    total_projects: \"\",\n    active_projects: \"\",\n    price_range_min: \"\",\n    price_range_max: \"\",\n    specialties: \"\",\n    notes: \"\",\n  })\n\n  useEffect(() => {\n    if (params.id) {\n      fetchBuilder()\n    }\n  }, [params.id])\n\n  async function fetchBuilder() {\n    try {\n      const { data, error } = await supabase.from(\"builders\").select(\"*\").eq(\"id\", params.id).single()\n\n      if (error) throw error\n\n      setFormData({\n        name: data.name || \"\",\n        company_name: data.company_name || \"\",\n        phone: data.phone || \"\",\n        email: data.email || \"\",\n        website: data.website || \"\",\n        address: data.address || \"\",\n        city: data.city || \"\",\n        state: data.state || \"\",\n        zip_code: data.zip_code || \"\",\n        years_in_business: data.years_in_business?.toString() || \"\",\n        total_projects: data.total_projects?.toString() || \"\",\n        active_projects: data.active_projects?.toString() || \"\",\n        price_range_min: data.price_range_min?.toString() || \"\",\n        price_range_max: data.price_range_max?.toString() || \"\",\n        specialties: data.specialties?.join(\", \") || \"\",\n        notes: data.notes || \"\",\n      })\n    } catch (error) {\n      console.error(\"Error fetching builder:\", error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to load builder data.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setInitialLoading(false)\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n\n    try {\n      // Convert string numbers to actual numbers and process specialties\n      const builderData = {\n        ...formData,\n        years_in_business: formData.years_in_business ? Number.parseInt(formData.years_in_business) : null,\n        total_projects: formData.total_projects ? Number.parseInt(formData.total_projects) : null,\n        active_projects: formData.active_projects ? Number.parseInt(formData.active_projects) : null,\n        price_range_min: formData.price_range_min ? Number.parseFloat(formData.price_range_min) : null,\n        price_range_max: formData.price_range_max ? Number.parseFloat(formData.price_range_max) : null,\n        specialties: formData.specialties\n          ? formData.specialties\n              .split(\",\")\n              .map((s) => s.trim())\n              .filter(Boolean)\n          : null,\n      }\n\n      const { error } = await supabase.from(\"builders\").update(builderData).eq(\"id\", params.id)\n\n      if (error) throw error\n\n      toast({\n        title: \"Builder updated\",\n        description: \"Builder has been successfully updated.\",\n      })\n\n      router.push(`/builders/${params.id}`)\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update builder.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (initialLoading) {\n    return <div className=\"text-xs text-gray-600\">Loading...</div>\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center gap-x-2\">\n        <Button variant=\"ghost\" size=\"sm\" asChild>\n          <Link href={`/builders/${params.id}`}>\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Link>\n        </Button>\n        <h1 className=\"text-lg font-semibold\">Edit Builder</h1>\n      </div>\n\n      <form onSubmit={handleSubmit}>\n        <div className=\"grid gap-4 lg:grid-cols-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Basic Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"name\" className=\"text-xs\">\n                  Builder Name *\n                </Label>\n                <Input\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  className=\"h-8 text-xs\"\n                  required\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"company_name\" className=\"text-xs\">\n                  Company Name\n                </Label>\n                <Input\n                  id=\"company_name\"\n                  value={formData.company_name}\n                  onChange={(e) => setFormData({ ...formData, company_name: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"phone\" className=\"text-xs\">\n                  Phone\n                </Label>\n                <Input\n                  id=\"phone\"\n                  value={formData.phone}\n                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"email\" className=\"text-xs\">\n                  Email\n                </Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"website\" className=\"text-xs\">\n                  Website\n                </Label>\n                <Input\n                  id=\"website\"\n                  value={formData.website}\n                  onChange={(e) => setFormData({ ...formData, website: e.target.value })}\n                  className=\"h-8 text-xs\"\n                  placeholder=\"https://\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Address</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"address\" className=\"text-xs\">\n                  Street Address\n                </Label>\n                <Input\n                  id=\"address\"\n                  value={formData.address}\n                  onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"city\" className=\"text-xs\">\n                  City\n                </Label>\n                <Input\n                  id=\"city\"\n                  value={formData.city}\n                  onChange={(e) => setFormData({ ...formData, city: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <Label htmlFor=\"state\" className=\"text-xs\">\n                    State\n                  </Label>\n                  <Input\n                    id=\"state\"\n                    value={formData.state}\n                    onChange={(e) => setFormData({ ...formData, state: e.target.value })}\n                    className=\"h-8 text-xs\"\n                    placeholder=\"VA\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"zip_code\" className=\"text-xs\">\n                    Zip Code\n                  </Label>\n                  <Input\n                    id=\"zip_code\"\n                    value={formData.zip_code}\n                    onChange={(e) => setFormData({ ...formData, zip_code: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Business Details</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"years_in_business\" className=\"text-xs\">\n                  Years in Business\n                </Label>\n                <Input\n                  id=\"years_in_business\"\n                  type=\"number\"\n                  value={formData.years_in_business}\n                  onChange={(e) => setFormData({ ...formData, years_in_business: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <Label htmlFor=\"total_projects\" className=\"text-xs\">\n                    Total Projects\n                  </Label>\n                  <Input\n                    id=\"total_projects\"\n                    type=\"number\"\n                    value={formData.total_projects}\n                    onChange={(e) => setFormData({ ...formData, total_projects: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"active_projects\" className=\"text-xs\">\n                    Active Projects\n                  </Label>\n                  <Input\n                    id=\"active_projects\"\n                    type=\"number\"\n                    value={formData.active_projects}\n                    onChange={(e) => setFormData({ ...formData, active_projects: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <Label htmlFor=\"price_range_min\" className=\"text-xs\">\n                    Min Price Range\n                  </Label>\n                  <Input\n                    id=\"price_range_min\"\n                    type=\"number\"\n                    value={formData.price_range_min}\n                    onChange={(e) => setFormData({ ...formData, price_range_min: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"price_range_max\" className=\"text-xs\">\n                    Max Price Range\n                  </Label>\n                  <Input\n                    id=\"price_range_max\"\n                    type=\"number\"\n                    value={formData.price_range_max}\n                    onChange={(e) => setFormData({ ...formData, price_range_max: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Additional Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"specialties\" className=\"text-xs\">\n                  Specialties\n                </Label>\n                <Input\n                  id=\"specialties\"\n                  value={formData.specialties}\n                  onChange={(e) => setFormData({ ...formData, specialties: e.target.value })}\n                  className=\"h-8 text-xs\"\n                  placeholder=\"Luxury Homes, Custom Builds (comma separated)\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"notes\" className=\"text-xs\">\n                  Notes\n                </Label>\n                <Textarea\n                  id=\"notes\"\n                  value={formData.notes}\n                  onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                  className=\"text-xs\"\n                  rows={3}\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"flex justify-end gap-x-2 mt-4\">\n          <Button type=\"button\" variant=\"outline\" asChild>\n            <Link href={`/builders/${params.id}`}>Cancel</Link>\n          </Button>\n          <Button type=\"submit\" disabled={loading}>\n            {loading ? (\n              \"Updating...\"\n            ) : (\n              <>\n                <Save className=\"mr-2 h-4 w-4\" />\n                Update Builder\n              </>\n            )}\n          </Button>\n        </div>\n      </form>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/builders/[id]/page.tsx\n```typescript\n\"use client\"\n\nimport React from \"react\"\n\nimport { useEffect, useState } from \"react\"\nimport { useParams } from \"next/navigation\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { DataTable } from \"@/components/ui/data-table\" // Assuming this is the enhanced one\nimport { formatCurrency, formatNumber, formatDate, getFullAddress, getStatusColor } from \"@/lib/utils\"\nimport { ArrowLeft, Edit, Building2, Phone, Mail, Globe, BarChartIcon } from \"lucide-react\"\nimport Link from \"next/link\"\nimport type { ColumnDef } from \"@tanstack/react-table\"\nimport { DataTableColumnHeader } from \"@/components/ui/data-table-column-header\"\nimport { ChartContainer, ChartTooltip, ChartTooltipContent } from \"@/components/ui/chart\"\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Cell } from \"recharts\"\nimport type { Database } from \"@/types/supabase\"\n\ntype Listing = Database[\"public\"][\"Tables\"][\"listings\"][\"Row\"]\ntype Builder = Database[\"public\"][\"Tables\"][\"builders\"][\"Row\"]\n\nconst LISTING_CHART_COLORS = [\n  \"hsl(var(--chart-1))\",\n  \"hsl(var(--chart-2))\",\n  \"hsl(var(--chart-3))\",\n  \"hsl(var(--chart-4))\",\n  \"hsl(var(--chart-5))\",\n]\n\nexport default function BuilderDetailPage() {\n  const params = useParams()\n  const builderId = params.id as string\n  const [builder, setBuilder] = useState<Builder | null>(null)\n  const [listings, setListings] = useState<Listing[]>([])\n  const [loading, setLoading] = useState(true)\n  const [timeRange, setTimeRange] = useState(\"all\")\n\n  useEffect(() => {\n    if (builderId) {\n      fetchBuilderData()\n    }\n  }, [builderId, timeRange]) // Re-fetch if timeRange changes for properties\n\n  async function fetchBuilderData() {\n    setLoading(true)\n    try {\n      const { data: builderData, error: builderError } = await supabase\n        .from(\"builders\")\n        .select(\"*\")\n        .eq(\"id\", builderId)\n        .single()\n\n      if (builderError) throw builderError\n      setBuilder(builderData)\n\n      let query = supabase\n        .from(\"listings\")\n        .select(\"*\")\n        .eq(\"builder_id\", builderId)\n        .order(\"list_date\", { ascending: false })\n\n      if (timeRange !== \"all\") {\n        const now = new Date()\n        let cutoffDate: Date | null = null\n        switch (timeRange) {\n          case \"3m\":\n            cutoffDate = new Date(now.getFullYear(), now.getMonth() - 3, now.getDate())\n            break\n          case \"6m\":\n            cutoffDate = new Date(now.getFullYear(), now.getMonth() - 6, now.getDate())\n            break\n          case \"1y\":\n            cutoffDate = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate())\n            break\n          case \"3y\":\n            cutoffDate = new Date(now.getFullYear() - 3, now.getMonth(), now.getDate())\n            break\n          case \"5y\":\n            cutoffDate = new Date(now.getFullYear() - 5, now.getMonth(), now.getDate())\n            break\n        }\n        if (cutoffDate) {\n          query = query.gte(\"list_date\", cutoffDate.toISOString().split(\"T\")[0])\n        }\n      }\n\n      const { data: listingsData, error: listingsError } = await query\n      if (listingsError) throw listingsError\n      setListings(listingsData || [])\n    } catch (error) {\n      console.error(\"Error fetching builder data:\", error)\n      setBuilder(null) // Reset on error\n      setListings([])\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const chartData = listings\n    .filter((p) => p.list_date && p.list_price)\n    .map((property) => ({\n      date: new Date(property.list_date as string), // Ensure list_date is string\n      price: property.list_price,\n      mls: property.mls_number,\n      // For tooltip:\n      name: `${property.mls_number} - ${formatDate(property.list_date as string)}`,\n      value: property.list_price,\n    }))\n    .sort((a, b) => a.date.getTime() - b.date.getTime())\n\n  const listingColumns = React.useMemo<ColumnDef<Listing>[]>(\n    () => [\n      {\n        accessorKey: \"mls_number\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"MLS #\" />,\n        cell: ({ row }) => (\n          <Link href={`/listings/${row.original.id}`} className=\"font-medium hover:underline text-xs text-primary\">\n            {row.getValue(\"mls_number\") || \"-\"}\n          </Link>\n        ),\n      },\n      {\n        accessorKey: \"status\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Status\" />,\n        cell: ({ row }) => {\n          const status = row.getValue(\"status\") as string\n          return status ? (\n            <Badge variant=\"secondary\" className={`text-[10px] px-1.5 py-0 ${getStatusColor(status)}`}>\n              {status}\n            </Badge>\n          ) : (\n            \"-\"\n          )\n        },\n      },\n      {\n        accessorKey: \"address\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Address\" />,\n        cell: ({ row }) => <div className=\"max-w-xs truncate text-xs\">{getFullAddress(row.original)}</div>,\n      },\n      {\n        accessorKey: \"list_price\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"List Price\" />,\n        cell: ({ row }) => <span className=\"text-xs\">{formatCurrency(row.getValue(\"list_price\"))}</span>,\n      },\n      {\n        accessorKey: \"list_date\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Listed\" />,\n        cell: ({ row }) => <span className=\"text-xs\">{formatDate(row.getValue(\"list_date\"))}</span>,\n      },\n    ],\n    [],\n  )\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4 p-4 md:p-6\">\n        <div className=\"h-8 bg-muted rounded w-1/3 animate-pulse mb-2\"></div>\n        <div className=\"grid gap-4 lg:grid-cols-3\">\n          {[...Array(3)].map((_, i) => (\n            <Card key={i} className=\"h-36 animate-pulse bg-muted/50\"></Card>\n          ))}\n        </div>\n        <Card className=\"h-72 animate-pulse bg-muted/50\"></Card>\n        <Card className=\"h-96 animate-pulse bg-muted/50\"></Card>\n      </div>\n    )\n  }\n\n  if (!builder) {\n    return <div className=\"p-4 md:p-6 text-center text-muted-foreground\">Builder not found or failed to load.</div>\n  }\n\n  const totalPropertyValue = listings.reduce((sum, l) => sum + (l.list_price || 0), 0)\n  const avgPropertyValue = listings.length > 0 ? totalPropertyValue / listings.length : 0\n\n  return (\n    <div className=\"space-y-6 p-4 md:p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-x-3\">\n          <Button variant=\"outline\" size=\"icon\" className=\"h-8 w-8\" asChild>\n            <Link href=\"/builders\">\n              <ArrowLeft className=\"h-4 w-4\" />\n              <span className=\"sr-only\">Back to Builders</span>\n            </Link>\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-semibold\">{builder.name}</h1>\n            {builder.company_name && <p className=\"text-sm text-muted-foreground\">{builder.company_name}</p>}\n          </div>\n        </div>\n        <Button size=\"sm\" className=\"h-8 text-xs\" asChild>\n          <Link href={`/builders/${builderId}/edit`}>\n            <Edit className=\"mr-1.5 h-3.5 w-3.5\" />\n            Edit Builder\n          </Link>\n        </Button>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Contact Information</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2 text-sm\">\n            {builder.phone && (\n              <div className=\"flex items-center gap-x-2\">\n                <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                <span>{builder.phone}</span>\n              </div>\n            )}\n            {builder.email && (\n              <div className=\"flex items-center gap-x-2\">\n                <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                <a href={`mailto:${builder.email}`} className=\"text-primary hover:underline\">\n                  {builder.email}\n                </a>\n              </div>\n            )}\n            {builder.website && (\n              <div className=\"flex items-center gap-x-2\">\n                <Globe className=\"h-4 w-4 text-muted-foreground\" />\n                <a\n                  href={builder.website}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"text-primary hover:underline truncate\"\n                >\n                  {builder.website.replace(/^https?:\\/\\//, \"\")}\n                </a>\n              </div>\n            )}\n            {builder.address && (\n              <div className=\"flex items-start gap-x-2\">\n                <Building2 className=\"h-4 w-4 text-muted-foreground mt-0.5\" />\n                <span>\n                  {builder.address}\n                  {builder.city && `, ${builder.city}`}\n                  {builder.state && `, ${builder.state}`} {builder.zip_code}\n                </span>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Builder Stats</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-1.5 text-sm\">\n            <div className=\"flex justify-between\">\n              <span>Years in Business:</span> <span className=\"font-medium\">{builder.years_in_business || \"-\"}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Total Projects:</span> <span className=\"font-medium\">{formatNumber(builder.total_projects)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Active Projects:</span> <span className=\"font-medium\">{formatNumber(builder.active_projects)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Listings in DB:</span> <span className=\"font-medium\">{listings.length}</span>\n            </div>\n            {builder.rating && (\n              <div className=\"flex justify-between\">\n                <span>Rating:</span> <Badge variant=\"secondary\">★ {builder.rating}</Badge>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Financials</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-1.5 text-sm\">\n            <div className=\"flex justify-between\">\n              <span>Min Price Range:</span>{\" \"}\n              <span className=\"font-medium\">{formatCurrency(builder.price_range_min)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Max Price Range:</span>{\" \"}\n              <span className=\"font-medium\">{formatCurrency(builder.price_range_max)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Avg. Listing (DB):</span> <span className=\"font-medium\">{formatCurrency(avgPropertyValue)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Total Value (DB):</span> <span className=\"font-medium\">{formatCurrency(totalPropertyValue)}</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        {builder.specialties && (builder.specialties as string[]).length > 0 && (\n          <Card className=\"md:col-span-2 lg:col-span-1\">\n            <CardHeader>\n              <CardTitle className=\"text-base\">Specialties</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex flex-wrap gap-2\">\n                {(builder.specialties as string[]).map((specialty: string, index: number) => (\n                  <Badge key={index} variant=\"outline\">\n                    {specialty}\n                  </Badge>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <div>\n            <CardTitle className=\"text-base flex items-center gap-x-2\">\n              <BarChartIcon className=\"h-5 w-5 text-primary\" />\n              Listings Over Time\n            </CardTitle>\n            <CardDescription>Price of properties listed by this builder.</CardDescription>\n          </div>\n          <Select value={timeRange} onValueChange={setTimeRange}>\n            <SelectTrigger className=\"w-36 h-8 text-xs\">\n              <SelectValue placeholder=\"Select time range\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"3m\">Last 3 Months</SelectItem>\n              <SelectItem value=\"6m\">Last 6 Months</SelectItem>\n              <SelectItem value=\"1y\">Last Year</SelectItem>\n              <SelectItem value=\"3y\">Last 3 Years</SelectItem>\n              <SelectItem value=\"5y\">Last 5 Years</SelectItem>\n              <SelectItem value=\"all\">All Time</SelectItem>\n            </SelectContent>\n          </Select>\n        </CardHeader>\n        <CardContent>\n          {chartData.length > 0 ? (\n            <ChartContainer\n              config={{ price: { label: \"Price\", color: \"hsl(var(--chart-1))\" } }}\n              className=\"h-[300px] w-full\"\n            >\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={chartData} margin={{ top: 5, right: 20, left: 20, bottom: 5 }}>\n                  <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n                  <XAxis\n                    dataKey=\"date\"\n                    tickFormatter={(value) =>\n                      new Date(value).toLocaleDateString(\"en-US\", { month: \"short\", year: \"2-digit\" })\n                    }\n                    angle={-45}\n                    textAnchor=\"end\"\n                    height={50}\n                    interval=\"preserveStartEnd\"\n                  />\n                  <YAxis tickFormatter={(value) => `$${(value / 1000000).toFixed(1)}M`} />\n                  <ChartTooltip\n                    cursor={false}\n                    content={\n                      <ChartTooltipContent\n                        formatter={(value, name) => (name === \"price\" ? formatCurrency(value as number) : value)}\n                        labelFormatter={(label, payload) =>\n                          payload?.[0]?.payload.name || new Date(label).toLocaleDateString()\n                        }\n                      />\n                    }\n                  />\n                  <Bar dataKey=\"price\" radius={4}>\n                    {chartData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={LISTING_CHART_COLORS[index % LISTING_CHART_COLORS.length]} />\n                    ))}\n                  </Bar>\n                </BarChart>\n              </ResponsiveContainer>\n            </ChartContainer>\n          ) : (\n            <div className=\"h-[300px] flex items-center justify-center text-muted-foreground text-sm\">\n              No listings found for the selected time range.\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base\">Associated Listings ({listings.length})</CardTitle>\n          <CardDescription>All listings by this builder in the database.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <DataTable columns={listingColumns} data={listings} loading={loading} />\n        </CardContent>\n      </Card>\n\n      {/* Map placeholder can remain or be enhanced later */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base\">Listing Locations (Placeholder)</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-64 bg-muted border rounded flex items-center justify-center text-muted-foreground\">\n            Map integration coming soon\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/builders/loading.tsx\n```typescript\nexport default function Loading() {\n  return null\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/builders/page.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\" // Changed from useEffect, useState\nimport { supabase } from \"@/lib/supabase/client\"\nimport { Input } from \"@/components/ui/input\" // Keep for search\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Plus, Building2, Phone, Mail, Globe, Edit, Trash2 } from \"lucide-react\" // Added Edit, Trash2\nimport Link from \"next/link\" // Keep for builder name link\nimport type { Database } from \"@/types/supabase\"\nimport { BuilderFormDialog } from \"@/components/builder-form-dialog\" // Import new dialog\nimport { useToast } from \"@/hooks/use-toast\" // For delete action\n\ntype Builder = Database[\"public\"][\"Tables\"][\"builders\"][\"Row\"] & {\n  listings_count?: number // Renamed from properties_count\n}\n\nfunction BuilderCard({\n  builder,\n  onEdit,\n  onDelete,\n}: {\n  builder: Builder\n  onEdit: (builder: Builder) => void\n  onDelete: (builderId: string, builderName: string) => void\n}) {\n  return (\n    <Card className=\"flex flex-col h-full group relative\">\n      <div className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity flex gap-1\">\n        <Button variant=\"outline\" size=\"icon\" className=\"h-7 w-7\" onClick={() => onEdit(builder)}>\n          <Edit className=\"h-3.5 w-3.5\" />\n          <span className=\"sr-only\">Edit Builder</span>\n        </Button>\n        <Button\n          variant=\"destructive\"\n          size=\"icon\"\n          className=\"h-7 w-7\"\n          onClick={() => onDelete(builder.id, builder.name || \"this builder\")}\n        >\n          <Trash2 className=\"h-3.5 w-3.5\" />\n          <span className=\"sr-only\">Delete Builder</span>\n        </Button>\n      </div>\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"text-sm\">\n          <Link href={`/builders/${builder.id}`} className=\"hover:underline\">\n            {builder.name}\n          </Link>\n        </CardTitle>\n        {builder.company_name && <CardDescription className=\"text-xs\">{builder.company_name}</CardDescription>}\n      </CardHeader>\n      <CardContent className=\"flex-grow space-y-2 text-xs\">\n        {builder.phone && (\n          <div className=\"flex items-center gap-x-1.5 text-muted-foreground\">\n            <Phone className=\"h-3 w-3\" />\n            <span>{builder.phone}</span>\n          </div>\n        )}\n        {builder.email && (\n          <div className=\"flex items-center gap-x-1.5 text-muted-foreground\">\n            <Mail className=\"h-3 w-3\" />\n            <a href={`mailto:${builder.email}`} className=\"hover:underline text-primary\">\n              {builder.email}\n            </a>\n          </div>\n        )}\n        {builder.website && (\n          <div className=\"flex items-center gap-x-1.5 text-muted-foreground\">\n            <Globe className=\"h-3 w-3\" />\n            <a\n              href={builder.website}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"hover:underline text-primary truncate\"\n            >\n              {builder.website.replace(/^https?:\\/\\//, \"\")}\n            </a>\n          </div>\n        )}\n        {builder.specialties && builder.specialties.length > 0 && (\n          <div className=\"pt-1\">\n            <span className=\"font-medium text-foreground\">Specialties:</span>\n            <div className=\"flex flex-wrap gap-1 mt-1\">\n              {(builder.specialties as string[]).slice(0, 3).map((specialty: string, index: number) => (\n                <Badge key={index} variant=\"secondary\" className=\"text-[10px] px-1.5 py-0.5\">\n                  {specialty}\n                </Badge>\n              ))}\n              {(builder.specialties as string[]).length > 3 && (\n                <Badge variant=\"outline\" className=\"text-[10px] px-1.5 py-0.5\">\n                  +{(builder.specialties as string[]).length - 3} more\n                </Badge>\n              )}\n            </div>\n          </div>\n        )}\n      </CardContent>\n      <CardFooter className=\"text-xs text-muted-foreground pt-3\">\n        <div className=\"flex items-center gap-x-1\">\n          <Building2 className=\"h-3 w-3\" />\n          <span>{builder.listings_count || 0} Listings</span>\n        </div>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default function BuildersPage() {\n  const [builders, setBuilders] = React.useState<Builder[]>([])\n  const [loading, setLoading] = React.useState(true)\n  const [searchTerm, setSearchTerm] = React.useState(\"\")\n  const [isBuilderFormOpen, setIsBuilderFormOpen] = React.useState(false) // State for new dialog\n  const [editingBuilder, setEditingBuilder] = React.useState<Partial<Builder> | undefined>(undefined)\n  const { toast } = useToast()\n\n  const fetchBuilders = React.useCallback(async () => {\n    setLoading(true)\n    try {\n      const { data, error } = await supabase.from(\"builders\").select(`*, listings (count)`).order(\"name\") // Changed 'properties' to 'listings'\n\n      if (error) throw error\n\n      const enrichedBuilders =\n        data?.map((builder) => ({\n          ...builder,\n          // @ts-ignore - Supabase types for related table counts can be tricky\n          listings_count: builder.listings && builder.listings.length > 0 ? builder.listings[0]?.count || 0 : 0, // Access count from 'listings'\n        })) || []\n\n      setBuilders(enrichedBuilders)\n    } catch (error) {\n      console.error(\"Error fetching builders:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }, [])\n\n  React.useEffect(() => {\n    fetchBuilders()\n  }, [fetchBuilders])\n\n  const handleOpenNewBuilderDialog = () => {\n    setEditingBuilder(undefined)\n    setIsBuilderFormOpen(true)\n  }\n\n  const handleOpenEditBuilderDialog = (builder: Builder) => {\n    setEditingBuilder(builder)\n    setIsBuilderFormOpen(true)\n  }\n\n  const handleDeleteBuilder = async (builderId: string, builderName: string) => {\n    if (!confirm(`Are you sure you want to delete ${builderName}? This action cannot be undone.`)) {\n      return\n    }\n    try {\n      const { error } = await supabase.from(\"builders\").delete().eq(\"id\", builderId)\n      if (error) throw error\n      toast({ title: \"Builder Deleted\", description: `${builderName} has been successfully deleted.` })\n      fetchBuilders() // Refresh the list\n    } catch (error: any) {\n      toast({ title: \"Error\", description: error.message || \"Failed to delete builder.\", variant: \"destructive\" })\n    }\n  }\n\n  const filteredBuilders = builders.filter((builder) => {\n    if (!searchTerm) return true\n    const searchLower = searchTerm.toLowerCase()\n    return (\n      builder.name?.toLowerCase().includes(searchLower) ||\n      builder.company_name?.toLowerCase().includes(searchLower) ||\n      builder.email?.toLowerCase().includes(searchLower) ||\n      (builder.specialties as string[])?.some((s: string) => s.toLowerCase().includes(searchLower))\n    )\n  })\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-lg font-semibold\">Builders</h1>\n          <p className=\"text-xs text-muted-foreground\">{filteredBuilders.length} builders found</p>\n        </div>\n        <Button size=\"sm\" className=\"h-7 text-xs\" onClick={handleOpenNewBuilderDialog}>\n          {\" \"}\n          {/* Changed this line */}\n          <Plus className=\"mr-1.5 h-3 w-3\" />\n          Add Builder\n        </Button>\n      </div>\n\n      <Input\n        placeholder=\"Search builders by name, company, email, specialty...\"\n        value={searchTerm}\n        onChange={(e) => setSearchTerm(e.target.value)}\n        className=\"h-8 text-xs max-w-md attio-input\"\n      />\n\n      {loading ? (\n        <div className=\"grid grid-cols-1 gap-3 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\">\n          {[...Array(8)].map((_, i) => (\n            <Card key={i}>\n              <CardHeader className=\"pb-3\">\n                <div className=\"h-4 bg-muted rounded w-3/4 animate-pulse\"></div>\n                <div className=\"h-3 bg-muted rounded w-1/2 mt-1 animate-pulse\"></div>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <div className=\"h-3 bg-muted rounded w-full animate-pulse\"></div>\n                <div className=\"h-3 bg-muted rounded w-5/6 animate-pulse\"></div>\n              </CardContent>\n              <CardFooter>\n                <div className=\"h-3 bg-muted rounded w-1/4 animate-pulse\"></div>\n              </CardFooter>\n            </Card>\n          ))}\n        </div>\n      ) : filteredBuilders.length > 0 ? (\n        <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\">\n          {filteredBuilders.map((builder) => (\n            <BuilderCard\n              key={builder.id}\n              builder={builder}\n              onEdit={handleOpenEditBuilderDialog}\n              onDelete={handleDeleteBuilder}\n            />\n          ))}\n        </div>\n      ) : (\n        <div className=\"text-center py-10 text-muted-foreground\">No builders found matching your search.</div>\n      )}\n      <BuilderFormDialog // Add the new dialog component\n        open={isBuilderFormOpen}\n        onOpenChange={setIsBuilderFormOpen}\n        onBuilderCreated={fetchBuilders} // Refresh list on creation\n        builder={editingBuilder}\n      />\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/dashboard/page.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\nimport { useEffect, useState } from \"react\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { formatCurrency, formatNumber } from \"@/lib/utils\"\nimport { Building2, TrendingUp, DollarSign, Home, MapPin } from \"lucide-react\"\nimport MapboxMap, { type MappableListing } from \"@/components/mapbox-map\" // Import the new MapboxMap component\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { Loader2 } from \"lucide-react\"\n\ninterface DashboardStats {\n  totalProperties: number\n  activeListings: number\n  newConstruction: number\n  avgListPrice: number\n  totalBuilders: number\n  underConstruction: number\n}\n\nexport default function DashboardPage() {\n  const { user } = useAuth()\n  const [stats, setStats] = useState<DashboardStats | null>(null)\n  const [loadingStats, setLoadingStats] = useState(true)\n  const [mapProperties, setMapProperties] = useState<MappableListing[]>([])\n  const [loadingMapProps, setLoadingMapProps] = useState(true)\n  const [userMapboxApiKey, setUserMapboxApiKey] = useState<string | null>(null)\n  const [loadingApiKey, setLoadingApiKey] = useState(true)\n\n  useEffect(() => {\n    async function fetchStats() {\n      setLoadingStats(true)\n      try {\n        const { count: totalProperties } = await supabase.from(\"listings\").select(\"*\", { count: \"exact\", head: true })\n        const { count: activeListings } = await supabase\n          .from(\"listings\")\n          .select(\"*\", { count: \"exact\", head: true })\n          .eq(\"status\", \"Active\")\n        const { count: newConstruction } = await supabase\n          .from(\"listings\")\n          .select(\"*\", { count: \"exact\", head: true })\n          .eq(\"new_construction\", true)\n        const { count: underConstruction } = await supabase\n          .from(\"listings\")\n          .select(\"*\", { count: \"exact\", head: true })\n          .eq(\"development_status\", \"under_construction\")\n        const { data: priceData } = await supabase.from(\"listings\").select(\"list_price\").not(\"list_price\", \"is\", null)\n        const avgListPrice = priceData?.length\n          ? priceData.reduce((sum, p) => sum + (p.list_price || 0), 0) / priceData.length\n          : 0\n        const { count: totalBuilders } = await supabase.from(\"builders\").select(\"*\", { count: \"exact\", head: true })\n\n        setStats({\n          totalProperties: totalProperties || 0,\n          activeListings: activeListings || 0,\n          newConstruction: newConstruction || 0,\n          avgListPrice,\n          totalBuilders: totalBuilders || 0,\n          underConstruction: underConstruction || 0,\n        })\n      } catch (error) {\n        console.error(\"Error fetching stats:\", error)\n      } finally {\n        setLoadingStats(false)\n      }\n    }\n\n    // Update the fetchMapProperties function to include additional fields for the popup\n    async function fetchMapProperties() {\n      setLoadingMapProps(true)\n      try {\n        const { data, error } = await supabase\n          .from(\"listings\")\n          .select(`\n        id, \n        address_line_1, \n        city, \n        state, \n        latitude, \n        longitude, \n        status, \n        list_price,\n        builders(name)\n      `)\n          .in(\"status\", [\"Active\", \"Coming Soon\"]) // Filter for Active or Coming Soon\n\n        if (error) throw error\n\n        // Transform the data to include builder_name\n        const transformedData =\n          data?.map((property) => ({\n            ...property,\n            builder_name: property.builders?.name || null,\n          })) || []\n\n        setMapProperties(transformedData as MappableListing[])\n      } catch (error) {\n        console.error(\"Error fetching map properties:\", error)\n        setMapProperties([])\n      } finally {\n        setLoadingMapProps(false)\n      }\n    }\n\n    async function fetchUserApiKey() {\n      if (!user) {\n        setLoadingApiKey(false)\n        return\n      }\n      setLoadingApiKey(true)\n      try {\n        const { data, error } = await supabase\n          .from(\"user_settings\")\n          .select(\"mapbox_api_key\")\n          .eq(\"user_id\", user.id)\n          .single()\n        if (error && error.code !== \"PGRST116\") throw error\n        setUserMapboxApiKey(data?.mapbox_api_key || null)\n      } catch (error) {\n        console.error(\"Error fetching Mapbox API key:\", error)\n      } finally {\n        setLoadingApiKey(false)\n      }\n    }\n\n    fetchStats()\n    fetchMapProperties()\n    fetchUserApiKey()\n  }, [user])\n\n  const isLoading = loadingStats || loadingMapProps || loadingApiKey\n\n  return (\n    <div className=\"space-y-4 h-full flex flex-col\">\n      <div>\n        <h1 className=\"text-lg font-semibold\">Dashboard</h1>\n        <p className=\"text-xs text-gray-600\">Luxury residential new construction market overview</p>\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-3 lg:grid-cols-3 xl:grid-cols-6\">\n        <StatCard title=\"Total Listings\" value={stats?.totalProperties} icon={Home} loading={isLoading} />\n        <StatCard title=\"Active Listings\" value={stats?.activeListings} icon={Building2} loading={isLoading} />\n        <StatCard title=\"New Construction\" value={stats?.newConstruction} icon={TrendingUp} loading={isLoading} />\n        <StatCard title=\"Under Construction\" value={stats?.underConstruction} icon={Building2} loading={isLoading} />\n        <StatCard\n          title=\"Avg List Price\"\n          value={stats?.avgListPrice}\n          icon={DollarSign}\n          loading={isLoading}\n          formatter={formatCurrency}\n        />\n        <StatCard title=\"Total Builders\" value={stats?.totalBuilders} icon={Building2} loading={isLoading} />\n      </div>\n\n      <div className=\"grid grid-cols-1 gap-4 lg:grid-cols-3 flex-1 min-h-0\">\n        <Card className=\"lg:col-span-2 flex flex-col h-full\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm flex items-center\">\n              <MapPin className=\"mr-2 h-4 w-4\" /> Listing Map (Active & Coming Soon)\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"flex-1 p-0 min-h-0\">\n            {\" \"}\n            {/* Set a fixed height for the map container */}\n            {loadingApiKey ? (\n              <div className=\"flex items-center justify-center h-full\">\n                <Loader2 className=\"h-6 w-6 animate-spin\" /> <span className=\"ml-2\">Loading Map Data...</span>\n              </div>\n            ) : (\n              <MapboxMap\n                userApiKey={userMapboxApiKey}\n                properties={mapProperties}\n                className=\"rounded-b-lg w-full h-full\" // Ensure full width and height\n              />\n            )}\n          </CardContent>\n        </Card>\n\n        <div className=\"space-y-4 lg:col-span-1\">\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm\">Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 text-xs\">\n                <div className=\"flex justify-between border-b pb-1\">\n                  <span className=\"text-gray-600\">New listings (7d)</span>\n                  <span className=\"font-medium\">12</span>\n                </div>\n                <div className=\"flex justify-between border-b pb-1\">\n                  <span className=\"text-gray-600\">Price changes (7d)</span>\n                  <span className=\"font-medium\">8</span>\n                </div>\n                <div className=\"flex justify-between border-b pb-1\">\n                  <span className=\"text-gray-600\">Sold (30d)</span>\n                  <span className=\"font-medium\">23</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Avg DOM</span>\n                  <span className=\"font-medium\">45 days</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm\">Market Trends</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 text-xs\">\n                <div className=\"flex justify-between border-b pb-1\">\n                  <span className=\"text-gray-600\">Median price change</span>\n                  <span className=\"font-medium text-green-600\">+3.2%</span>\n                </div>\n                <div className=\"flex justify-between border-b pb-1\">\n                  <span className=\"text-gray-600\">Inventory change</span>\n                  <span className=\"font-medium text-red-600\">-12%</span>\n                </div>\n                <div className=\"flex justify-between border-b pb-1\">\n                  <span className=\"text-gray-600\">New construction share</span>\n                  <span className=\"font-medium\">18%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Price per sq ft</span>\n                  <span className=\"font-medium\">$425</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}\n\ninterface StatCardProps {\n  title: string\n  value?: number\n  icon: React.ElementType\n  loading: boolean\n  formatter?: (value: number) => string\n}\n\nfunction StatCard({ title, value, icon: Icon, loading, formatter = formatNumber }: StatCardProps) {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-xs font-medium text-gray-600\">{title}</CardTitle>\n        <Icon className=\"h-3.5 w-3.5 text-gray-400\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-lg font-bold\">\n          {loading ? <div className=\"h-6 w-16 animate-pulse rounded bg-gray-200\" /> : formatter(value || 0)}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/import/page.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\nimport { useState, useCallback, useMemo, useEffect } from \"react\"\nimport { useDropzone } from \"react-dropzone\"\nimport Papa from \"papaparse\"\nimport { Button } from \"@/components/ui/button\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport {\n  UploadCloud,\n  FileText,\n  CheckCircle,\n  XCircle,\n  Info,\n  Loader2,\n  AlertCircle,\n  Settings2,\n  ChevronLeft,\n  ChevronRight,\n} from \"lucide-react\"\nimport type { Database } from \"@/types/supabase\"\nimport { parseCSVValue, toTitleCase, formatDate, normalizeHeader } from \"@/lib/utils\"\nimport { FieldMappingSheet } from \"@/components/field-mapping-sheet\"\nimport { listingTableColumns, type MappedDbColumn, type ListingFieldDefinition } from \"@/lib/listing-fields\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Label } from \"@/components/ui/label\"\n\ntype ListingInsert = Database[\"public\"][\"Tables\"][\"listings\"][\"Insert\"]\ntype ListingRow = Database[\"public\"][\"Tables\"][\"listings\"][\"Row\"]\ntype UserFieldMappingInsert = Database[\"public\"][\"Tables\"][\"user_field_mappings\"][\"Insert\"]\n\ninterface ImportResult {\n  totalRecords: number\n  newRecordsAdded: number\n  recordsUpdated: number\n  ignoredOrDuplicate: number\n  failedDueToError: number\n  errors: string[]\n}\n\ninterface PreprocessingStats {\n  totalCsvRecords: number\n  newCsvRecords: number\n  matchedCsvRecords: number\n  totalCsvFields: number\n  autoMatchedCsvFields: number\n  unmatchedCsvFields: number\n}\n\ntype UploadHistoryEntry = Database[\"public\"][\"Tables\"][\"csv_uploads\"][\"Row\"]\n\n// Define a more specific type for metadata if its structure is known\ninterface CsvUploadMetadata {\n  duration_seconds?: number\n  ignored_records?: number\n  override_existing?: boolean\n  // Add other potential metadata fields here\n}\n\nconst baseStyle: React.CSSProperties = {\n  flex: 1,\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  padding: \"20px\",\n  borderWidth: 2,\n  borderRadius: \"0.5rem\",\n  borderColor: \"#e2e8f0\",\n  borderStyle: \"dashed\",\n  backgroundColor: \"#f8fafc\",\n  color: \"#64748b\",\n  outline: \"none\",\n  transition: \"border .24s ease-in-out\",\n  minHeight: \"160px\",\n}\n\nconst activeStyle: React.CSSProperties = { borderColor: \"#2563eb\" }\nconst acceptStyle: React.CSSProperties = { borderColor: \"#16a34a\" }\nconst rejectStyle: React.CSSProperties = { borderColor: \"#dc2626\" }\n\nconst statusMapping: Record<string, string> = {\n  \"A/C\": \"Active Under Contract\",\n  ACT: \"Active\",\n  \"C/S\": \"Coming Soon\",\n  CLS: \"Closed\",\n  CNL: \"Canceled\",\n  PND: \"Pending\",\n  \"T/O\": \"Temporary Off Market\",\n  WTH: \"Withdrawn\",\n  EXP: \"Expired\",\n}\n\nconst defaultCsvToDbMapping: Record<\n  string,\n  { dbCol: ListingFieldDefinition[\"value\"]; typeHint: ListingFieldDefinition[\"typeHint\"] }\n> = {\n  MLS_NUMBER: { dbCol: \"mls_number\", typeHint: \"string\" },\n  MLS_: { dbCol: \"mls_number\", typeHint: \"string\" },\n  DOM: { dbCol: \"dom\", typeHint: \"number\" },\n  CDOM: { dbCol: \"cdom\", typeHint: \"number\" },\n  LIST_DATE: { dbCol: \"list_date\", typeHint: \"date\" },\n  STATUS: { dbCol: \"status\", typeHint: \"string\" },\n  SUBDIVISION: { dbCol: \"subdivision\", typeHint: \"string\" },\n  AGREEMENT_DATE: { dbCol: \"agreement_date\", typeHint: \"date\" },\n  OFF_MARKET_DATE: { dbCol: \"off_market_date\", typeHint: \"date\" },\n  SETTLED_DATE: { dbCol: \"settled_date\", typeHint: \"date\" },\n  ORIGINAL_PRICE: { dbCol: \"original_price\", typeHint: \"number\" },\n  LIST_PRICE: { dbCol: \"list_price\", typeHint: \"number\" },\n  SOLD_PRICE: { dbCol: \"sold_price\", typeHint: \"number\" },\n  STREET_NUMBER: { dbCol: \"street_number\", typeHint: \"string\" },\n  STREET_DIRECTION: { dbCol: \"street_direction\", typeHint: \"string\" },\n  STREET_NAME: { dbCol: \"street_name\", typeHint: \"string\" },\n  UNIT_NUMBER: { dbCol: \"unit_number\", typeHint: \"string\" },\n  CITY: { dbCol: \"city\", typeHint: \"string\" },\n  STATE: { dbCol: \"state\", typeHint: \"string\" },\n  ZIP_CODE: { dbCol: \"zip_code\", typeHint: \"string\" },\n  COUNTY: { dbCol: \"county\", typeHint: \"string\" },\n  MLS_AREA: { dbCol: \"mls_area\", typeHint: \"string\" },\n  LIST_AGENT_NAME: { dbCol: \"list_agent_name\", typeHint: \"string\" },\n  LIST_AGENT_CODE: { dbCol: \"list_agent_code\", typeHint: \"string\" },\n  LIST_OFFICE_NAME: { dbCol: \"list_office_name\", typeHint: \"string\" },\n  LIST_OFFICE_CODE: { dbCol: \"list_office_code\", typeHint: \"string\" },\n  LIST_OFFICE_PHONE: { dbCol: \"list_office_phone\", typeHint: \"string\" },\n  SELLING_AGENT: { dbCol: \"selling_agent\", typeHint: \"string\" },\n  SELLING_AGENT_CODE: { dbCol: \"selling_agent_code\", typeHint: \"string\" },\n  SELLING_OFFICE_NAME: { dbCol: \"selling_office_name\", typeHint: \"string\" },\n  SELLING_OFFICE_CODE: { dbCol: \"selling_office_code\", typeHint: \"string\" },\n  SELLING_OFFICE_PHONE: { dbCol: \"selling_office_phone\", typeHint: \"string\" },\n  FINAL_FINANCING: { dbCol: \"final_financing\", typeHint: \"string\" },\n  FINAL_SHORT_SALE: { dbCol: \"final_short_sale\", typeHint: \"boolean\" },\n  FINAL_THIRD_PARTY_APPROVAL: { dbCol: \"final_third_party_approval\", typeHint: \"boolean\" },\n  FINAL_BANK_OWNED: { dbCol: \"final_bank_owned\", typeHint: \"boolean\" },\n  TAX_ANNUAL_TOTAL: { dbCol: \"tax_annual_total\", typeHint: \"number\" },\n  TAX_YEAR: { dbCol: \"tax_year\", typeHint: \"number\" },\n  ACRES_TOTAL: { dbCol: \"acres_total\", typeHint: \"number\" },\n  LAND_USE_CODE: { dbCol: \"land_use_code\", typeHint: \"string\" },\n  OWNERSHIP: { dbCol: \"ownership\", typeHint: \"string\" },\n  SENIOR_COMMUNITY: { dbCol: \"senior_community\", typeHint: \"boolean\" },\n  CONDO_COOP_ASSOC: { dbCol: \"condo_coop_assoc\", typeHint: \"boolean\" },\n  HOA: { dbCol: \"hoa\", typeHint: \"boolean\" },\n  ONE_TIME_ASSOCIATION_FEE: { dbCol: \"one_time_association_fee\", typeHint: \"number\" },\n  ASSOCIATION_FEE: { dbCol: \"association_fee\", typeHint: \"number\" },\n  ASSOCIATION_FEE_FREQUENCY: { dbCol: \"association_fee_frequency\", typeHint: \"string\" },\n  AGE: { dbCol: \"age\", typeHint: \"number\" },\n  INTERIOR_SQFT: { dbCol: \"interior_sqft\", typeHint: \"number\" },\n  SQUARE_FEET: { dbCol: \"interior_sqft\", typeHint: \"number\" },\n  PROPERTY_CONDITION: { dbCol: \"property_condition\", typeHint: \"string\" },\n  BEDROOMS: { dbCol: \"bedrooms\", typeHint: \"number\" },\n  BATHS_FULL: { dbCol: \"baths_full\", typeHint: \"number\" },\n  BATHS_HALF: { dbCol: \"baths_half\", typeHint: \"number\" },\n  DESIGN: { dbCol: \"design\", typeHint: \"string\" },\n  STYLE: { dbCol: \"style\", typeHint: \"string\" },\n  NUMBER_OF_STORIES: { dbCol: \"number_of_stories\", typeHint: \"string\" },\n  FLOOR_NUMBER: { dbCol: \"floor_number\", typeHint: \"string\" },\n  BASEMENT: { dbCol: \"basement\", typeHint: \"boolean\" },\n  GARAGE_SPACES: { dbCol: \"garage_spaces\", typeHint: \"number\" },\n  FIREPLACE: { dbCol: \"fireplace\", typeHint: \"boolean\" },\n  LAUNDRY: { dbCol: \"laundry\", typeHint: \"string\" },\n  OTHER_ROOMS: { dbCol: \"other_rooms\", typeHint: \"string\" },\n  ROOM_COUNT: { dbCol: \"room_count\", typeHint: \"number\" },\n  CENTRAL_AIR: { dbCol: \"central_air\", typeHint: \"boolean\" },\n  WATERFRONT: { dbCol: \"waterfront\", typeHint: \"boolean\" },\n  NEW_CONSTRUCTION_YN: { dbCol: \"new_construction\", typeHint: \"boolean\" },\n  NEW_CONSTRUCTION: { dbCol: \"new_construction_details\", typeHint: \"string\" },\n  MODEL_NAME: { dbCol: \"model_name\", typeHint: \"string\" },\n  ORIGINATING_MLS: { dbCol: \"originating_mls\", typeHint: \"string\" },\n  ABOVE_GRADE_SQFT: { dbCol: \"above_grade_sqft\", typeHint: \"number\" },\n  BELOW_GRADE_SQFT: { dbCol: \"below_grade_sqft\", typeHint: \"number\" },\n  HOME_BUILT: { dbCol: \"home_built\", typeHint: \"string\" },\n  BASEMENT_FOOTPRINT_PCT: { dbCol: \"basement_footprint_pct\", typeHint: \"number\" },\n  BASEMENT_FINISHED_PCT: { dbCol: \"basement_finished_pct\", typeHint: \"number\" },\n  DEVELOPMENT_STATUS: { dbCol: \"development_status\", typeHint: \"string\" },\n  IN_SOCIAL_QUEUE: { dbCol: \"in_social_queue\", typeHint: \"boolean\" },\n  LATITUDE: { dbCol: \"latitude\", typeHint: \"number\" },\n  LONGITUDE: { dbCol: \"longitude\", typeHint: \"number\" },\n  LAST_SOLD_DATE: { dbCol: \"last_sold_date\", typeHint: \"date\" },\n  LAST_SOLD_PRICE: { dbCol: \"last_sold_price\", typeHint: \"number\" },\n  DESCRIPTION: { dbCol: \"description\", typeHint: \"string\" },\n  OWNER_NAME: { dbCol: \"owner_name\", typeHint: \"string\" },\n  CONSTRUCTION_COMPLETED_YN: { dbCol: \"construction_completed_yn\", typeHint: \"boolean\" },\n  YEAR_BUILT: { dbCol: \"year_built\", typeHint: \"number\" },\n  YEAR_BUILT_SOURCE: { dbCol: \"year_built_source\", typeHint: \"string\" },\n  IMPORTED_BUILDER_NAME: { dbCol: \"imported_builder_name\", typeHint: \"string\" },\n  BUILDER_NAME: { dbCol: \"imported_builder_name\", typeHint: \"string\" },\n  OCCUPANT_TYPE: { dbCol: \"occupant_type\", typeHint: \"string\" },\n  OCCUPANT_NAME: { dbCol: \"occupant_name\", typeHint: \"string\" },\n  PREVIOUS_LIST_PRICE: { dbCol: \"previous_list_price\", typeHint: \"number\" },\n  ARCHITECT_NAME: { dbCol: \"architect_name\", typeHint: \"string\" },\n  STRUCTURE_TYPE: { dbCol: \"structure_type\", typeHint: \"string\" },\n  BLOCK_LOT: { dbCol: \"block_lot\", typeHint: \"string\" },\n  REMARKS_PRIVATE: { dbCol: \"remarks_private\", typeHint: \"string\" },\n  REMARKS_PUBLIC: { dbCol: \"remarks_public\", typeHint: \"string\" },\n  YEAR_MAJOR_RENO_REMODEL: { dbCol: \"year_major_reno_remodel\", typeHint: \"number\" },\n  CHANGE_INFO: { dbCol: \"change_info\", typeHint: \"string\" },\n  CHG_INFO: { dbCol: \"change_info\", typeHint: \"string\" },\n  CLOSE_DATE: { dbCol: \"close_date\", typeHint: \"date\" },\n  CLOSE_PRICE: { dbCol: \"close_price\", typeHint: \"number\" },\n  CLOSE_SALE_TYPE: { dbCol: \"close_sale_type\", typeHint: \"string\" },\n  FOUNDATION_DETAILS: { dbCol: \"foundation_details\", typeHint: \"string\" },\n  LAND_ASSESSED_VALUE: { dbCol: \"land_assessed_value\", typeHint: \"number\" },\n  LIST_PICTURE_URL: { dbCol: \"list_picture_url\", typeHint: \"string\" },\n  LOT_FEATURES: { dbCol: \"lot_features\", typeHint: \"array_string\" },\n  LOT_SIZE_SQFT: { dbCol: \"lot_size_sqft\", typeHint: \"number\" },\n  ADDRESS_LINE_1: { dbCol: \"address_line_1\", typeHint: \"string\" },\n}\n\nconst defaultIgnoredHeaders: string[] = [\n  \"ADDRESS\",\n  \"BEDS\",\n  \"BATHS\",\n  \"SUB_TYPE\",\n  \"STATUS_CONTRACTUAL_SEARCH_DATE\",\n  \"PRICE\",\n].map(normalizeHeader)\n\nconst CHUNK_SIZE = 200 // For main import processing\nconst STATS_QUERY_CHUNK_SIZE = 500 // For fetching MLS numbers for stats\n\nexport default function ImportPage() {\n  const [file, setFile] = useState<File | null>(null)\n  const [isProcessing, setIsProcessing] = useState(false)\n  const [isSavingMappings, setIsSavingMappings] = useState(false)\n  const [progress, setProgress] = useState(0)\n  const [result, setResult] = useState<ImportResult | null>(null)\n  const [error, setError] = useState<string | null>(null)\n  const { toast } = useToast()\n  const { user } = useAuth()\n\n  const [csvHeaders, setCsvHeaders] = useState<string[]>([])\n  const [fieldMappings, setFieldMappings] = useState<Record<string, MappedDbColumn>>({})\n  const [isMappingSheetOpen, setIsMappingSheetOpen] = useState(false)\n  const [parsedCsvData, setParsedCsvData] = useState<any[]>([])\n  const [preprocessingStats, setPreprocessingStats] = useState<PreprocessingStats | null>(null)\n\n  const [uploadHistory, setUploadHistory] = useState<UploadHistoryEntry[]>([])\n  const [isLoadingHistory, setIsLoadingHistory] = useState(false)\n  const [historyPage, setHistoryPage] = useState(1)\n  const [totalHistoryCount, setTotalHistoryCount] = useState(0)\n  const historyRowsPerPage = 5\n\n  const [overrideExisting, setOverrideExisting] = useState(false)\n\n  const [userSavedMappings, setUserSavedMappings] = useState<Record<string, string>>({})\n\n  const fetchUserSavedMappings = useCallback(async () => {\n    if (!user) {\n      setUserSavedMappings({})\n      return\n    }\n    try {\n      const { data, error: fetchErr } = await supabase\n        .from(\"user_field_mappings\")\n        .select(\"source_csv_header, target_database_column\")\n        .eq(\"user_id\", user.id)\n        .eq(\"target_table_name\", \"listings\")\n\n      if (fetchErr) throw fetchErr\n\n      const mappings: Record<string, string> = {}\n      data?.forEach((m) => {\n        mappings[m.source_csv_header] = m.target_database_column\n      })\n      setUserSavedMappings(mappings)\n    } catch (err: any) {\n      console.error(\"Error fetching user field mappings:\", err)\n      toast({ title: \"Error\", description: \"Could not load your saved field mappings.\", variant: \"destructive\" })\n    }\n  }, [user, toast])\n\n  useEffect(() => {\n    fetchUserSavedMappings()\n  }, [fetchUserSavedMappings])\n\n  const fetchHistory = useCallback(async () => {\n    if (!user) return\n    setIsLoadingHistory(true)\n    try {\n      const from = (historyPage - 1) * historyRowsPerPage\n      const to = historyPage * historyRowsPerPage - 1\n\n      const {\n        data,\n        error: fetchError,\n        count,\n      } = await supabase\n        .from(\"csv_uploads\")\n        .select(\"*\", { count: \"exact\" })\n        .eq(\"user_id\", user.id)\n        .order(\"upload_date\", { ascending: false })\n        .range(from, to)\n\n      if (fetchError) {\n        toast({ title: \"Error fetching history\", description: fetchError.message, variant: \"destructive\" })\n        setUploadHistory([])\n      } else if (data) {\n        setUploadHistory(data)\n        setTotalHistoryCount(count || 0)\n      }\n    } catch (e: any) {\n      toast({ title: \"Error fetching history\", description: e.message, variant: \"destructive\" })\n      setUploadHistory([])\n    } finally {\n      setIsLoadingHistory(false)\n    }\n  }, [user, toast, historyPage])\n\n  useEffect(() => {\n    fetchHistory()\n  }, [fetchHistory])\n\n  const onDrop = useCallback(\n    (acceptedFiles: File[]) => {\n      if (acceptedFiles && acceptedFiles.length > 0) {\n        const selectedFile = acceptedFiles[0]\n        setFile(selectedFile)\n        setResult(null)\n        setError(null)\n        setCsvHeaders([])\n        setFieldMappings({})\n        setParsedCsvData([])\n        setPreprocessingStats(null)\n\n        const reader = new FileReader()\n\n        reader.onload = (event) => {\n          if (event.target && typeof event.target.result === \"string\") {\n            const csvString = event.target.result\n\n            // Main parse (for data)\n            Papa.parse(csvString, {\n              header: true,\n              skipEmptyLines: true,\n              worker: false, // Explicitly false, though default for string input\n              transformHeader: (header) => normalizeHeader(header),\n              complete: (results) => {\n                // Second parse (for raw headers from the first line)\n                Papa.parse(csvString, {\n                  preview: 1,\n                  header: false,\n                  complete: (headerResults) => {\n                    const rawHeadersFromFile = (headerResults.data[0] as string[]) || []\n                    setCsvHeaders(rawHeadersFromFile)\n                    setParsedCsvData(results.data as any[])\n\n                    const initialMappings: Record<string, MappedDbColumn> = {}\n                    const dbColumnsMappedInThisFile = new Set<string>()\n\n                    rawHeadersFromFile.forEach((rawHeader) => {\n                      const normalizedHeaderKeyFromFile = normalizeHeader(rawHeader)\n                      let mappedDbColumnTarget: MappedDbColumn | undefined = undefined\n\n                      // 1. Try user-saved mappings\n                      if (userSavedMappings[normalizedHeaderKeyFromFile]) {\n                        const dbColFromUser = userSavedMappings[normalizedHeaderKeyFromFile] as MappedDbColumn\n                        if (!dbColumnsMappedInThisFile.has(dbColFromUser) || dbColFromUser === \"ignore_field\") {\n                          mappedDbColumnTarget = dbColFromUser\n                        } else {\n                          // If taken, try to ignore, or let further logic decide\n                        }\n                      }\n\n                      // 2. Try default mappings if not found or if user mapping was 'ignore_field' and we want to reconsider\n                      if (!mappedDbColumnTarget || mappedDbColumnTarget === \"ignore_field\") {\n                        const defaultMappingEntry = defaultCsvToDbMapping[normalizedHeaderKeyFromFile]\n                        if (defaultMappingEntry) {\n                          const dbColFromDefault = defaultMappingEntry.dbCol as MappedDbColumn\n                          if (!dbColumnsMappedInThisFile.has(dbColFromDefault) || dbColFromDefault === \"ignore_field\") {\n                            if (mappedDbColumnTarget !== \"ignore_field\") {\n                              // Prioritize user's explicit ignore\n                              mappedDbColumnTarget = dbColFromDefault\n                            } else if (!mappedDbColumnTarget) {\n                              mappedDbColumnTarget = dbColFromDefault\n                            }\n                          } else if (!mappedDbColumnTarget) {\n                            // Default mapping is taken, will be set to ignore later if still no target\n                          }\n                        }\n                      }\n\n                      // 3. Check default ignored headers if still no mapping\n                      if (!mappedDbColumnTarget && defaultIgnoredHeaders.includes(normalizedHeaderKeyFromFile)) {\n                        mappedDbColumnTarget = \"ignore_field\"\n                      }\n\n                      // 4. Try direct match by label or value if still no mapping\n                      if (!mappedDbColumnTarget) {\n                        const directMatch = listingTableColumns.find(\n                          (ptc) =>\n                            normalizeHeader(ptc.label) === normalizedHeaderKeyFromFile ||\n                            ptc.value === normalizedHeaderKeyFromFile,\n                        )\n                        if (directMatch) {\n                          const dbColFromDirect = directMatch.value as MappedDbColumn\n                          if (!dbColumnsMappedInThisFile.has(dbColFromDirect) || dbColFromDirect === \"ignore_field\") {\n                            mappedDbColumnTarget = dbColFromDirect\n                          }\n                        }\n                      }\n\n                      // 5. Default to ignore_field if no mapping found or if a chosen mapping was already taken by a previous header\n                      if (\n                        !mappedDbColumnTarget ||\n                        (mappedDbColumnTarget !== \"ignore_field\" && dbColumnsMappedInThisFile.has(mappedDbColumnTarget))\n                      ) {\n                        mappedDbColumnTarget = \"ignore_field\"\n                      }\n\n                      initialMappings[rawHeader] = mappedDbColumnTarget\n                      if (mappedDbColumnTarget !== \"ignore_field\") {\n                        dbColumnsMappedInThisFile.add(mappedDbColumnTarget)\n                      }\n                    })\n                    setFieldMappings(initialMappings)\n\n                    // Preprocessing Stats Logic (remains largely the same)\n                    const currentParsedData = results.data as any[]\n                    const currentRawHeaders = rawHeadersFromFile\n                    const currentInitialMappings = initialMappings\n\n                    const stats: PreprocessingStats = {\n                      totalCsvRecords: currentParsedData.length,\n                      newCsvRecords: 0,\n                      matchedCsvRecords: 0,\n                      totalCsvFields: currentRawHeaders.length,\n                      autoMatchedCsvFields: 0,\n                      unmatchedCsvFields: 0,\n                    }\n\n                    currentRawHeaders.forEach((header) => {\n                      if (currentInitialMappings[header] && currentInitialMappings[header] !== \"ignore_field\") {\n                        stats.autoMatchedCsvFields++\n                      } else {\n                        stats.unmatchedCsvFields++\n                      }\n                    })\n\n                    if (user && currentParsedData.length > 0) {\n                      let mlsCsvHeaderKey: string | undefined\n                      for (const [rawHeader, dbCol] of Object.entries(currentInitialMappings)) {\n                        if (dbCol === \"mls_number\") {\n                          mlsCsvHeaderKey = normalizeHeader(rawHeader) // Ensure we use the *normalized* header that PapaParse used for data keys\n                          break\n                        }\n                      }\n\n                      // If no mls_number mapping, try to find it from common default names in the raw CSV data keys\n                      if (!mlsCsvHeaderKey && results.data.length > 0) {\n                        const firstRecordKeys = Object.keys(results.data[0])\n                        const commonMlsKeys = [\"MLS_NUMBER\", \"MLS#\", \"MLS_\"] // Normalized common keys\n                        for (const commonKey of commonMlsKeys) {\n                          if (firstRecordKeys.includes(commonKey)) {\n                            mlsCsvHeaderKey = commonKey\n                            break\n                          }\n                        }\n                      }\n\n                      if (mlsCsvHeaderKey) {\n                        const allMlsNumbersInCsv = currentParsedData\n                          .map((row) => (row[mlsCsvHeaderKey!] ? String(row[mlsCsvHeaderKey!]) : null))\n                          .filter(Boolean) as string[]\n\n                        if (allMlsNumbersInCsv.length > 0) {\n                          const uniqueMlsNumbersInCsv = Array.from(new Set(allMlsNumbersInCsv))\n                          const existingDbMlsNumbers = new Set<string>()\n                          let fetchErrorOccurred = false\n                          ;(async () => {\n                            for (let i = 0; i < uniqueMlsNumbersInCsv.length; i += STATS_QUERY_CHUNK_SIZE) {\n                              if (fetchErrorOccurred) break\n                              const chunk = uniqueMlsNumbersInCsv.slice(i, i + STATS_QUERY_CHUNK_SIZE)\n                              if (chunk.length === 0) continue\n\n                              try {\n                                const { data: chunkExistingPropsData, error: chunkMlsFetchError } = await supabase\n                                  .from(\"listings\")\n                                  .select(\"mls_number\")\n                                  .in(\"mls_number\", chunk)\n\n                                if (chunkMlsFetchError) {\n                                  console.error(\n                                    `Error fetching existing MLS numbers for stats (chunk ${\n                                      i / STATS_QUERY_CHUNK_SIZE + 1\n                                    }): ${chunkMlsFetchError.message}`,\n                                    chunkMlsFetchError,\n                                  )\n                                  fetchErrorOccurred = true\n                                  stats.newCsvRecords = -1\n                                  stats.matchedCsvRecords = -1\n                                  break\n                                }\n\n                                if (chunkExistingPropsData) {\n                                  chunkExistingPropsData.forEach((p) => {\n                                    if (p.mls_number) existingDbMlsNumbers.add(p.mls_number)\n                                  })\n                                }\n                              } catch (e: any) {\n                                console.error(\n                                  `Exception during fetching MLS numbers for stats (chunk ${\n                                    i / STATS_QUERY_CHUNK_SIZE + 1\n                                  }): ${e.message}`,\n                                  e,\n                                )\n                                fetchErrorOccurred = true\n                                stats.newCsvRecords = -1\n                                stats.matchedCsvRecords = -1\n                                break\n                              }\n                            }\n\n                            if (!fetchErrorOccurred) {\n                              let newCount = 0\n                              let matchedCount = 0\n                              uniqueMlsNumbersInCsv.forEach((csvMls) => {\n                                if (existingDbMlsNumbers.has(csvMls)) matchedCount++\n                                else newCount++\n                              })\n                              stats.newCsvRecords = newCount\n                              stats.matchedCsvRecords = matchedCount\n                            }\n                            setPreprocessingStats({ ...stats })\n                          })()\n                        } else {\n                          stats.newCsvRecords = 0\n                          stats.matchedCsvRecords = 0\n                          setPreprocessingStats(stats)\n                        }\n                      } else {\n                        // MLS number column not found or not mapped, can't determine new/matched\n                        stats.newCsvRecords = currentParsedData.length // Assume all are new if MLS# can't be identified\n                        stats.matchedCsvRecords = 0\n                        setPreprocessingStats(stats)\n                      }\n                    } else {\n                      // No user or no parsed data\n                      if (currentParsedData.length === 0) {\n                        stats.totalCsvRecords = 0\n                      }\n                      setPreprocessingStats(stats)\n                    }\n                  },\n                  error: (err: any) => {\n                    console.error(\"PapaParse error on header pre-parse:\", err)\n                    // Fallback: use transformed headers if raw header parsing fails\n                    const transformedHeaders = results.meta?.fields || Object.keys(results.data[0] || {})\n                    setCsvHeaders(transformedHeaders)\n                    setParsedCsvData(results.data as any[])\n                    const initialMappingsOnError: Record<string, MappedDbColumn> = {}\n                    transformedHeaders.forEach((th) => (initialMappingsOnError[th] = \"ignore_field\"))\n                    setFieldMappings(initialMappingsOnError)\n                    toast({\n                      title: \"Header Parsing Issue\",\n                      description:\n                        \"Could not read raw headers accurately, using transformed headers. Please verify mappings.\",\n                      variant: \"default\",\n                    })\n                  },\n                })\n              },\n              error: (err: any) => {\n                console.error(\"PapaParse error on main data parse:\", err)\n                setError(`Failed to parse CSV: ${err.message}`)\n                setFile(null) // Clear the file on parse error\n              },\n            })\n          } else {\n            setError(\"Failed to read file content.\")\n            setFile(null)\n          }\n        }\n\n        reader.onerror = () => {\n          console.error(\"FileReader error:\", reader.error)\n          setError(\"Failed to read the file. Please ensure it's a valid CSV and try again.\")\n          setFile(null)\n          setResult(null)\n          setCsvHeaders([])\n          setFieldMappings({})\n          setParsedCsvData([])\n          setPreprocessingStats(null)\n        }\n\n        reader.readAsText(selectedFile)\n      }\n    },\n    [toast, user, userSavedMappings, fetchUserSavedMappings], // Added fetchUserSavedMappings if it's stable\n  )\n\n  const { getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject } = useDropzone({\n    onDrop,\n    accept: { \"text/csv\": [\".csv\"] },\n    multiple: false,\n  })\n\n  const style = useMemo(\n    () => ({\n      ...baseStyle,\n      ...(isDragActive ? activeStyle : {}),\n      ...(isDragAccept ? acceptStyle : {}),\n      ...(isDragReject ? rejectStyle : {}),\n    }),\n    [isDragActive, isDragReject, isDragAccept],\n  )\n\n  const handleSaveMappings = async (updatedSheetMappings: Record<string, MappedDbColumn>) => {\n    if (!user) {\n      toast({ title: \"Error\", description: \"User not authenticated.\", variant: \"destructive\" })\n      return\n    }\n\n    setIsSavingMappings(true)\n    try {\n      const { data: currentPersistentMappingsData, error: fetchError } = await supabase\n        .from(\"user_field_mappings\")\n        .select(\"id, source_csv_header, target_database_column\")\n        .eq(\"user_id\", user.id)\n        .eq(\"target_table_name\", \"listings\")\n\n      if (fetchError) throw fetchError\n\n      const currentPersistentMap = new Map(\n        currentPersistentMappingsData.map((m) => [m.source_csv_header, { id: m.id, dbCol: m.target_database_column }]),\n      )\n\n      const operations = {\n        toDeleteIds: [] as string[],\n        toUpsert: [] as UserFieldMappingInsert[],\n      }\n\n      for (const rawCsvHeader of csvHeaders) {\n        const normalizedCsvHeader = normalizeHeader(rawCsvHeader)\n        if (!normalizedCsvHeader) continue\n\n        const targetDbColumn = updatedSheetMappings[rawCsvHeader]\n        const existingPersistentEntry = currentPersistentMap.get(normalizedCsvHeader)\n\n        if (targetDbColumn === \"ignore_field\" || targetDbColumn === undefined) {\n          if (existingPersistentEntry) {\n            operations.toDeleteIds.push(existingPersistentEntry.id)\n          }\n        } else {\n          if (existingPersistentEntry) {\n            if (existingPersistentEntry.dbCol !== targetDbColumn) {\n              operations.toUpsert.push({\n                user_id: user.id,\n                target_table_name: \"listings\",\n                source_csv_header: normalizedCsvHeader,\n                target_database_column: targetDbColumn,\n              })\n            }\n          } else {\n            operations.toUpsert.push({\n              user_id: user.id,\n              target_table_name: \"listings\",\n              source_csv_header: normalizedCsvHeader,\n              target_database_column: targetDbColumn,\n            })\n          }\n        }\n      }\n\n      if (operations.toDeleteIds.length > 0) {\n        const { error: deleteError } = await supabase\n          .from(\"user_field_mappings\")\n          .delete()\n          .in(\"id\", operations.toDeleteIds)\n        if (deleteError) throw deleteError\n      }\n\n      if (operations.toUpsert.length > 0) {\n        const { error: upsertError } = await supabase\n          .from(\"user_field_mappings\")\n          .upsert(operations.toUpsert, { onConflict: \"user_id,target_table_name,source_csv_header\" })\n        if (upsertError) throw upsertError\n      }\n\n      setFieldMappings(updatedSheetMappings)\n      await fetchUserSavedMappings()\n\n      toast({ title: \"Field mappings saved\", description: \"Your preferences have been updated for future imports.\" })\n    } catch (err: any) {\n      console.error(\"Error saving field mappings:\", err)\n      toast({ title: \"Error\", description: `Failed to save mappings: ${err.message}`, variant: \"destructive\" })\n    } finally {\n      setIsSavingMappings(false)\n      setIsMappingSheetOpen(false)\n    }\n  }\n\n  const handleImport = async () => {\n    if (!file || !user) {\n      setError(\"Please select a file and ensure you are logged in.\")\n      return\n    }\n    if (parsedCsvData.length === 0) {\n      setError(\"No data parsed from CSV. Please re-upload or check the file.\")\n      return\n    }\n    if (Object.keys(fieldMappings).length === 0) {\n      setError(\"Field mappings are not set. Please map fields before importing.\")\n      toast({\n        title: \"Mapping Required\",\n        description: \"Click 'Map Fields' to configure mappings.\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    setIsProcessing(true)\n    setProgress(0)\n    setResult(null)\n    setError(null)\n    const startTime = Date.now()\n\n    const { data: uploadLog, error: uploadLogError } = await supabase\n      .from(\"csv_uploads\")\n      .insert({ user_id: user.id, filename: file.name, status: \"processing\", upload_date: new Date().toISOString() })\n      .select()\n      .single()\n\n    if (uploadLogError || !uploadLog) {\n      console.error(\"Error creating upload log entry:\", uploadLogError?.message || \"Unknown error\")\n      setError(`Failed to start import process. Could not log upload: ${uploadLogError?.message}`)\n      setIsProcessing(false)\n      return\n    }\n    console.log(\"Created upload log entry with ID:\", uploadLog.id)\n\n    const recordsToProcess = parsedCsvData\n    const totalRecords = recordsToProcess.length\n    let newRecordsAdded = 0\n    let recordsUpdated = 0\n    let ignoredForOtherReasons = 0\n    let failedDueToError = 0\n    const errorsList: string[] = []\n\n    if (totalRecords === 0) {\n      setError(\"CSV file is empty or has no data rows.\")\n      setIsProcessing(false)\n      const { error: emptyUpdateError } = await supabase\n        .from(\"csv_uploads\")\n        .update({ status: \"failed\", error_log: \"CSV empty or no data rows\" })\n        .eq(\"id\", uploadLog.id)\n      if (emptyUpdateError) console.error(\"Error updating log for empty CSV:\", emptyUpdateError.message)\n      await fetchHistory()\n      return\n    }\n\n    const mlsHeaderKeys: string[] = []\n    for (const [csvHeader, dbCol] of Object.entries(fieldMappings)) {\n      if (dbCol === \"mls_number\") {\n        mlsHeaderKeys.push(normalizeHeader(csvHeader))\n      }\n    }\n\n    const recordsToInsert: ListingInsert[] = []\n    const recordsToUpdate: { id: string; payload: Partial<ListingRow> }[] = []\n\n    for (let chunkStart = 0; chunkStart < totalRecords; chunkStart += CHUNK_SIZE) {\n      const chunkEnd = Math.min(chunkStart + CHUNK_SIZE, totalRecords)\n      const chunk = recordsToProcess.slice(chunkStart, chunkEnd)\n\n      const mlsNumbersForChunk: string[] = []\n      if (mlsHeaderKeys.length > 0) {\n        chunk.forEach((record) => {\n          for (const key of mlsHeaderKeys) {\n            if (record[key]) {\n              mlsNumbersForChunk.push(String(record[key]))\n              break\n            }\n          }\n        })\n      }\n\n      const existingPropertiesMapForChunk = new Map<string, ListingRow>()\n      if (mlsNumbersForChunk.length > 0) {\n        const { data: existingPropsData, error: fetchChunkError } = await supabase\n          .from(\"listings\")\n          .select(\"*\")\n          .in(\"mls_number\", mlsNumbersForChunk)\n\n        if (fetchChunkError) {\n          errorsList.push(\n            `Failed to fetch existing properties for chunk (records ${chunkStart + 1}-${chunkEnd}): ${\n              fetchChunkError.message\n            }`,\n          )\n          failedDueToError += chunk.length\n          continue\n        } else if (existingPropsData) {\n          existingPropsData.forEach(\n            (prop) => prop.mls_number && existingPropertiesMapForChunk.set(prop.mls_number, prop as ListingRow),\n          )\n        }\n      }\n\n      for (let i = 0; i < chunk.length; i++) {\n        const record = chunk[i]\n        const overallRecordIndex = chunkStart + i\n        setProgress(((overallRecordIndex + 1) / totalRecords) * 100)\n\n        const propertyData: ListingInsert = {}\n        let mlsNumberForRecord: string | null = null\n\n        for (const [rawCsvHeader, dbTargetColumn] of Object.entries(fieldMappings)) {\n          if (dbTargetColumn === \"ignore_field\") continue\n\n          const normalizedCsvHeaderKey = normalizeHeader(rawCsvHeader)\n          const rawValue = record[normalizedCsvHeaderKey]\n\n          const columnDefinition = listingTableColumns.find((c) => c.value === dbTargetColumn)\n          const typeHint = columnDefinition ? columnDefinition.typeHint : \"string\"\n          let parsedValue = parseCSVValue(rawValue, typeHint)\n\n          if (dbTargetColumn === \"subdivision\" && typeof parsedValue === \"string\") {\n            parsedValue = toTitleCase(parsedValue)\n          }\n          if (dbTargetColumn === \"status\" && typeof parsedValue === \"string\") {\n            const upperParsedValue = parsedValue.toUpperCase()\n            parsedValue = statusMapping[upperParsedValue] || parsedValue\n          }\n\n          if (parsedValue !== null && parsedValue !== undefined) {\n            ;(propertyData as any)[dbTargetColumn] = parsedValue\n            if (dbTargetColumn === \"mls_number\" && parsedValue) {\n              mlsNumberForRecord = String(parsedValue)\n            }\n          }\n        }\n\n        if (!mlsNumberForRecord) {\n          errorsList.push(`Row ${overallRecordIndex + 2}: Missing or invalid MLS_NUMBER after mapping. Record skipped.`)\n          ignoredForOtherReasons++\n          continue\n        }\n        propertyData.mls_number = mlsNumberForRecord\n\n        if (propertyData.new_construction === undefined && propertyData.new_construction_details) {\n          const detailsLower = String(propertyData.new_construction_details).toLowerCase()\n          if (detailsLower.startsWith(\"yes\") || detailsLower === \"true\" || detailsLower === \"1\") {\n            propertyData.new_construction = true\n          } else if (detailsLower.startsWith(\"no\") || detailsLower === \"false\" || detailsLower === \"0\") {\n            propertyData.new_construction = false\n          }\n        }\n\n        const existingProperty = existingPropertiesMapForChunk.get(mlsNumberForRecord)\n\n        if (existingProperty) {\n          const updatePayload: Partial<ListingRow> = {}\n          let needsUpdate = false\n          for (const key in propertyData) {\n            if (!Object.prototype.hasOwnProperty.call(propertyData, key)) continue\n            const dbKey = key as keyof ListingRow\n            const csvValue = propertyData[dbKey as keyof ListingInsert]\n\n            if (overrideExisting) {\n              if (Object.prototype.hasOwnProperty.call(propertyData, dbKey)) {\n                if (existingProperty[dbKey] !== csvValue) {\n                  ;(updatePayload as any)[dbKey] = csvValue\n                  needsUpdate = true\n                }\n              }\n            } else {\n              if (csvValue !== null && csvValue !== undefined) {\n                if (\n                  existingProperty[dbKey] === null ||\n                  existingProperty[dbKey] === undefined ||\n                  JSON.stringify(existingProperty[dbKey]) !== JSON.stringify(csvValue)\n                ) {\n                  if (Array.isArray(csvValue) && Array.isArray(existingProperty[dbKey])) {\n                    const sortedCsv = [...csvValue].sort().join(\",\")\n                    const sortedDb = [...(existingProperty[dbKey] as any[])].sort().join(\",\")\n                    if (sortedCsv !== sortedDb) {\n                      ;(updatePayload as any)[dbKey] = csvValue\n                      needsUpdate = true\n                    }\n                  } else if (existingProperty[dbKey] !== csvValue) {\n                    ;(updatePayload as any)[dbKey] = csvValue\n                    needsUpdate = true\n                  }\n                }\n              }\n            }\n          }\n          if (needsUpdate && Object.keys(updatePayload).length > 0) {\n            recordsToUpdate.push({ id: existingProperty.id, payload: updatePayload })\n          } else {\n            ignoredForOtherReasons++\n          }\n        } else {\n          const { user_id, ...insertData } = propertyData as any\n          recordsToInsert.push(insertData)\n        }\n      }\n    }\n\n    if (recordsToInsert.length > 0) {\n      const { error: insertError } = await supabase.from(\"listings\").insert(recordsToInsert)\n      if (insertError) {\n        errorsList.push(`Batch insert failed: ${insertError.message}`)\n        failedDueToError += recordsToInsert.length\n      } else {\n        newRecordsAdded = recordsToInsert.length\n      }\n    }\n\n    if (recordsToUpdate.length > 0) {\n      const updatePromises = recordsToUpdate.map((item) =>\n        supabase.from(\"listings\").update(item.payload).eq(\"id\", item.id),\n      )\n      const updateChunkSize = 50\n      for (let i = 0; i < updatePromises.length; i += updateChunkSize) {\n        const chunkPromises = updatePromises.slice(i, i + updateChunkSize)\n        const updateResults = await Promise.allSettled(chunkPromises)\n        updateResults.forEach((res, idxInChunk) => {\n          const originalIdx = i + idxInChunk\n          if (res.status === \"fulfilled\" && !res.value.error) {\n            recordsUpdated++\n          } else {\n            const errorMsg = res.status === \"rejected\" ? res.reason?.message : res.value.error?.message\n            const mlsForFailedUpdate = recordsToUpdate[originalIdx].payload.mls_number || \"unknown MLS\"\n            errorsList.push(\n              `Update for MLS ${mlsForFailedUpdate} (ID: ${recordsToUpdate[originalIdx].id}) failed: ${errorMsg}`,\n            )\n            failedDueToError++\n          }\n        })\n      }\n    }\n\n    const endTime = Date.now()\n    const duration = (endTime - startTime) / 1000\n    setResult({\n      totalRecords,\n      newRecordsAdded,\n      recordsUpdated,\n      ignoredOrDuplicate: ignoredForOtherReasons,\n      failedDueToError,\n      errors: errorsList,\n    })\n    toast({ title: \"Import Complete\", description: `Processed ${totalRecords} records in ${duration.toFixed(2)}s.` })\n\n    try {\n      const updatePayloadForHistory = {\n        status: failedDueToError > 0 || errorsList.length > 0 ? \"completed_with_errors\" : \"completed\",\n        records_processed: totalRecords,\n        records_created: newRecordsAdded,\n        records_updated: recordsUpdated,\n        records_failed: failedDueToError,\n        error_log: errorsList.length > 0 ? errorsList.slice(0, 50).join(\"\\n\") : null,\n        metadata: {\n          duration_seconds: duration,\n          ignored_records: ignoredForOtherReasons,\n          override_existing: overrideExisting,\n        },\n      }\n\n      console.log(\"Attempting to update csv_uploads with ID:\", uploadLog.id)\n      console.log(\"Update payload for csv_uploads:\", JSON.stringify(updatePayloadForHistory, null, 2))\n\n      const { data: updateData, error: updateDbError } = await supabase\n        .from(\"csv_uploads\")\n        .update(updatePayloadForHistory)\n        .eq(\"id\", uploadLog.id)\n        .select() // Important: .select() to get back the updated row(s)\n\n      if (updateDbError) {\n        console.error(\"Supabase error during csv_uploads update:\", updateDbError)\n        throw updateDbError // Throw to be caught by the catch block\n      }\n\n      if (!updateData || updateData.length === 0) {\n        console.warn(\n          \"csv_uploads update did not affect any rows. This might be due to RLS or an incorrect ID. uploadLog.id:\",\n          uploadLog.id,\n        )\n        throw new Error(\"Failed to update upload history: No record found or RLS prevented update.\")\n      }\n\n      console.log(\"csv_uploads successfully updated, returned data:\", updateData)\n    } catch (finalUpdateError: any) {\n      console.error(\"Error in catch block for updating csv_uploads log:\", finalUpdateError)\n      toast({\n        title: \"History Update Failed\",\n        description: `The import completed, but its final status could not be saved. Error: ${finalUpdateError.message}`,\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsProcessing(false)\n      await fetchHistory() // Refresh history regardless of update success/failure\n    }\n  }\n\n  const totalHistoryPages = Math.ceil(totalHistoryCount / historyRowsPerPage)\n\n  return (\n    <div className=\"container mx-auto p-4 space-y-8\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-xl font-semibold\">Import Listing Data</CardTitle>\n          <CardDescription>\n            Upload a CSV file to import listing data. Map fields as needed, then start the import.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div {...getRootProps({ style })}>\n            <input {...getInputProps()} />\n            <UploadCloud className=\"w-12 h-12 mb-3 text-gray-400\" />\n            {isDragActive ? (\n              <p>Drop the files here ...</p>\n            ) : (\n              <p>Drag 'n' drop a CSV file here, or click to select file</p>\n            )}\n            <p className=\"text-xs mt-1\">Max file size: 10MB. Supported format: .csv</p>\n          </div>\n\n          {file && (\n            <div className=\"mt-4 p-3 border rounded-md bg-gray-50\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <FileText className=\"w-5 h-5 text-gray-600\" />\n                  <span className=\"text-sm font-medium\">{file.name}</span>\n                  <span className=\"text-xs text-gray-500\">({(file.size / 1024).toFixed(2)} KB)</span>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => {\n                    setFile(null)\n                    setCsvHeaders([])\n                    setFieldMappings({})\n                    setParsedCsvData([])\n                    setResult(null)\n                    setError(null)\n                    setPreprocessingStats(null)\n                  }}\n                >\n                  <XCircle className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {preprocessingStats && file && (\n            <Card className=\"mt-4 bg-slate-50\">\n              <CardHeader className=\"pb-2 pt-4\">\n                <CardTitle className=\"text-md font-semibold\">File Pre-processing Summary</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-sm space-y-1 pb-4\">\n                <div className=\"flex justify-between\">\n                  <span>Total Records in File:</span> <strong>{preprocessingStats.totalCsvRecords}</strong>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Potential New Records (New MLS #):</span>{\" \"}\n                  <strong>\n                    {preprocessingStats.newCsvRecords === -1 ? \"Error\" : preprocessingStats.newCsvRecords}\n                  </strong>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Potential Matched Records (Existing MLS #):</span>{\" \"}\n                  <strong>\n                    {preprocessingStats.matchedCsvRecords === -1 ? \"Error\" : preprocessingStats.matchedCsvRecords}\n                  </strong>\n                </div>\n                <hr className=\"my-1\" />\n                <div className=\"flex justify-between\">\n                  <span>Total Columns in File:</span> <strong>{preprocessingStats.totalCsvFields}</strong>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Columns Auto-Mapped:</span> <strong>{preprocessingStats.autoMatchedCsvFields}</strong>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Columns Not Auto-Mapped:</span> <strong>{preprocessingStats.unmatchedCsvFields}</strong>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n          {(isProcessing || isSavingMappings) && (\n            <div className=\"mt-4\">\n              {isProcessing && <Progress value={progress} className=\"w-full\" />}\n              <p className=\"text-sm text-center mt-2\">\n                {isSavingMappings ? \"Saving mappings...\" : `Processing... ${Math.round(progress)}%`}\n              </p>\n            </div>\n          )}\n\n          {error && (\n            <Alert variant=\"destructive\" className=\"mt-4\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertTitle>Error</AlertTitle>\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 mt-6 pt-4 border-t\">\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                onClick={() => setIsMappingSheetOpen(true)}\n                disabled={!file || csvHeaders.length === 0 || isProcessing || isSavingMappings}\n                variant=\"outline\"\n              >\n                <Settings2 className=\"mr-2 h-4 w-4\" /> Map Fields\n              </Button>\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"override-existing\"\n                  checked={overrideExisting}\n                  onCheckedChange={setOverrideExisting}\n                  disabled={isProcessing || isSavingMappings}\n                />\n                <Label htmlFor=\"override-existing\" className=\"text-sm\">\n                  Override Existing Values\n                </Label>\n              </div>\n            </div>\n            <Button\n              onClick={handleImport}\n              disabled={\n                !file ||\n                parsedCsvData.length === 0 ||\n                isProcessing ||\n                isSavingMappings ||\n                Object.keys(fieldMappings).length === 0\n              }\n              className=\"w-full sm:w-auto\"\n            >\n              {isProcessing ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Importing...\n                </>\n              ) : (\n                \"Start Import\"\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {result && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-xl font-semibold\">Import Results</CardTitle>\n            <CardDescription>Summary of the data import process.</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4 text-center\">\n              <div className=\"p-3 bg-blue-50 rounded-md\">\n                <p className=\"text-xs text-blue-700 font-medium\">Total Records</p>\n                <p className=\"text-2xl font-bold text-blue-900\">{result.totalRecords}</p>\n              </div>\n              <div className=\"p-3 bg-green-50 rounded-md\">\n                <p className=\"text-xs text-green-700 font-medium\">New Added</p>\n                <p className=\"text-2xl font-bold text-green-900\">{result.newRecordsAdded}</p>\n              </div>\n              <div className=\"p-3 bg-yellow-50 rounded-md\">\n                <p className=\"text-xs text-yellow-700 font-medium\">Updated</p>\n                <p className=\"text-2xl font-bold text-yellow-900\">{result.recordsUpdated}</p>\n              </div>\n              <div className=\"p-3 bg-gray-100 rounded-md\">\n                <p className=\"text-xs text-gray-700 font-medium\">Ignored/No Change</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{result.ignoredOrDuplicate}</p>\n              </div>\n              <div className=\"p-3 bg-red-50 rounded-md\">\n                <p className=\"text-xs text-red-700 font-medium\">Failed (Errors)</p>\n                <p className=\"text-2xl font-bold text-red-900\">{result.failedDueToError}</p>\n              </div>\n            </div>\n\n            {result.errors && result.errors.length > 0 && (\n              <Alert variant=\"destructive\">\n                <Info className=\"h-4 w-4\" />\n                <AlertTitle>Encountered {result.errors.length} Error(s) During Import</AlertTitle>\n                <AlertDescription>\n                  <ul className=\"list-disc list-inside max-h-60 overflow-y-auto text-xs\">\n                    {result.errors.slice(0, 10).map((err, index) => (\n                      <li key={index}>{err}</li>\n                    ))}\n                    {result.errors.length > 10 && (\n                      <li>...and {result.errors.length - 10} more errors. Check server logs for full details.</li>\n                    )}\n                  </ul>\n                </AlertDescription>\n              </Alert>\n            )}\n            {result.errors.length === 0 && result.failedDueToError === 0 && (\n              <Alert className=\"bg-green-50 border-green-200 text-green-800\">\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                <AlertTitle>Import Successful</AlertTitle>\n                <AlertDescription>All records processed without errors.</AlertDescription>\n              </Alert>\n            )}\n          </CardContent>\n        </Card>\n      )}\n      <FieldMappingSheet\n        isOpen={isMappingSheetOpen}\n        onClose={() => setIsMappingSheetOpen(false)}\n        csvHeaders={csvHeaders}\n        currentMappings={fieldMappings}\n        onSaveMappings={handleSaveMappings}\n        availableDbColumns={listingTableColumns}\n      />\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-xl font-semibold\">Upload History</CardTitle>\n          <CardDescription>Recent CSV import attempts and their outcomes.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isLoadingHistory && (\n            <p className=\"text-sm text-gray-500 flex items-center\">\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Loading history...\n            </p>\n          )}\n          {!isLoadingHistory && uploadHistory.length === 0 && (\n            <p className=\"text-sm text-gray-500\">No upload history found.</p>\n          )}\n          {!isLoadingHistory && uploadHistory.length > 0 && (\n            <>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"font-normal\">Filename</TableHead>\n                    <TableHead className=\"font-normal\">Date</TableHead>\n                    <TableHead className=\"font-normal\">Status</TableHead>\n                    <TableHead className=\"text-right font-normal w-20\">Total</TableHead>\n                    <TableHead className=\"text-right font-normal w-20 text-green-600\">New</TableHead>\n                    <TableHead className=\"text-right font-normal w-20 text-yellow-600\">Updated</TableHead>\n                    <TableHead className=\"text-right font-normal w-20 text-gray-600\">Ignored</TableHead>\n                    <TableHead className=\"text-right font-normal w-20 text-red-600\">Failed</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {uploadHistory.map((item) => {\n                    const metadata = item.metadata as CsvUploadMetadata | null\n                    return (\n                      <TableRow key={item.id}>\n                        <TableCell className=\"font-normal truncate max-w-xs\">{item.filename || \"N/A\"}</TableCell>\n                        <TableCell className=\"font-normal\">{formatDate(item.upload_date)}</TableCell>\n                        <TableCell className=\"font-normal\">\n                          <Badge\n                            variant={\n                              item.status === \"completed\"\n                                ? \"default\"\n                                : item.status === \"completed_with_errors\"\n                                  ? \"yellow\"\n                                  : item.status === \"failed\"\n                                    ? \"destructive\"\n                                    : \"secondary\"\n                            }\n                          >\n                            {item.status || \"N/A\"}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"text-right font-normal\">{item.records_processed ?? \"-\"}</TableCell>\n                        <TableCell className=\"text-right font-normal text-green-700\">\n                          {item.records_created ?? \"-\"}\n                        </TableCell>\n                        <TableCell className=\"text-right font-normal text-yellow-700\">\n                          {item.records_updated ?? \"-\"}\n                        </TableCell>\n                        <TableCell className=\"text-right font-normal text-gray-700\">\n                          {metadata?.ignored_records ?? \"-\"}\n                        </TableCell>\n                        <TableCell className=\"text-right font-normal text-red-700\">\n                          {item.records_failed ?? \"-\"}\n                        </TableCell>\n                      </TableRow>\n                    )\n                  })}\n                </TableBody>\n              </Table>\n              {totalHistoryPages > 1 && (\n                <div className=\"flex items-center justify-end space-x-2 py-4\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setHistoryPage((prev) => Math.max(1, prev - 1))}\n                    disabled={historyPage === 1 || isLoadingHistory}\n                  >\n                    <ChevronLeft className=\"h-4 w-4 mr-1\" /> Previous\n                  </Button>\n                  <span className=\"text-sm text-muted-foreground\">\n                    Page {historyPage} of {totalHistoryPages}\n                  </span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setHistoryPage((prev) => Math.min(totalHistoryPages, prev + 1))}\n                    disabled={historyPage === totalHistoryPages || isLoadingHistory}\n                  >\n                    Next <ChevronRight className=\"h-4 w-4 ml-1\" />\n                  </Button>\n                </div>\n              )}\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/insights/page.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\n\nimport { useEffect, useState } from \"react\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { formatCurrency } from \"@/lib/utils\"\nimport { TrendingUp, TrendingDown, Minus, BarChart3, PieChart, Activity } from \"lucide-react\"\n\nexport default function InsightsPage() {\n  const [insights, setInsights] = useState<any>(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    fetchInsights()\n  }, [])\n\n  async function fetchInsights() {\n    try {\n      // Fetch various market insights\n      const { data: properties } = await supabase.from(\"properties\").select(\"*\")\n\n      if (!properties) return\n\n      // Calculate insights\n      const activeListings = properties.filter((p) => p.status === \"Active\")\n      const newConstruction = properties.filter((p) => p.new_construction)\n      const soldProperties = properties.filter((p) => p.status === \"Sold\")\n\n      const avgListPrice = activeListings.reduce((sum, p) => sum + (p.list_price || 0), 0) / activeListings.length\n      const avgSoldPrice = soldProperties.reduce((sum, p) => sum + (p.sold_price || 0), 0) / soldProperties.length\n\n      const avgDOM = activeListings.reduce((sum, p) => sum + (p.dom || 0), 0) / activeListings.length\n\n      // Price ranges\n      const priceRanges = {\n        under1M: properties.filter((p) => (p.list_price || 0) < 1000000).length,\n        \"1M-2M\": properties.filter((p) => (p.list_price || 0) >= 1000000 && (p.list_price || 0) < 2000000).length,\n        \"2M-5M\": properties.filter((p) => (p.list_price || 0) >= 2000000 && (p.list_price || 0) < 5000000).length,\n        over5M: properties.filter((p) => (p.list_price || 0) >= 5000000).length,\n      }\n\n      // Geographic distribution\n      const cityDistribution = properties.reduce((acc: any, p) => {\n        const city = p.city || \"Unknown\"\n        acc[city] = (acc[city] || 0) + 1\n        return acc\n      }, {})\n\n      setInsights({\n        totalProperties: properties.length,\n        activeListings: activeListings.length,\n        newConstruction: newConstruction.length,\n        soldProperties: soldProperties.length,\n        avgListPrice,\n        avgSoldPrice,\n        avgDOM,\n        priceRanges,\n        cityDistribution,\n        newConstructionShare: (newConstruction.length / properties.length) * 100,\n      })\n    } catch (error) {\n      console.error(\"Error fetching insights:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        <div>\n          <h1 className=\"text-lg font-semibold\">Market Insights</h1>\n          <p className=\"text-xs text-gray-600\">Loading market analysis...</p>\n        </div>\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          {Array.from({ length: 8 }).map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"h-4 w-24 animate-pulse rounded bg-gray-200\" />\n                  <div className=\"h-6 w-16 animate-pulse rounded bg-gray-200\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div>\n        <h1 className=\"text-lg font-semibold\">Market Insights</h1>\n        <p className=\"text-xs text-gray-600\">Luxury residential new construction market analysis</p>\n      </div>\n\n      <div className=\"grid gap-3 md:grid-cols-2 lg:grid-cols-4\">\n        <InsightCard\n          title=\"Avg List Price\"\n          value={formatCurrency(insights?.avgListPrice)}\n          change={+3.2}\n          icon={TrendingUp}\n        />\n        <InsightCard\n          title=\"Avg Sold Price\"\n          value={formatCurrency(insights?.avgSoldPrice)}\n          change={+1.8}\n          icon={TrendingUp}\n        />\n        <InsightCard\n          title=\"Avg Days on Market\"\n          value={Math.round(insights?.avgDOM)}\n          change={-5.2}\n          icon={TrendingDown}\n        />\n        <InsightCard\n          title=\"New Construction Share\"\n          value={`${insights?.newConstructionShare?.toFixed(1)}%`}\n          change={+2.1}\n          icon={TrendingUp}\n        />\n      </div>\n\n      <div className=\"grid gap-4 lg:grid-cols-2\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm flex items-center gap-x-2\">\n              <PieChart className=\"h-4 w-4\" />\n              Price Distribution\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <PriceRangeBar\n                label=\"Under $1M\"\n                count={insights?.priceRanges?.under1M}\n                total={insights?.totalProperties}\n              />\n              <PriceRangeBar\n                label=\"$1M - $2M\"\n                count={insights?.priceRanges?.[\"1M-2M\"]}\n                total={insights?.totalProperties}\n              />\n              <PriceRangeBar\n                label=\"$2M - $5M\"\n                count={insights?.priceRanges?.[\"2M-5M\"]}\n                total={insights?.totalProperties}\n              />\n              <PriceRangeBar label=\"Over $5M\" count={insights?.priceRanges?.over5M} total={insights?.totalProperties} />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm flex items-center gap-x-2\">\n              <BarChart3 className=\"h-4 w-4\" />\n              Geographic Distribution\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {Object.entries(insights?.cityDistribution || {})\n                .sort(([, a]: any, [, b]: any) => b - a)\n                .slice(0, 6)\n                .map(([city, count]: any) => (\n                  <div key={city} className=\"flex justify-between items-center text-xs\">\n                    <span className=\"text-gray-600\">{city}</span>\n                    <span className=\"font-medium\">{count}</span>\n                  </div>\n                ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid gap-4 lg:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm flex items-center gap-x-2\">\n              <Activity className=\"h-4 w-4\" />\n              Market Activity\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2 text-xs\">\n              <div className=\"flex justify-between border-b pb-1\">\n                <span className=\"text-gray-600\">Active Listings</span>\n                <span className=\"font-medium\">{insights?.activeListings}</span>\n              </div>\n              <div className=\"flex justify-between border-b pb-1\">\n                <span className=\"text-gray-600\">New Construction</span>\n                <span className=\"font-medium\">{insights?.newConstruction}</span>\n              </div>\n              <div className=\"flex justify-between border-b pb-1\">\n                <span className=\"text-gray-600\">Recently Sold</span>\n                <span className=\"font-medium\">{insights?.soldProperties}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Total Properties</span>\n                <span className=\"font-medium\">{insights?.totalProperties}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm\">Market Trends</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2 text-xs\">\n              <div className=\"flex justify-between items-center border-b pb-1\">\n                <span className=\"text-gray-600\">Price Growth (YoY)</span>\n                <span className=\"font-medium text-green-600 flex items-center gap-x-1\">\n                  <TrendingUp className=\"h-3 w-3\" />\n                  +8.5%\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center border-b pb-1\">\n                <span className=\"text-gray-600\">Inventory Change</span>\n                <span className=\"font-medium text-red-600 flex items-center gap-x-1\">\n                  <TrendingDown className=\"h-3 w-3\" />\n                  -12.3%\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center border-b pb-1\">\n                <span className=\"text-gray-600\">Sales Volume</span>\n                <span className=\"font-medium text-gray-600 flex items-center gap-x-1\">\n                  <Minus className=\"h-3 w-3\" />\n                  +0.8%\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-gray-600\">New Listings</span>\n                <span className=\"font-medium text-green-600 flex items-center gap-x-1\">\n                  <TrendingUp className=\"h-3 w-3\" />\n                  +15.2%\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm\">Key Metrics</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2 text-xs\">\n              <div className=\"flex justify-between border-b pb-1\">\n                <span className=\"text-gray-600\">Median Price/SqFt</span>\n                <span className=\"font-medium\">$425</span>\n              </div>\n              <div className=\"flex justify-between border-b pb-1\">\n                <span className=\"text-gray-600\">Months of Supply</span>\n                <span className=\"font-medium\">3.2</span>\n              </div>\n              <div className=\"flex justify-between border-b pb-1\">\n                <span className=\"text-gray-600\">Absorption Rate</span>\n                <span className=\"font-medium\">85%</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Price Reduction Rate</span>\n                <span className=\"font-medium\">22%</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n\nfunction InsightCard({\n  title,\n  value,\n  change,\n  icon: Icon,\n}: {\n  title: string\n  value: string | number\n  change: number\n  icon: React.ElementType\n}) {\n  const isPositive = change > 0\n  const isNegative = change < 0\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-xs font-medium text-gray-600\">{title}</CardTitle>\n        <Icon className=\"h-3.5 w-3.5 text-gray-400\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-lg font-bold\">{value}</div>\n        <p className=\"text-xs text-muted-foreground\">\n          <span\n            className={`inline-flex items-center gap-x-1 ${\n              isPositive ? \"text-green-600\" : isNegative ? \"text-red-600\" : \"text-gray-600\"\n            }`}\n          >\n            {isPositive ? (\n              <TrendingUp className=\"h-3 w-3\" />\n            ) : isNegative ? (\n              <TrendingDown className=\"h-3 w-3\" />\n            ) : (\n              <Minus className=\"h-3 w-3\" />\n            )}\n            {Math.abs(change)}% from last month\n          </span>\n        </p>\n      </CardContent>\n    </Card>\n  )\n}\n\nfunction PriceRangeBar({ label, count, total }: { label: string; count: number; total: number }) {\n  const percentage = total > 0 ? (count / total) * 100 : 0\n\n  return (\n    <div className=\"space-y-1\">\n      <div className=\"flex justify-between text-xs\">\n        <span className=\"text-gray-600\">{label}</span>\n        <span className=\"font-medium\">{count}</span>\n      </div>\n      <div className=\"w-full bg-gray-200 rounded-full h-1.5\">\n        <div className=\"bg-blue-600 h-1.5 rounded-full\" style={{ width: `${percentage}%` }} />\n      </div>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/listings/[id]/edit/page.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useEffect } from \"react\"\nimport { useParams, useRouter } from \"next/navigation\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { ArrowLeft, Save } from \"lucide-react\"\nimport Link from \"next/link\"\nimport { useToast } from \"@/hooks/use-toast\"\n\nexport default function EditListingPage() {\n  const params = useParams()\n  const router = useRouter()\n  const { toast } = useToast()\n  const [builders, setBuilders] = useState<any[]>([])\n  const [loading, setLoading] = useState(false)\n  const [initialLoading, setInitialLoading] = useState(true)\n  const [formData, setFormData] = useState({\n    mls_number: \"\",\n    status: \"Active\",\n    list_price: \"\",\n    street_number: \"\",\n    street_name: \"\",\n    city: \"\",\n    state: \"\",\n    zip_code: \"\",\n    bedrooms: \"\",\n    baths_full: \"\",\n    baths_half: \"\",\n    interior_sqft: \"\",\n    new_construction: false,\n    builder_id: \"\",\n    property_condition: \"\",\n    garage_spaces: \"\",\n    fireplace: false,\n    central_air: false,\n    basement: false,\n  })\n\n  useEffect(() => {\n    fetchBuilders()\n    if (params.id) {\n      fetchListing()\n    }\n  }, [params.id])\n\n  async function fetchBuilders() {\n    try {\n      const { data } = await supabase.from(\"builders\").select(\"id, name, company_name\").order(\"name\")\n      setBuilders(data || [])\n    } catch (error) {\n      console.error(\"Error fetching builders:\", error)\n    }\n  }\n\n  async function fetchListing() {\n    try {\n      const { data, error } = await supabase.from(\"listings\").select(\"*\").eq(\"id\", params.id).single()\n\n      if (error) throw error\n\n      setFormData({\n        mls_number: data.mls_number || \"\",\n        status: data.status || \"Active\",\n        list_price: data.list_price?.toString() || \"\",\n        street_number: data.street_number || \"\",\n        street_name: data.street_name || \"\",\n        city: data.city || \"\",\n        state: data.state || \"\",\n        zip_code: data.zip_code || \"\",\n        bedrooms: data.bedrooms?.toString() || \"\",\n        baths_full: data.baths_full?.toString() || \"\",\n        baths_half: data.baths_half?.toString() || \"\",\n        interior_sqft: data.interior_sqft?.toString() || \"\",\n        new_construction: data.new_construction || false,\n        builder_id: data.builder_id || \"\",\n        property_condition: data.property_condition || \"\",\n        garage_spaces: data.garage_spaces?.toString() || \"\",\n        fireplace: data.fireplace || false,\n        central_air: data.central_air || false,\n        basement: data.basement || false,\n      })\n    } catch (error) {\n      console.error(\"Error fetching property:\", error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to load listing data.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setInitialLoading(false)\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n\n    try {\n      // Convert string numbers to actual numbers\n      const listingData = {\n        ...formData,\n        list_price: formData.list_price ? Number.parseFloat(formData.list_price) : null,\n        bedrooms: formData.bedrooms ? Number.parseInt(formData.bedrooms) : null,\n        baths_full: formData.baths_full ? Number.parseInt(formData.baths_full) : null,\n        baths_half: formData.baths_half ? Number.parseInt(formData.baths_half) : null,\n        interior_sqft: formData.interior_sqft ? Number.parseInt(formData.interior_sqft) : null,\n        garage_spaces: formData.garage_spaces ? Number.parseInt(formData.garage_spaces) : null,\n        builder_id: formData.builder_id || null,\n      }\n\n      const { error } = await supabase.from(\"listings\").update(listingData).eq(\"id\", params.id)\n\n      if (error) throw error\n\n      toast({\n        title: \"Listing updated\",\n        description: \"Listing has been successfully updated.\",\n      })\n\n      router.push(`/listings/${params.id}`)\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update listing.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (initialLoading) {\n    return <div className=\"text-xs text-gray-600\">Loading...</div>\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center gap-x-2\">\n        <Button variant=\"ghost\" size=\"sm\" asChild>\n          <Link href={`/listings/${params.id}`}>\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Link>\n        </Button>\n        <h1 className=\"text-lg font-semibold\">Edit Listing</h1>\n      </div>\n\n      <form onSubmit={handleSubmit}>\n        <div className=\"grid gap-4 lg:grid-cols-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Basic Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"mls_number\" className=\"text-xs\">\n                  MLS Number *\n                </Label>\n                <Input\n                  id=\"mls_number\"\n                  value={formData.mls_number}\n                  onChange={(e) => setFormData({ ...formData, mls_number: e.target.value })}\n                  className=\"h-8 text-xs\"\n                  required\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"status\" className=\"text-xs\">\n                  Status\n                </Label>\n                <Select value={formData.status} onValueChange={(value) => setFormData({ ...formData, status: value })}>\n                  <SelectTrigger className=\"h-8 text-xs\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Active\">Active</SelectItem>\n                    <SelectItem value=\"Pending\">Pending</SelectItem>\n                    <SelectItem value=\"Under Contract\">Under Contract</SelectItem>\n                    <SelectItem value=\"Sold\">Sold</SelectItem>\n                    <SelectItem value=\"Coming Soon\">Coming Soon</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"list_price\" className=\"text-xs\">\n                  List Price\n                </Label>\n                <Input\n                  id=\"list_price\"\n                  type=\"number\"\n                  value={formData.list_price}\n                  onChange={(e) => setFormData({ ...formData, list_price: e.target.value })}\n                  className=\"h-8 text-xs\"\n                  placeholder=\"0\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"builder_id\" className=\"text-xs\">\n                  Builder\n                </Label>\n                <Select\n                  value={formData.builder_id}\n                  onValueChange={(value) => setFormData({ ...formData, builder_id: value })}\n                >\n                  <SelectTrigger className=\"h-8 text-xs\">\n                    <SelectValue placeholder=\"Select builder\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"no_builder\">No builder</SelectItem>\n                    {builders.map((builder) => (\n                      <SelectItem key={builder.id} value={builder.id}>\n                        {builder.name} {builder.company_name && `(${builder.company_name})`}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Address</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <Label htmlFor=\"street_number\" className=\"text-xs\">\n                    Street Number\n                  </Label>\n                  <Input\n                    id=\"street_number\"\n                    value={formData.street_number}\n                    onChange={(e) => setFormData({ ...formData, street_number: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"street_name\" className=\"text-xs\">\n                    Street Name\n                  </Label>\n                  <Input\n                    id=\"street_name\"\n                    value={formData.street_name}\n                    onChange={(e) => setFormData({ ...formData, street_name: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"city\" className=\"text-xs\">\n                  City\n                </Label>\n                <Input\n                  id=\"city\"\n                  value={formData.city}\n                  onChange={(e) => setFormData({ ...formData, city: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <Label htmlFor=\"state\" className=\"text-xs\">\n                    State\n                  </Label>\n                  <Input\n                    id=\"state\"\n                    value={formData.state}\n                    onChange={(e) => setFormData({ ...formData, state: e.target.value })}\n                    className=\"h-8 text-xs\"\n                    placeholder=\"VA\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"zip_code\" className=\"text-xs\">\n                    Zip Code\n                  </Label>\n                  <Input\n                    id=\"zip_code\"\n                    value={formData.zip_code}\n                    onChange={(e) => setFormData({ ...formData, zip_code: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Property Details</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"grid grid-cols-3 gap-2\">\n                <div>\n                  <Label htmlFor=\"bedrooms\" className=\"text-xs\">\n                    Bedrooms\n                  </Label>\n                  <Input\n                    id=\"bedrooms\"\n                    type=\"number\"\n                    value={formData.bedrooms}\n                    onChange={(e) => setFormData({ ...formData, bedrooms: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"baths_full\" className=\"text-xs\">\n                    Full Baths\n                  </Label>\n                  <Input\n                    id=\"baths_full\"\n                    type=\"number\"\n                    value={formData.baths_full}\n                    onChange={(e) => setFormData({ ...formData, baths_full: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"baths_half\" className=\"text-xs\">\n                    Half Baths\n                  </Label>\n                  <Input\n                    id=\"baths_half\"\n                    type=\"number\"\n                    value={formData.baths_half}\n                    onChange={(e) => setFormData({ ...formData, baths_half: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"interior_sqft\" className=\"text-xs\">\n                  Square Feet\n                </Label>\n                <Input\n                  id=\"interior_sqft\"\n                  type=\"number\"\n                  value={formData.interior_sqft}\n                  onChange={(e) => setFormData({ ...formData, interior_sqft: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"garage_spaces\" className=\"text-xs\">\n                  Garage Spaces\n                </Label>\n                <Input\n                  id=\"garage_spaces\"\n                  type=\"number\"\n                  value={formData.garage_spaces}\n                  onChange={(e) => setFormData({ ...formData, garage_spaces: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Features</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"new_construction\"\n                  checked={formData.new_construction}\n                  onCheckedChange={(checked) => setFormData({ ...formData, new_construction: !!checked })}\n                />\n                <Label htmlFor=\"new_construction\" className=\"text-xs\">\n                  New Construction\n                </Label>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"fireplace\"\n                  checked={formData.fireplace}\n                  onCheckedChange={(checked) => setFormData({ ...formData, fireplace: !!checked })}\n                />\n                <Label htmlFor=\"fireplace\" className=\"text-xs\">\n                  Fireplace\n                </Label>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"central_air\"\n                  checked={formData.central_air}\n                  onCheckedChange={(checked) => setFormData({ ...formData, central_air: !!checked })}\n                />\n                <Label htmlFor=\"central_air\" className=\"text-xs\">\n                  Central Air\n                </Label>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"basement\"\n                  checked={formData.basement}\n                  onCheckedChange={(checked) => setFormData({ ...formData, basement: !!checked })}\n                />\n                <Label htmlFor=\"basement\" className=\"text-xs\">\n                  Basement\n                </Label>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"flex justify-end gap-x-2 mt-4\">\n          <Button type=\"button\" variant=\"outline\" asChild>\n            <Link href={`/listings/${params.id}`}>Cancel</Link>\n          </Button>\n          <Button type=\"submit\" disabled={loading}>\n            {loading ? (\n              \"Updating...\"\n            ) : (\n              <>\n                <Save className=\"mr-2 h-4 w-4\" />\n                Update Listing\n              </>\n            )}\n          </Button>\n        </div>\n      </form>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/listings/[id]/page.tsx\n```typescript\n\"use client\"\n\nimport { useEffect, useState } from \"react\"\nimport { useParams } from \"next/navigation\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { formatCurrency, formatDate, getFullAddress, getStatusColor } from \"@/lib/utils\"\nimport { ArrowLeft, Edit, Share2 } from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport default function ListingDetailPage() {\n  const params = useParams()\n  const [listing, setListing] = useState<any>(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    if (params.id) {\n      fetchListing()\n    }\n  }, [params.id])\n\n  async function fetchListing() {\n    try {\n      const { data, error } = await supabase.from(\"listings\").select(\"*, builders(*)\").eq(\"id\", params.id).single()\n\n      if (error) throw error\n      setListing(data)\n    } catch (error) {\n      console.error(\"Error fetching listing:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (loading) {\n    return <div className=\"text-xs text-gray-600\">Loading...</div>\n  }\n\n  if (!listing) {\n    return <div className=\"text-xs text-gray-600\">Listing not found</div>\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-x-2\">\n          <Button variant=\"ghost\" size=\"sm\" asChild>\n            <Link href=\"/listings\">\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Link>\n          </Button>\n          <div>\n            <h1 className=\"text-lg font-semibold\">{listing.mls_number}</h1>\n            <p className=\"text-xs text-gray-600\">{getFullAddress(listing)}</p>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-x-2\">\n          <Button size=\"sm\" variant=\"outline\" className=\"h-7 text-xs\">\n            <Share2 className=\"mr-1.5 h-3 w-3\" />\n            Add to Social\n          </Button>\n          <Button size=\"sm\" className=\"h-7 text-xs\" asChild>\n            <Link href={`/listings/${params.id}/edit`}>\n              <Edit className=\"mr-1.5 h-3 w-3\" />\n              Edit\n            </Link>\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid gap-4 lg:grid-cols-3\">\n        <div className=\"lg:col-span-2 space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Listing Details</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"grid grid-cols-2 gap-4 text-xs\">\n                <div>\n                  <span className=\"text-gray-600\">Status:</span>\n                  <Badge\n                    variant=\"secondary\"\n                    className={cn(\"ml-2 text-[10px] px-1.5 py-0\", getStatusColor(listing.status))}\n                  >\n                    {listing.status}\n                  </Badge>\n                </div>\n                <div>\n                  <span className=\"text-gray-600\">List Price:</span>\n                  <span className=\"ml-2 font-medium\">{formatCurrency(listing.list_price)}</span>\n                </div>\n                <div>\n                  <span className=\"text-gray-600\">Bedrooms:</span>\n                  <span className=\"ml-2\">{listing.bedrooms || \"-\"}</span>\n                </div>\n                <div>\n                  <span className=\"text-gray-600\">Bathrooms:</span>\n                  <span className=\"ml-2\">\n                    {listing.baths_full || 0}\n                    {listing.baths_half ? `.${listing.baths_half}` : \"\"}\n                  </span>\n                </div>\n                <div>\n                  <span className=\"text-gray-600\">Square Feet:</span>\n                  <span className=\"ml-2\">{listing.interior_sqft?.toLocaleString() || \"-\"}</span>\n                </div>\n                <div>\n                  <span className=\"text-gray-600\">List Date:</span>\n                  <span className=\"ml-2\">{formatDate(listing.list_date)}</span>\n                </div>\n                <div>\n                  <span className=\"text-gray-600\">New Construction:</span>\n                  <span className=\"ml-2\">{listing.new_construction ? \"Yes\" : \"No\"}</span>\n                </div>\n                <div>\n                  <span className=\"text-gray-600\">Builder:</span>\n                  <span className=\"ml-2\">\n                    {listing.builders ? (\n                      <Link href={`/builders/${listing.builders.id}`} className=\"text-blue-600 hover:underline\">\n                        {listing.builders.name}\n                      </Link>\n                    ) : (\n                      \"-\"\n                    )}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {listing.builders && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-sm\">Builder Information</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-xs\">\n                  <div className=\"font-medium\">{listing.builders.name}</div>\n                  <div className=\"text-gray-600\">{listing.builders.company_name}</div>\n                  {listing.builders.phone && <div className=\"text-gray-600\">{listing.builders.phone}</div>}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        <div className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Financial Details</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2 text-xs\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Original Price:</span>\n                <span>{formatCurrency(listing.original_price)}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Current Price:</span>\n                <span className=\"font-medium\">{formatCurrency(listing.list_price)}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Annual Taxes:</span>\n                <span>{formatCurrency(listing.tax_annual_total)}</span>\n              </div>\n              {listing.association_fee && (\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">HOA Fee:</span>\n                  <span>\n                    {formatCurrency(listing.association_fee)} {listing.association_fee_frequency}\n                  </span>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Property Features</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2 text-xs\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Garage Spaces:</span>\n                <span>{listing.garage_spaces || \"-\"}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Fireplace:</span>\n                <span>{listing.fireplace ? \"Yes\" : \"No\"}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Central Air:</span>\n                <span>{listing.central_air ? \"Yes\" : \"No\"}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Basement:</span>\n                <span>{listing.basement ? \"Yes\" : \"No\"}</span>\n              </div>\n              {listing.property_condition && (\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Condition:</span>\n                  <span>{listing.property_condition}</span>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction cn(...classes: string[]) {\n  return classes.filter(Boolean).join(\" \")\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/listings/page.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { DataTable } from \"@/components/ui/data-table\"\nimport { Button } from \"@/components/ui/button\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { formatCurrency, formatDate, getFullAddress, getStatusColor } from \"@/lib/utils\"\nimport { MoreHorizontal, Plus, Download, Eye, Share2, EyeOff, Building2, Trash2, Edit } from \"lucide-react\" // Added Edit\nimport Link from \"next/link\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { BuilderAssignmentDialog } from \"@/components/builder-assignment-dialog\"\nimport { ListingFormDialog } from \"@/components/listing-form-dialog\" // Import new dialog\nimport type { ColumnDef } from \"@tanstack/react-table\"\nimport { DataTableColumnHeader } from \"@/components/ui/data-table-column-header\"\nimport type { Database } from \"@/types/supabase\"\n\ntype Listing = Database[\"public\"][\"Tables\"][\"listings\"][\"Row\"] & {\n  builders: Pick<Database[\"public\"][\"Tables\"][\"builders\"][\"Row\"], \"id\" | \"name\" | \"company_name\"> | null\n}\n\nexport default function PropertiesPage() {\n  const [properties, setProperties] = React.useState<Listing[]>([])\n  const [loading, setLoading] = React.useState(true)\n  const [showBuilderDialog, setShowBuilderDialog] = React.useState(false)\n  const [selectedPropertyIdsForDialog, setSelectedPropertyIdsForDialog] = React.useState<string[]>([])\n  const [isListingFormOpen, setIsListingFormOpen] = React.useState(false) // State for new dialog\n  const [editingListing, setEditingListing] = React.useState<Partial<Listing> | undefined>(undefined) // State for editing\n\n  const { toast } = useToast()\n\n  const fetchProperties = React.useCallback(async () => {\n    setLoading(true)\n    try {\n      const { data, error } = await supabase\n        .from(\"listings\")\n        .select(\n          `\n      *,\n      builders (\n        id,\n        name,\n        company_name\n      )\n    `,\n        )\n        .order(\"list_date\", { ascending: false })\n\n      if (error) throw error\n      setProperties((data as Listing[]) || [])\n    } catch (error) {\n      console.error(\"Error fetching listings:\", error)\n      toast({ title: \"Error\", description: \"Could not fetch listings.\", variant: \"destructive\" })\n    } finally {\n      setLoading(false)\n    }\n  }, [toast])\n\n  React.useEffect(() => {\n    fetchProperties()\n  }, [fetchProperties])\n\n  const handleOpenNewListingDialog = () => {\n    setEditingListing(undefined)\n    setIsListingFormOpen(true)\n  }\n\n  const handleOpenEditListingDialog = (listing: Listing) => {\n    setEditingListing(listing)\n    setIsListingFormOpen(true)\n  }\n\n  const handleBulkAction = async (action: string, selectedRows: Listing[]) => {\n    const selectedIds = selectedRows.map((row) => row.id)\n    if (selectedIds.length === 0) {\n      toast({\n        title: \"No listings selected\",\n        description: \"Please select listings to perform bulk actions.\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    try {\n      let successMessage = \"\"\n      switch (action) {\n        case \"hide\":\n          await supabase\n            .from(\"listings\")\n            .update({ metadata: { hidden: true } })\n            .in(\"id\", selectedIds)\n          successMessage = `Hid ${selectedIds.length} listings.`\n          break\n        case \"add_to_social\":\n          await supabase.from(\"listings\").update({ in_social_queue: true }).in(\"id\", selectedIds)\n          successMessage = `Added ${selectedIds.length} listings to social queue.`\n          break\n        case \"assign_builder\":\n          setSelectedPropertyIdsForDialog(selectedIds)\n          setShowBuilderDialog(true)\n          return // Dialog will handle toast & refresh\n        case \"delete\":\n          if (!confirm(`Are you sure you want to delete ${selectedIds.length} listings? This cannot be undone.`)) {\n            return\n          }\n          const { error } = await supabase.from(\"listings\").delete().in(\"id\", selectedIds)\n          if (error) throw error\n          successMessage = `Deleted ${selectedIds.length} listings.`\n          break\n      }\n\n      toast({\n        title: \"Bulk action completed\",\n        description: successMessage,\n      })\n\n      fetchProperties()\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to perform bulk action.\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  const handleBuilderAssignmentComplete = () => {\n    fetchProperties()\n  }\n\n  const exportToCSV = (selectedRows: Listing[]) => {\n    const dataToExport = selectedRows.length > 0 ? selectedRows : properties\n    if (dataToExport.length === 0) {\n      toast({ title: \"No data to export\", variant: \"destructive\" })\n      return\n    }\n    const csvContent = [\n      [\n        \"MLS Number\",\n        \"Status\",\n        \"Address\",\n        \"List Price\",\n        \"Bedrooms\",\n        \"Bathrooms\",\n        \"Sq Ft\",\n        \"New Construction\",\n        \"Builder\",\n        \"List Date\",\n      ].join(\",\"),\n      ...dataToExport.map((property) =>\n        [\n          `\"${property.mls_number || \"\"}\"`,\n          `\"${property.status || \"\"}\"`,\n          `\"${getFullAddress(property)}\"`,\n          property.list_price || \"\",\n          property.bedrooms || \"\",\n          `${property.baths_full || 0}${property.baths_half ? `.${property.baths_half}` : \"\"}`,\n          property.interior_sqft || \"\",\n          property.new_construction ? \"Yes\" : \"No\",\n          `\"${property.builders?.name || \"\"}\"`,\n          `\"${property.list_date || \"\"}\"`,\n        ].join(\",\"),\n      ),\n    ].join(\"\\n\")\n\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" })\n    const url = window.URL.createObjectURL(blob)\n    const a = document.createElement(\"a\")\n    a.href = url\n    a.download = \"listings_export.csv\"\n    a.click()\n    window.URL.revokeObjectURL(url)\n    toast({ title: \"Export Started\", description: `${dataToExport.length} listings are being exported.` })\n  }\n\n  const columns = React.useMemo<ColumnDef<Listing>[]>(\n    () => [\n      {\n        id: \"select\",\n        header: ({ table }) => (\n          <Checkbox\n            checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && \"indeterminate\")}\n            onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n            aria-label=\"Select all\"\n            className=\"translate-y-[2px]\"\n          />\n        ),\n        cell: ({ row }) => (\n          <Checkbox\n            checked={row.getIsSelected()}\n            onCheckedChange={(value) => row.toggleSelected(!!value)}\n            aria-label=\"Select row\"\n            className=\"translate-y-[2px]\"\n          />\n        ),\n        enableSorting: false,\n        enableHiding: false,\n      },\n      {\n        accessorKey: \"mls_number\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"MLS #\" />,\n        cell: ({ row }) => (\n          <Link href={`/listings/${row.original.id}`} className=\"font-medium hover:underline text-primary\">\n            {row.getValue(\"mls_number\") || \"-\"}\n          </Link>\n        ),\n      },\n      {\n        accessorKey: \"status\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Status\" />,\n        cell: ({ row }) => {\n          const status = row.getValue(\"status\") as string\n          return status ? (\n            <Badge variant=\"secondary\" className={cn(\"text-[10px] px-1.5 py-0\", getStatusColor(status))}>\n              {status}\n            </Badge>\n          ) : (\n            \"-\"\n          )\n        },\n        filterFn: (row, id, value) => value.includes(row.getValue(id)),\n      },\n      {\n        accessorKey: \"address\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Address\" />,\n        cell: ({ row }) => (\n          <Link href={`/listings/${row.original.id}`} className=\"max-w-xs truncate hover:underline\">\n            {getFullAddress(row.original)}\n          </Link>\n        ),\n      },\n      {\n        accessorKey: \"list_price\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"List Price\" />,\n        cell: ({ row }) => formatCurrency(row.getValue(\"list_price\")),\n      },\n      {\n        accessorKey: \"bedrooms\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Beds\" />,\n        cell: ({ row }) => row.getValue(\"bedrooms\") || \"-\",\n      },\n      {\n        accessorKey: \"baths_full\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Baths\" />,\n        cell: ({ row }) => {\n          const full = (row.getValue(\"baths_full\") as number) || 0\n          const half = row.original.baths_half || 0\n          return `${full}${half > 0 ? `.${half}` : \"\"}`\n        },\n      },\n      {\n        accessorKey: \"interior_sqft\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Sq Ft\" />,\n        cell: ({ row }) => {\n          const sqft = row.getValue(\"interior_sqft\") as number\n          return sqft ? sqft.toLocaleString() : \"-\"\n        },\n      },\n      {\n        accessorKey: \"new_construction\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"New\" />,\n        cell: ({ row }) =>\n          row.getValue(\"new_construction\") ? (\n            <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800 text-[10px] px-1.5 py-0\">\n              NEW\n            </Badge>\n          ) : (\n            \"-\"\n          ),\n        filterFn: (row, id, value) => value.includes(row.getValue(id)),\n      },\n      {\n        accessorKey: \"builders.name\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Builder\" />,\n        cell: ({ row }) => {\n          const builder = row.original.builders\n          return builder ? (\n            <Link href={`/builders/${builder.id}`} className=\"text-primary hover:underline text-xs\">\n              {builder.name}\n            </Link>\n          ) : (\n            <span className=\"text-gray-400 text-xs\">-</span>\n          )\n        },\n      },\n      {\n        accessorKey: \"list_date\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Listed\" />,\n        cell: ({ row }) => formatDate(row.getValue(\"list_date\")),\n      },\n      {\n        id: \"actions\",\n        cell: ({ row }) => {\n          return (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"h-7 w-7 p-0\">\n                  <span className=\"sr-only\">Open menu</span>\n                  <MoreHorizontal className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-[160px]\">\n                <DropdownMenuLabel className=\"text-xs\">Actions</DropdownMenuLabel>\n                <DropdownMenuItem className=\"text-xs\" asChild>\n                  <Link href={`/listings/${row.original.id}`}>\n                    <Eye className=\"mr-2 h-3.5 w-3.5\" />\n                    View details\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem className=\"text-xs\" onClick={() => handleOpenEditListingDialog(row.original)}>\n                  <Edit className=\"mr-2 h-3.5 w-3.5\" />\n                  Edit Listing\n                </DropdownMenuItem>\n                <DropdownMenuItem className=\"text-xs\" onClick={() => handleBulkAction(\"add_to_social\", [row.original])}>\n                  <Share2 className=\"mr-2 h-3.5 w-3.5\" />\n                  Add to Social Queue\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem className=\"text-xs\" onClick={() => handleBulkAction(\"hide\", [row.original])}>\n                  <EyeOff className=\"mr-2 h-3.5 w-3.5\" />\n                  Hide Listing\n                </DropdownMenuItem>\n                <DropdownMenuItem\n                  className=\"text-xs text-red-600 focus:text-red-600 focus:bg-red-50\"\n                  onClick={() => handleBulkAction(\"delete\", [row.original])}\n                >\n                  <Trash2 className=\"mr-2 h-3.5 w-3.5\" />\n                  Delete Listing\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          )\n        },\n      },\n    ],\n    [fetchProperties],\n  )\n\n  const renderPropertiesBulkActions = (selectedRows: Listing[]) => (\n    <>\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        className=\"h-7 text-xs\"\n        onClick={() => handleBulkAction(\"add_to_social\", selectedRows)}\n      >\n        <Share2 className=\"mr-1.5 h-3 w-3\" /> Add to Social\n      </Button>\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        className=\"h-7 text-xs\"\n        onClick={() => handleBulkAction(\"assign_builder\", selectedRows)}\n      >\n        <Building2 className=\"mr-1.5 h-3 w-3\" /> Assign Builder\n      </Button>\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        className=\"h-7 text-xs\"\n        onClick={() => handleBulkAction(\"hide\", selectedRows)}\n      >\n        <EyeOff className=\"mr-1.5 h-3 w-3\" /> Hide\n      </Button>\n      <Button\n        variant=\"destructive\"\n        size=\"sm\"\n        className=\"h-7 text-xs\"\n        onClick={() => handleBulkAction(\"delete\", selectedRows)}\n      >\n        <Trash2 className=\"mr-1.5 h-3 w-3\" /> Delete\n      </Button>\n    </>\n  )\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-lg font-semibold\">Listings</h1>\n          <p className=\"text-xs text-muted-foreground\">Manage your listings.</p>\n        </div>\n        <div className=\"flex items-center gap-x-2\">\n          <Button size=\"sm\" variant=\"outline\" className=\"h-7 text-xs\" onClick={() => exportToCSV([])}>\n            <Download className=\"mr-1.5 h-3 w-3\" />\n            Export All\n          </Button>\n          <Button size=\"sm\" className=\"h-7 text-xs\" onClick={handleOpenNewListingDialog}>\n            {\" \"}\n            {/* Changed this line */}\n            <Plus className=\"mr-1.5 h-3 w-3\" />\n            Add Listing\n          </Button>\n        </div>\n      </div>\n\n      <DataTable\n        columns={columns}\n        data={properties}\n        loading={loading}\n        renderBulkActions={renderPropertiesBulkActions}\n        searchColumn=\"address\" // Example: enable global search on address\n      />\n\n      <BuilderAssignmentDialog\n        open={showBuilderDialog}\n        onOpenChange={setShowBuilderDialog}\n        selectedPropertyIds={selectedPropertyIdsForDialog}\n        onAssignmentComplete={handleBuilderAssignmentComplete}\n      />\n      <ListingFormDialog // Add the new dialog component\n        open={isListingFormOpen}\n        onOpenChange={setIsListingFormOpen}\n        onListingCreated={fetchProperties} // Refresh list on creation\n        listing={editingListing}\n      />\n    </div>\n  )\n}\n\nfunction cn(...classes: string[]) {\n  return classes.filter(Boolean).join(\" \")\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/reports/page.tsx\n```typescript\n\"use client\"\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { FileText, Download, Calendar, BarChart3 } from \"lucide-react\"\n\nexport default function ReportsPage() {\n  return (\n    <div className=\"space-y-4\">\n      <div>\n        <h1 className=\"text-lg font-semibold\">Reports</h1>\n        <p className=\"text-xs text-gray-600\">Generate and download market reports</p>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm flex items-center gap-x-2\">\n              <FileText className=\"h-4 w-4\" />\n              Market Summary Report\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-xs text-gray-600 mb-3\">Comprehensive overview of market conditions and trends</p>\n            <Button size=\"sm\" className=\"h-7 text-xs w-full\">\n              <Download className=\"mr-1.5 h-3 w-3\" />\n              Generate Report\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm flex items-center gap-x-2\">\n              <BarChart3 className=\"h-4 w-4\" />\n              Builder Performance\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-xs text-gray-600 mb-3\">Analysis of builder activity and market share</p>\n            <Button size=\"sm\" className=\"h-7 text-xs w-full\">\n              <Download className=\"mr-1.5 h-3 w-3\" />\n              Generate Report\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm flex items-center gap-x-2\">\n              <Calendar className=\"h-4 w-4\" />\n              Monthly Activity\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-xs text-gray-600 mb-3\">Monthly breakdown of listings and sales activity</p>\n            <Button size=\"sm\" className=\"h-7 text-xs w-full\">\n              <Download className=\"mr-1.5 h-3 w-3\" />\n              Generate Report\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/settings/page.tsx\n```typescript\n\"use client\"\n\nimport { AlertDialogTrigger } from \"@/components/ui/alert-dialog\" // Keep if used by other parts, otherwise can be removed if only for StyleGuide\nimport { DialogTrigger } from \"@/components/ui/dialog\" // Keep if used by other parts, otherwise can be removed if only for StyleGuide\n\nimport { useState, useEffect, useCallback } from \"react\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { supabase } from \"@/lib/supabase/client\" // Used by multiple sub-components\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Switch } from \"@/components/ui/switch\"\nimport {\n  Select as ShadSelect,\n  SelectContent as ShadSelectContent,\n  SelectItem as ShadSelectItem,\n  SelectTrigger as ShadSelectTrigger,\n  SelectValue as ShadSelectValue,\n} from \"@/components/ui/select\"\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { useToast } from \"@/hooks/use-toast\" // Corrected path\nimport {\n  AlertCircle,\n  CheckCircle,\n  Loader2,\n  PaletteIcon,\n  ChevronDown,\n  ChevronsUpDown,\n  Mail,\n  Github,\n  Italic,\n  Check,\n  DatabaseIcon,\n  MapPin,\n} from \"lucide-react\"\nimport type { Database } from \"@/types/supabase\"\nimport { hexToHsl } from \"@/lib/color-utils\"\nimport {\n  Dialog, // Keep if used by other parts\n  DialogContent as DialogContentForStyleGuide, // Alias to avoid conflict if Dialog is used elsewhere\n  DialogDescription as DialogDescriptionForStyleGuide,\n  DialogFooter as DialogFooterForStyleGuide,\n  DialogHeader as DialogHeaderForStyleGuide,\n  DialogTitle as DialogTitleForStyleGuide,\n} from \"@/components/ui/dialog\"\nimport {\n  AlertDialog, // Keep if used by other parts\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent as AlertDialogContentForStyleGuide, // Alias\n  AlertDialogDescription as AlertDialogDescriptionForStyleGuide,\n  AlertDialogFooter as AlertDialogFooterForStyleGuide,\n  AlertDialogHeader as AlertDialogHeaderForStyleGuide,\n  AlertDialogTitle as AlertDialogTitleForStyleGuide,\n} from \"@/components/ui/alert-dialog\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuPortal,\n} from \"@/components/ui/dropdown-menu\"\nimport {\n  Select as SelectForStyleGuide,\n  SelectContent as SelectContentForStyleGuideSelect, // Further aliasing for clarity\n  SelectItem as SelectItemForStyleGuideSelect,\n  SelectTrigger as SelectTriggerForStyleGuideSelect,\n  SelectValue as SelectValueForStyleGuideSelect,\n} from \"@/components/ui/select\"\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\"\nimport { Switch as SwitchForStyleGuide } from \"@/components/ui/switch\"\nimport { Toggle } from \"@/components/ui/toggle\"\nimport { cn, normalizeHeader } from \"@/lib/utils\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n\nimport { PillInput } from \"@/components/pill-input\"\nimport type { ListingFieldDefinition } from \"@/lib/listing-fields\"\nimport { builderTableColumns, type BuilderFieldDefinition } from \"@/lib/builder-fields\"\nimport { listingTableColumns } from \"@/lib/listing-fields\"\n\ntype UserSettings = Database[\"public\"][\"Tables\"][\"user_settings\"][\"Row\"]\ntype UserFieldMappingInsert = Database[\"public\"][\"Tables\"][\"user_field_mappings\"][\"Insert\"]\n\nconst DEFAULT_PRIMARY_HEX = \"#0A0A0A\"\nconst DEFAULT_PRIMARY_FOREGROUND_HEX = \"#FAFAFA\"\n\nconst PREDEFINED_ACCENTS = [\n  { name: \"Default\", primary: DEFAULT_PRIMARY_HEX, foreground: DEFAULT_PRIMARY_FOREGROUND_HEX },\n  { name: \"Vercel Blue\", primary: \"#0070F3\", foreground: \"#FFFFFF\" },\n  { name: \"Forest Green\", primary: \"#228B22\", foreground: \"#F0FFF0\" },\n  { name: \"Sunset Orange\", primary: \"#FF4500\", foreground: \"#FFFFF0\" },\n  { name: \"Royal Purple\", primary: \"#6A0DAD\", foreground: \"#F8F0FF\" },\n]\n\nconst GEOCODING_BATCH_SIZE = 10 // Define batch size for geocoding info\n\nexport default function SettingsPage() {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-xl font-semibold\">Settings</h1>\n        <p className=\"text-sm text-muted-foreground\">Manage your account, preferences, and application style</p>\n      </div>\n\n      <Tabs defaultValue=\"preferences\" className=\"w-full\">\n        <TabsList className=\"grid w-full max-w-2xl grid-cols-6\">\n          <TabsTrigger value=\"preferences\">Preferences</TabsTrigger>\n          <TabsTrigger value=\"account\">Account</TabsTrigger>\n          <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n          <TabsTrigger value=\"style-guide\">Style Guide</TabsTrigger>\n          <TabsTrigger value=\"integrations\">Integrations</TabsTrigger>\n          <TabsTrigger value=\"data-structure\">Data Structure</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"preferences\">\n          <PreferencesSettings />\n        </TabsContent>\n        <TabsContent value=\"account\">\n          <AccountSettings />\n        </TabsContent>\n        <TabsContent value=\"notifications\">\n          <NotificationSettings />\n        </TabsContent>\n        <TabsContent value=\"style-guide\">\n          <StyleGuideSettingsTab />\n        </TabsContent>\n        <TabsContent value=\"integrations\">\n          <IntegrationsSettings />\n        </TabsContent>\n        <TabsContent value=\"data-structure\">\n          <DataStructureSettings />\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n\nfunction PreferencesSettings() {\n  const { user } = useAuth()\n  const [settings, setSettings] = useState<Partial<UserSettings>>({\n    theme: \"light\",\n    default_view: \"grid\",\n    items_per_page: 50,\n  })\n  const [isLoading, setIsLoading] = useState(true)\n  const [isSaving, setIsSaving] = useState(false)\n  const [success, setSuccess] = useState<string | null>(null)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    async function fetchSettings() {\n      if (!user) {\n        setIsLoading(false)\n        return\n      }\n      setIsLoading(true)\n      try {\n        const { data, error: fetchError } = await supabase\n          .from(\"user_settings\")\n          .select(\"theme, default_view, items_per_page\")\n          .eq(\"user_id\", user.id)\n          .single()\n\n        if (fetchError && fetchError.code !== \"PGRST116\") {\n          throw fetchError\n        }\n        if (data) {\n          setSettings((prev) => ({ ...prev, ...data }))\n        }\n      } catch (err: any) {\n        console.error(\"Error fetching user preferences:\", err)\n        setError(err.message || \"Failed to load preferences.\")\n      } finally {\n        setIsLoading(false)\n      }\n    }\n    fetchSettings()\n  }, [user])\n\n  const handleSave = async () => {\n    if (!user) return\n\n    setIsSaving(true)\n    setSuccess(null)\n    setError(null)\n\n    try {\n      const { error: upsertError } = await supabase.from(\"user_settings\").upsert(\n        {\n          user_id: user.id,\n          theme: settings.theme,\n          default_view: settings.default_view,\n          items_per_page: settings.items_per_page,\n        },\n        { onConflict: \"user_id\" },\n      )\n\n      if (upsertError) throw upsertError\n\n      setSuccess(\"Preferences saved successfully\")\n    } catch (err: any) {\n      setError(err.message || \"Failed to save preferences\")\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-base\">Display Preferences</CardTitle>\n        <CardDescription className=\"text-xs\">Customize how the application looks and behaves</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {success && (\n          <Alert className=\"bg-green-50 text-green-800 border-green-200\">\n            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n            <AlertTitle>Success</AlertTitle>\n            <AlertDescription>{success}</AlertDescription>\n          </Alert>\n        )}\n        {error && (\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertTitle>Error</AlertTitle>\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"theme\">Theme</Label>\n          <ShadSelect\n            value={settings.theme || \"light\"}\n            onValueChange={(value) => setSettings({ ...settings, theme: value })}\n            disabled={isLoading}\n          >\n            <ShadSelectTrigger id=\"theme\" className=\"attio-input\">\n              <ShadSelectValue placeholder=\"Select theme\" />\n            </ShadSelectTrigger>\n            <ShadSelectContent>\n              <ShadSelectItem value=\"light\">Light</ShadSelectItem>\n              <ShadSelectItem value=\"dark\">Dark</ShadSelectItem>\n              <ShadSelectItem value=\"system\">System</ShadSelectItem>\n            </ShadSelectContent>\n          </ShadSelect>\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"default-view\">Default View</Label>\n          <ShadSelect\n            value={settings.default_view || \"grid\"}\n            onValueChange={(value) => setSettings({ ...settings, default_view: value })}\n            disabled={isLoading}\n          >\n            <ShadSelectTrigger id=\"default-view\" className=\"attio-input\">\n              <ShadSelectValue placeholder=\"Select default view\" />\n            </ShadSelectTrigger>\n            <ShadSelectContent>\n              <ShadSelectItem value=\"grid\">Grid</ShadSelectItem>\n              <ShadSelectItem value=\"table\">Table</ShadSelectItem>\n              <ShadSelectItem value=\"kanban\">Kanban</ShadSelectItem>\n            </ShadSelectContent>\n          </ShadSelect>\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"items-per-page\">Items Per Page</Label>\n          <ShadSelect\n            value={(settings.items_per_page || 50).toString()}\n            onValueChange={(value) => setSettings({ ...settings, items_per_page: Number.parseInt(value) })}\n            disabled={isLoading}\n          >\n            <ShadSelectTrigger id=\"items-per-page\" className=\"attio-input\">\n              <ShadSelectValue placeholder=\"Select items per page\" />\n            </ShadSelectTrigger>\n            <ShadSelectContent>\n              <ShadSelectItem value=\"10\">10</ShadSelectItem>\n              <ShadSelectItem value=\"25\">25</ShadSelectItem>\n              <ShadSelectItem value=\"50\">50</ShadSelectItem>\n              <ShadSelectItem value=\"100\">100</ShadSelectItem>\n            </ShadSelectContent>\n          </ShadSelect>\n        </div>\n      </CardContent>\n      <CardFooter>\n        <Button onClick={handleSave} disabled={isLoading || isSaving}>\n          {isSaving ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : \"Save Preferences\"}\n        </Button>\n      </CardFooter>\n    </Card>\n  )\n}\n\nfunction AccountSettings() {\n  const { user } = useAuth()\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [confirmPassword, setConfirmPassword] = useState(\"\")\n  const [isUpdating, setIsUpdating] = useState(false)\n  const [success, setSuccess] = useState<string | null>(null)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    if (user) {\n      setEmail(user.email || \"\")\n    }\n  }, [user])\n\n  const handleUpdatePassword = async () => {\n    if (!password || password !== confirmPassword) {\n      setError(\"Passwords do not match or are empty.\")\n      return\n    }\n    if (password.length < 6) {\n      setError(\"Password must be at least 6 characters long.\")\n      return\n    }\n\n    setIsUpdating(true)\n    setSuccess(null)\n    setError(null)\n\n    try {\n      const { error: updateError } = await supabase.auth.updateUser({ password })\n      if (updateError) throw updateError\n\n      setSuccess(\"Password updated successfully\")\n      setPassword(\"\")\n      setConfirmPassword(\"\")\n    } catch (err: any) {\n      setError(err.message || \"Failed to update password\")\n    } finally {\n      setIsUpdating(false)\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-base\">Account Settings</CardTitle>\n        <CardDescription className=\"text-xs\">Update your account information and password</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {success && (\n          <Alert className=\"bg-green-50 text-green-800 border-green-200\">\n            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n            <AlertTitle>Success</AlertTitle>\n            <AlertDescription>{success}</AlertDescription>\n          </Alert>\n        )}\n        {error && (\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertTitle>Error</AlertTitle>\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"email\">Email</Label>\n          <Input id=\"email\" value={email} disabled className=\"attio-input bg-muted\" />\n          <p className=\"text-xs text-muted-foreground\">Your email address cannot be changed</p>\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"password\">New Password</Label>\n          <Input\n            id=\"password\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            className=\"attio-input\"\n          />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"confirm-password\">Confirm New Password</Label>\n          <Input\n            id=\"confirm-password\"\n            type=\"password\"\n            value={confirmPassword}\n            onChange={(e) => setConfirmPassword(e.target.value)}\n            className=\"attio-input\"\n          />\n        </div>\n      </CardContent>\n      <CardFooter>\n        <Button onClick={handleUpdatePassword} disabled={!password || !confirmPassword || isUpdating}>\n          {isUpdating ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : \"Update Password\"}\n        </Button>\n      </CardFooter>\n    </Card>\n  )\n}\n\nfunction NotificationSettings() {\n  const { user } = useAuth()\n  const [settings, setSettings] = useState<Partial<UserSettings>>({\n    notifications_enabled: true,\n    email_notifications: true,\n  })\n  const [isLoading, setIsLoading] = useState(true)\n  const [isSaving, setIsSaving] = useState(false)\n  const [success, setSuccess] = useState<string | null>(null)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    async function fetchSettings() {\n      if (!user) {\n        setIsLoading(false)\n        return\n      }\n      setIsLoading(true)\n      try {\n        const { data, error: fetchError } = await supabase\n          .from(\"user_settings\")\n          .select(\"notifications_enabled, email_notifications\")\n          .eq(\"user_id\", user.id)\n          .single()\n\n        if (fetchError && fetchError.code !== \"PGRST116\") {\n          throw fetchError\n        }\n        if (data) {\n          setSettings((prev) => ({ ...prev, ...data }))\n        }\n      } catch (err: any) {\n        console.error(\"Error fetching notification settings:\", err)\n        setError(err.message || \"Failed to load notification settings.\")\n      } finally {\n        setIsLoading(false)\n      }\n    }\n    fetchSettings()\n  }, [user])\n\n  const handleSave = async () => {\n    if (!user) return\n\n    setIsSaving(true)\n    setSuccess(null)\n    setError(null)\n\n    try {\n      const { error: upsertError } = await supabase.from(\"user_settings\").upsert(\n        {\n          user_id: user.id,\n          notifications_enabled: settings.notifications_enabled,\n          email_notifications: settings.email_notifications,\n        },\n        { onConflict: \"user_id\" },\n      )\n\n      if (upsertError) throw upsertError\n\n      setSuccess(\"Notification settings saved successfully\")\n    } catch (err: any) {\n      setError(err.message || \"Failed to save notification settings\")\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-base\">Notification Settings</CardTitle>\n        <CardDescription className=\"text-xs\">Manage how and when you receive notifications</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {success && (\n          <Alert className=\"bg-green-50 text-green-800 border-green-200\">\n            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n            <AlertTitle>Success</AlertTitle>\n            <AlertDescription>{success}</AlertDescription>\n          </Alert>\n        )}\n        {error && (\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertTitle>Error</AlertTitle>\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-0.5\">\n            <Label htmlFor=\"notifications-enabled\">Enable Notifications</Label>\n            <p className=\"text-xs text-muted-foreground\">Receive notifications about important updates</p>\n          </div>\n          <Switch\n            id=\"notifications-enabled\"\n            checked={settings.notifications_enabled === true}\n            onCheckedChange={(checked) => setSettings({ ...settings, notifications_enabled: checked })}\n            disabled={isLoading}\n          />\n        </div>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-0.5\">\n            <Label htmlFor=\"email-notifications\">Email Notifications</Label>\n            <p className=\"text-xs text-muted-foreground\">Receive notifications via email</p>\n          </div>\n          <Switch\n            id=\"email-notifications\"\n            checked={settings.email_notifications === true}\n            onCheckedChange={(checked) => setSettings({ ...settings, email_notifications: checked })}\n            disabled={isLoading || settings.notifications_enabled === false}\n          />\n        </div>\n      </CardContent>\n      <CardFooter>\n        <Button onClick={handleSave} disabled={isLoading || isSaving}>\n          {isSaving ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : \"Save Notification Settings\"}\n        </Button>\n      </CardFooter>\n    </Card>\n  )\n}\n\nfunction StyleGuideSettingsTab() {\n  const { user } = useAuth()\n  const { toast } = useToast()\n  const [primaryHex, setPrimaryHex] = useState(DEFAULT_PRIMARY_HEX)\n  const [primaryForegroundHex, setPrimaryForegroundHex] = useState(DEFAULT_PRIMARY_FOREGROUND_HEX)\n  const [isLoading, setIsLoading] = useState(true)\n  const [isSaving, setIsSaving] = useState(false)\n  const [successMessage, setSuccessMessage] = useState<string | null>(null)\n  const [errorMessage, setErrorMessage] = useState<string | null>(null)\n\n  const frameworks = [\n    { value: \"next.js\", label: \"Next.js\" },\n    { value: \"sveltekit\", label: \"SvelteKit\" },\n    { value: \"nuxt.js\", label: \"Nuxt.js\" },\n    { value: \"remix\", label: \"Remix\" },\n    { value: \"astro\", label: \"Astro\" },\n  ]\n  const [comboboxOpen, setComboboxOpen] = useState(false)\n  const [comboboxValue, setComboboxValue] = useState(\"\")\n\n  const applyColorsToDocument = useCallback((primaryHslColor: string, foregroundHslColor: string) => {\n    if (typeof document !== \"undefined\") {\n      document.documentElement.style.setProperty(\"--primary\", primaryHslColor)\n      document.documentElement.style.setProperty(\"--primary-foreground\", foregroundHslColor)\n    }\n  }, [])\n\n  useEffect(() => {\n    async function fetchStyleSettings() {\n      if (!user) {\n        setIsLoading(false)\n        const defaultPrimaryHsl = hexToHsl(DEFAULT_PRIMARY_HEX)\n        const defaultFgHsl = hexToHsl(DEFAULT_PRIMARY_FOREGROUND_HEX)\n        if (defaultPrimaryHsl && defaultFgHsl) {\n          applyColorsToDocument(defaultPrimaryHsl, defaultFgHsl)\n        }\n        return\n      }\n      setIsLoading(true)\n      try {\n        const { data, error } = await supabase\n          .from(\"user_settings\")\n          .select(\"primary_color_hex, primary_foreground_color_hex\")\n          .eq(\"user_id\", user.id)\n          .single()\n\n        if (error && error.code !== \"PGRST116\") throw error\n\n        const currentPrimaryHex = data?.primary_color_hex || DEFAULT_PRIMARY_HEX\n        const currentFgHex = data?.primary_foreground_color_hex || DEFAULT_PRIMARY_FOREGROUND_HEX\n\n        setPrimaryHex(currentPrimaryHex)\n        setPrimaryForegroundHex(currentFgHex)\n\n        const primaryHsl = hexToHsl(currentPrimaryHex)\n        const fgHsl = hexToHsl(currentFgHex)\n        const defaultPrimaryHsl = hexToHsl(DEFAULT_PRIMARY_HEX)\n        const defaultFgHsl = hexToHsl(DEFAULT_PRIMARY_FOREGROUND_HEX)\n\n        if (primaryHsl && fgHsl && defaultPrimaryHsl && defaultFgHsl) {\n          applyColorsToDocument(primaryHsl, fgHsl)\n        } else if (defaultPrimaryHsl && defaultFgHsl) {\n          applyColorsToDocument(defaultPrimaryHsl, defaultFgHsl)\n        }\n      } catch (err: any) {\n        console.error(\"Error fetching style settings:\", err)\n        setErrorMessage(\"Failed to load style settings.\")\n        const defaultPrimaryHsl = hexToHsl(DEFAULT_PRIMARY_HEX)\n        const defaultFgHsl = hexToHsl(DEFAULT_PRIMARY_FOREGROUND_HEX)\n        if (defaultPrimaryHsl && defaultFgHsl) {\n          applyColorsToDocument(defaultPrimaryHsl, defaultFgHsl)\n        }\n      } finally {\n        setIsLoading(false)\n      }\n    }\n    fetchStyleSettings()\n  }, [user, applyColorsToDocument, supabase])\n\n  useEffect(() => {\n    const primaryHslValue = hexToHsl(primaryHex)\n    const foregroundHslValue = hexToHsl(primaryForegroundHex)\n    if (primaryHslValue && foregroundHslValue) {\n      applyColorsToDocument(primaryHslValue, foregroundHslValue)\n    }\n  }, [primaryHex, primaryForegroundHex, applyColorsToDocument])\n\n  const handleSaveAccentColor = async () => {\n    if (!user) {\n      setErrorMessage(\"You must be logged in to save settings.\")\n      return\n    }\n    setIsSaving(true)\n    setSuccessMessage(null)\n    setErrorMessage(null)\n\n    if (!hexToHsl(primaryHex) || !hexToHsl(primaryForegroundHex)) {\n      setErrorMessage(\"Invalid HEX color format. Please use #RRGGBB or #RGB.\")\n      toast({ title: \"Invalid HEX\", description: \"Please check your color codes.\", variant: \"destructive\" })\n      setIsSaving(false)\n      return\n    }\n\n    try {\n      const { error } = await supabase.from(\"user_settings\").upsert(\n        {\n          user_id: user.id,\n          primary_color_hex: primaryHex,\n          primary_foreground_color_hex: primaryForegroundHex,\n        },\n        { onConflict: \"user_id\" },\n      )\n\n      if (error) throw error\n\n      setSuccessMessage(\"Accent color saved successfully! It will be applied globally on next page load or refresh.\")\n      toast({\n        title: \"Accent Color Saved\",\n        description: \"Your new accent color has been saved.\",\n      })\n    } catch (err: any) {\n      console.error(\"Error saving accent color:\", err)\n      setErrorMessage((err as Error).message || \"Failed to save accent color.\")\n      toast({\n        title: \"Error\",\n        description: \"Failed to save accent color.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  const handlePresetChange = (primaryHexString: string, foregroundHexString: string) => {\n    setPrimaryHex(primaryHexString)\n    setPrimaryForegroundHex(foregroundHexString)\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-64 items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {successMessage && (\n        <Alert className=\"border-green-500 bg-green-50 text-green-700\">\n          <CheckCircle className=\"h-4 w-4 !text-green-700\" />\n          <AlertTitle>Success</AlertTitle>\n          <AlertDescription>{successMessage}</AlertDescription>\n        </Alert>\n      )}\n      {errorMessage && (\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertTitle>Error</AlertTitle>\n          <AlertDescription>{errorMessage}</AlertDescription>\n        </Alert>\n      )}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base flex items-center\">\n            <PaletteIcon className=\"mr-2 h-5 w-5\" /> Accent Color Customization\n          </CardTitle>\n          <CardDescription className=\"text-xs\">\n            Customize the primary accent color. Changes are previewed live on this page. Global application requires a\n            page refresh after saving.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"primaryHex\">Primary Color HEX</Label>\n              <Input\n                id=\"primaryHex\"\n                value={primaryHex}\n                onChange={(e) => setPrimaryHex(e.target.value)}\n                placeholder=\"e.g., #0A0A0A\"\n                className=\"attio-input\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"primaryForegroundHex\">Primary Foreground HEX</Label>\n              <Input\n                id=\"primaryForegroundHex\"\n                value={primaryForegroundHex}\n                onChange={(e) => setPrimaryForegroundHex(e.target.value)}\n                placeholder=\"e.g., #FAFAFA\"\n                className=\"attio-input\"\n              />\n            </div>\n          </div>\n          <div className=\"space-y-2\">\n            <Label>Predefined Accents</Label>\n            <div className=\"flex flex-wrap gap-2\">\n              {PREDEFINED_ACCENTS.map((preset) => (\n                <Button\n                  key={preset.name}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handlePresetChange(preset.primary, preset.foreground)}\n                  className=\"flex items-center gap-2\"\n                >\n                  <span style={{ backgroundColor: preset.primary }} className=\"h-4 w-4 rounded-full border\" />\n                  {preset.name}\n                </Button>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button onClick={handleSaveAccentColor} disabled={isSaving}>\n            {isSaving && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n            Save Accent Color\n          </Button>\n        </CardFooter>\n      </Card>\n\n      <Separator />\n\n      <section className=\"space-y-8\">\n        <h3 className=\"text-xl font-semibold\">Component Previews</h3>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Typography</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <h1 className=\"text-4xl font-bold\">Heading 1</h1>\n            <h2 className=\"text-3xl font-semibold\">Heading 2</h2>\n            <h3 className=\"text-2xl font-medium\">Heading 3</h3>\n            <h4 className=\"text-xl\">Heading 4</h4>\n            <p>\n              This is a paragraph. Links look like{\" \"}\n              <a href=\"#\" className=\"font-medium text-primary underline underline-offset-4\">\n                this\n              </a>\n              . <strong>Bold text</strong>.\n            </p>\n            <blockquote className=\"mt-6 border-l-2 pl-6 italic\">Blockquote example.</blockquote>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Buttons</CardTitle>\n          </CardHeader>\n          <CardContent className=\"flex flex-wrap gap-2\">\n            <Button>Primary</Button>\n            <Button variant=\"secondary\">Secondary</Button>\n            <Button variant=\"destructive\">Destructive</Button>\n            <Button variant=\"outline\">Outline</Button>\n            <Button variant=\"ghost\">Ghost</Button>\n            <Button variant=\"link\">Link</Button>\n            <Button>\n              <Mail className=\"mr-2 h-4 w-4\" /> With Icon\n            </Button>\n            <Button variant=\"outline\" size=\"icon\">\n              <Github className=\"h-4 w-4\" />\n            </Button>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Cards</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Card className=\"w-full max-w-sm\">\n              <CardHeader>\n                <CardTitle>Card Title</CardTitle>\n                <CardDescription>This is a card description.</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <p>Card content goes here. You can put any elements inside.</p>\n              </CardContent>\n              <CardFooter className=\"flex justify-between\">\n                <Button variant=\"outline\">Cancel</Button>\n                <Button>Deploy</Button>\n              </CardFooter>\n            </Card>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Inputs & Selects</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4 max-w-xs\">\n            <Input placeholder=\"Standard Input\" className=\"attio-input\" />\n            <Input type=\"email\" placeholder=\"Email Input\" className=\"attio-input\" />\n            <SelectForStyleGuide>\n              <SelectTriggerForStyleGuideSelect className=\"attio-input\">\n                <SelectValueForStyleGuideSelect placeholder=\"Select an option\" />\n              </SelectTriggerForStyleGuideSelect>\n              <SelectContentForStyleGuideSelect>\n                <SelectItemForStyleGuideSelect value=\"1\">Option 1</SelectItemForStyleGuideSelect>\n                <SelectItemForStyleGuideSelect value=\"2\">Option 2</SelectItemForStyleGuideSelect>\n              </SelectContentForStyleGuideSelect>\n            </SelectForStyleGuide>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Table</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"w-[100px]\">Invoice</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Method</TableHead>\n                  <TableHead className=\"text-right\">Amount</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                <TableRow>\n                  <TableCell className=\"font-medium\">INV001</TableCell>\n                  <TableCell>Paid</TableCell>\n                  <TableCell>Credit Card</TableCell>\n                  <TableCell className=\"text-right\">$250.00</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell className=\"font-medium\">INV002</TableCell>\n                  <TableCell>Pending</TableCell>\n                  <TableCell>PayPal</TableCell>\n                  <TableCell className=\"text-right\">$150.00</TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Modals & Dialogs</CardTitle>\n          </CardHeader>\n          <CardContent className=\"flex gap-2\">\n            <Dialog>\n              <DialogTrigger asChild>\n                <Button variant=\"outline\">Open Dialog</Button>\n              </DialogTrigger>\n              <DialogContentForStyleGuide>\n                <DialogHeaderForStyleGuide>\n                  <DialogTitleForStyleGuide>Dialog Title</DialogTitleForStyleGuide>\n                  <DialogDescriptionForStyleGuide>This is a dialog.</DialogDescriptionForStyleGuide>\n                </DialogHeaderForStyleGuide>\n                <DialogFooterForStyleGuide>\n                  <Button>OK</Button>\n                </DialogFooterForStyleGuide>\n              </DialogContentForStyleGuide>\n            </Dialog>\n            <AlertDialog>\n              <AlertDialogTrigger asChild>\n                <Button variant=\"destructive\">Open Alert Dialog</Button>\n              </AlertDialogTrigger>\n              <AlertDialogContentForStyleGuide>\n                <AlertDialogHeaderForStyleGuide>\n                  <AlertDialogTitleForStyleGuide>Alert!</AlertDialogTitleForStyleGuide>\n                  <AlertDialogDescriptionForStyleGuide>This is an alert dialog.</AlertDialogDescriptionForStyleGuide>\n                </AlertDialogHeaderForStyleGuide>\n                <AlertDialogFooterForStyleGuide>\n                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n                  <AlertDialogAction>Continue</AlertDialogAction>\n                </AlertDialogFooterForStyleGuide>\n              </AlertDialogContentForStyleGuide>\n            </AlertDialog>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Popovers</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Popover>\n              <PopoverTrigger asChild>\n                <Button variant=\"outline\">Open Popover</Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-80\">\n                <p>Popover content goes here. Useful for small bits of information or actions.</p>\n              </PopoverContent>\n            </Popover>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Toast Notifications</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-x-2\">\n            <Button\n              variant=\"outline\"\n              onClick={() => toast({ title: \"Event Scheduled\", description: \"Friday, February 10, 2023 at 5:57 PM\" })}\n            >\n              Show Toast\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() =>\n                toast({\n                  title: \"Uh oh! Something went wrong.\",\n                  description: \"There was a problem with your request.\",\n                  variant: \"destructive\",\n                })\n              }\n            >\n              Show Destructive Toast\n            </Button>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Dropdown Menus</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"outline\">\n                  Open Menu <ChevronDown className=\"ml-2 h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent>\n                <DropdownMenuLabel>My Account</DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem>Profile</DropdownMenuItem>\n                <DropdownMenuItem>Billing</DropdownMenuItem>\n                <DropdownMenuSub>\n                  <DropdownMenuSubTrigger>\n                    <span>Invite users</span>\n                  </DropdownMenuSubTrigger>\n                  <DropdownMenuPortal>\n                    <DropdownMenuSubContent>\n                      <DropdownMenuItem>\n                        <span>Email</span>\n                      </DropdownMenuItem>\n                      <DropdownMenuItem>\n                        <span>Message</span>\n                      </DropdownMenuItem>\n                    </DropdownMenuSubContent>\n                  </DropdownMenuPortal>\n                </DropdownMenuSub>\n                <DropdownMenuItem>Log out</DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Combobox</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Popover open={comboboxOpen} onOpenChange={setComboboxOpen}>\n              <PopoverTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  role=\"combobox\"\n                  aria-expanded={comboboxOpen}\n                  className=\"w-[200px] justify-between\"\n                >\n                  {comboboxValue\n                    ? frameworks.find((framework) => framework.value === comboboxValue)?.label\n                    : \"Select framework...\"}\n                  <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-[200px] p-0\">\n                <Command>\n                  <CommandInput placeholder=\"Search framework...\" />\n                  <CommandList>\n                    <CommandEmpty>No framework found.</CommandEmpty>\n                    <CommandGroup>\n                      {frameworks.map((framework) => (\n                        <CommandItem\n                          key={framework.value}\n                          value={framework.value}\n                          onSelect={(currentValue) => {\n                            setComboboxValue(currentValue === comboboxValue ? \"\" : currentValue)\n                            setComboboxOpen(false)\n                          }}\n                        >\n                          <Check\n                            className={cn(\n                              \"mr-2 h-4 w-4\",\n                              comboboxValue === framework.value ? \"opacity-100\" : \"opacity-0\",\n                            )}\n                          />\n                          {framework.label}\n                        </CommandItem>\n                      ))}\n                    </CommandGroup>\n                  </CommandList>\n                </Command>\n              </PopoverContent>\n            </Popover>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Checkboxes & Radio Group</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox id=\"terms-style\" /> <Label htmlFor=\"terms-style\">Accept terms</Label>\n            </div>\n            <RadioGroup defaultValue=\"comfortable-style\">\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"default-style\" id=\"r1-style\" /> <Label htmlFor=\"r1-style\">Default</Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"comfortable-style\" id=\"r2-style\" /> <Label htmlFor=\"r2-style\">Comfortable</Label>\n              </div>\n            </RadioGroup>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Switches & Toggles</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <div className=\"flex items-center space-x-2\">\n              <SwitchForStyleGuide id=\"airplane-mode-style\" />{\" \"}\n              <Label htmlFor=\"airplane-mode-style\">Airplane Mode</Label>\n            </div>\n            <Toggle aria-label=\"Toggle italic\">\n              <Italic className=\"h-4 w-4\" />\n            </Toggle>\n          </CardContent>\n        </Card>\n      </section>\n    </div>\n  )\n}\n\nfunction IntegrationsSettings() {\n  const { user } = useAuth()\n  const { toast } = useToast()\n  const [openaiApiKey, setOpenaiApiKey] = useState(\"\")\n  const [openaiModel, setOpenaiModel] = useState(\"gpt-3.5-turbo\")\n  const [mapboxApiKey, setMapboxApiKey] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(true)\n  const [isSavingOpenAI, setIsSavingOpenAI] = useState(false)\n  const [isSavingMapbox, setIsSavingMapbox] = useState(false)\n  const [geocodingLoading, setGeocodingLoading] = useState(false)\n  const [geocodingMessage, setGeocodingMessage] = useState<string | null>(null)\n\n  const availableModels = [\n    { value: \"gpt-4o\", label: \"GPT-4o (Latest)\" },\n    { value: \"gpt-4-turbo\", label: \"GPT-4 Turbo\" },\n    { value: \"gpt-3.5-turbo\", label: \"GPT-3.5 Turbo\" },\n  ]\n\n  useEffect(() => {\n    async function fetchIntegrationSettings() {\n      if (!user) {\n        setIsLoading(false)\n        return\n      }\n      setIsLoading(true)\n      try {\n        const { data, error: fetchError } = await supabase\n          .from(\"user_settings\")\n          .select(\"openai_api_key, openai_model, mapbox_api_key\")\n          .eq(\"user_id\", user.id)\n          .single()\n\n        if (fetchError && fetchError.code !== \"PGRST116\") {\n          throw fetchError\n        }\n        if (data) {\n          setOpenaiApiKey(data.openai_api_key || \"\")\n          setOpenaiModel(data.openai_model || \"gpt-3.5-turbo\")\n          setMapboxApiKey(data.mapbox_api_key || \"\")\n        }\n      } catch (err: any) {\n        console.error(\"Error fetching integration settings:\", err)\n        toast({ title: \"Error\", description: \"Failed to load integration settings.\", variant: \"destructive\" })\n      } finally {\n        setIsLoading(false)\n      }\n    }\n    fetchIntegrationSettings()\n  }, [user, toast, supabase])\n\n  const handleSaveOpenAISettings = async () => {\n    if (!user) return\n\n    setIsSavingOpenAI(true)\n    try {\n      const { error: upsertError } = await supabase.from(\"user_settings\").upsert(\n        {\n          user_id: user.id,\n          openai_api_key: openaiApiKey,\n          openai_model: openaiModel,\n        },\n        { onConflict: \"user_id\" },\n      )\n\n      if (upsertError) throw upsertError\n\n      toast({ title: \"Success\", description: \"OpenAI settings saved successfully.\" })\n    } catch (err: any) {\n      toast({\n        title: \"Error\",\n        description: (err as Error).message || \"Failed to save OpenAI settings.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsSavingOpenAI(false)\n    }\n  }\n\n  const handleSaveMapboxSettings = async () => {\n    if (!user) return\n\n    setIsSavingMapbox(true)\n    try {\n      const { error: upsertError } = await supabase.from(\"user_settings\").upsert(\n        {\n          user_id: user.id,\n          mapbox_api_key: mapboxApiKey,\n        },\n        { onConflict: \"user_id\" },\n      )\n\n      if (upsertError) throw upsertError\n\n      toast({ title: \"Success\", description: \"Mapbox settings saved successfully.\" })\n    } catch (err: any) {\n      toast({\n        title: \"Error\",\n        description: (err as Error).message || \"Failed to save Mapbox settings.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsSavingMapbox(false)\n    }\n  }\n\n  const handleGeocodeProperties = async () => {\n    setGeocodingLoading(true)\n    setGeocodingMessage(\"Starting geocoding process...\")\n\n    if (!user) {\n      toast({ title: \"Authentication Error\", description: \"You must be logged in.\", variant: \"destructive\" })\n      setGeocodingLoading(false)\n      return\n    }\n\n    let totalGeocoded = 0\n    let totalFailed = 0\n    let batchNumber = 1\n    let shouldContinue = true\n\n    while (shouldContinue) {\n      try {\n        setGeocodingMessage(\n          `Processing batch ${batchNumber}... Total geocoded so far: ${totalGeocoded}, Failed: ${totalFailed}`,\n        )\n\n        const {\n          data: { session },\n        } = await supabase.auth.getSession()\n        if (!session) throw new Error(\"User session not found. Please log in again.\")\n\n        const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\n        const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n        if (!supabaseUrl || !supabaseAnonKey) throw new Error(\"Supabase URL or Anon Key is not configured.\")\n\n        console.log(\"Making request to:\", `${supabaseUrl}/functions/v1/geocode-properties`)\n\n        const response = await fetch(`${supabaseUrl}/functions/v1/geocode-properties`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${session.access_token}`,\n            apikey: supabaseAnonKey,\n          },\n        })\n\n        console.log(\"Response status:\", response.status)\n        console.log(\"Response headers:\", Object.fromEntries(response.headers.entries()))\n\n        const result = await response.json()\n        console.log(\"Response body:\", result)\n\n        if (!response.ok) {\n          throw new Error(result.error || result.message || `HTTP ${response.status}: ${response.statusText}`)\n        }\n\n        // Handle both string responses and object responses from the Edge Function\n        let geocodedInBatch = 0\n        let failedInBatch = 0\n        let propertiesFound = 0\n\n        if (typeof result === \"string\") {\n          // Parse the string response to extract numbers - fix the regex patterns\n          const processedMatch = result.match(/Processed:\\s*(\\d+)/)\n          const geocodedMatch = result.match(/Geocoded:\\s*(\\d+)/)\n          const failedMatch = result.match(/Failed:\\s*(\\d+)/)\n\n          propertiesFound = processedMatch ? Number.parseInt(processedMatch[1], 10) : 0\n          geocodedInBatch = geocodedMatch ? Number.parseInt(geocodedMatch[1], 10) : 0\n          failedInBatch = failedMatch ? Number.parseInt(failedMatch[1], 10) : 0\n\n          // Debug logging to verify parsing\n          console.log(\"String parsing results:\", {\n            originalString: result,\n            processedMatch,\n            geocodedMatch,\n            failedMatch,\n            propertiesFound,\n            geocodedInBatch,\n            failedInBatch,\n          })\n        } else {\n          // Handle object response format\n          geocodedInBatch = result.geocodedCount || 0\n          failedInBatch = result.failedCount || 0\n          propertiesFound = result.propertiesFound || result.processedCount || 0\n        }\n\n        totalGeocoded += geocodedInBatch\n        totalFailed += failedInBatch\n\n        console.log(`Batch ${batchNumber} results:`, {\n          geocodedInBatch,\n          failedInBatch,\n          propertiesFound,\n          totalGeocoded,\n          totalFailed,\n        })\n\n        // If the function found 0 properties, it means there are no more to process.\n        // But if it found properties and geocoded them, we should continue to the next batch.\n        if (propertiesFound === 0) {\n          if (batchNumber === 1) {\n            setGeocodingMessage(\n              \"No properties found that need geocoding. All properties may already have coordinates or are missing required address fields.\",\n            )\n          }\n          shouldContinue = false\n        } else if (geocodedInBatch === 0 && propertiesFound > 0) {\n          // If we found properties but couldn't geocode any of them, stop to avoid an infinite loop\n          setGeocodingMessage(\n            \"Found properties without coordinates, but couldn't geocode any of them. Check address data quality.\",\n          )\n          shouldContinue = false\n        } else {\n          batchNumber++\n          // Add a small delay between batches to avoid rate limiting\n          await new Promise((resolve) => setTimeout(resolve, 1000))\n        }\n      } catch (error: any) {\n        console.error(\"Geocoding error:\", error)\n        const errorMessage = error.message || \"An unknown error occurred.\"\n        setGeocodingMessage(`Error: ${errorMessage}. Stopping process.`)\n        toast({\n          title: \"Geocoding Error\",\n          description: errorMessage,\n          variant: \"destructive\",\n        })\n        shouldContinue = false // Stop the loop on any error\n      }\n    }\n\n    const finalMessage = `Geocoding complete. Total newly geocoded: ${totalGeocoded}. Total failed: ${totalFailed}.`\n    setGeocodingMessage(finalMessage)\n    toast({\n      title: \"Geocoding Process Finished\",\n      description: finalMessage,\n    })\n    setGeocodingLoading(false)\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base\">AI Integrations</CardTitle>\n          <CardDescription className=\"text-xs\">Configure your OpenAI API for AI-powered features.</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {isLoading ? (\n            <div className=\"flex justify-center items-center h-24\">\n              <Loader2 className=\"h-6 w-6 animate-spin\" />\n            </div>\n          ) : (\n            <>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"openai-api-key\">OpenAI API Key</Label>\n                <Input\n                  id=\"openai-api-key\"\n                  type=\"password\"\n                  value={openaiApiKey}\n                  onChange={(e) => setOpenaiApiKey(e.target.value)}\n                  placeholder=\"sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n                  className=\"attio-input\"\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  Your API key is stored securely and only used for AI features within this application.\n                </p>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"openai-model\">OpenAI Model</Label>\n                <ShadSelect value={openaiModel} onValueChange={setOpenaiModel}>\n                  <ShadSelectTrigger id=\"openai-model\" className=\"attio-input\">\n                    <ShadSelectValue placeholder=\"Select AI model\" />\n                  </ShadSelectTrigger>\n                  <ShadSelectContent>\n                    {availableModels.map((model) => (\n                      <ShadSelectItem key={model.value} value={model.value}>\n                        {model.label}\n                      </ShadSelectItem>\n                    ))}\n                  </ShadSelectContent>\n                </ShadSelect>\n              </div>\n            </>\n          )}\n        </CardContent>\n        <CardFooter>\n          <Button onClick={handleSaveOpenAISettings} disabled={isLoading || isSavingOpenAI}>\n            {isSavingOpenAI ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : \"Save OpenAI Settings\"}\n          </Button>\n        </CardFooter>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base flex items-center\">\n            <MapPin className=\"mr-2 h-5 w-5\" /> Mapbox Integration\n          </CardTitle>\n          <CardDescription className=\"text-xs\">\n            Configure your Mapbox Access Token for map features. This token is stored in your user settings and used\n            client-side.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {isLoading ? (\n            <div className=\"flex justify-center items-center h-16\">\n              <Loader2 className=\"h-6 w-6 animate-spin\" />\n            </div>\n          ) : (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"mapbox-api-key\">Mapbox Access Token (Client-side)</Label>\n              <Input\n                id=\"mapbox-api-key\"\n                type=\"password\"\n                value={mapboxApiKey}\n                onChange={(e) => setMapboxApiKey(e.target.value)}\n                placeholder=\"pk.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n                className=\"attio-input\"\n              />\n              <p className=\"text-xs text-muted-foreground\">\n                Your Mapbox Access Token for displaying maps. For server-side geocoding, a separate token is configured\n                in your Edge Function settings.\n              </p>\n            </div>\n          )}\n        </CardContent>\n        <CardFooter>\n          <Button onClick={handleSaveMapboxSettings} disabled={isLoading || isSavingMapbox}>\n            {isSavingMapbox ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : \"Save Mapbox Token\"}\n          </Button>\n        </CardFooter>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base flex items-center\">\n            <DatabaseIcon className=\"mr-2 h-5 w-5\" /> Data Management\n          </CardTitle>\n          <CardDescription className=\"text-xs\">Tools for managing and enhancing your property data.</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"geocode-properties\">Server-Side Geocoding</Label>\n            <p className=\"text-xs text-muted-foreground\">\n              Run a process to find all properties missing coordinates and geocode them. This will run continuously in\n              batches until all properties are processed.\n            </p>\n            <Button onClick={handleGeocodeProperties} disabled={geocodingLoading || isLoading}>\n              {geocodingLoading ? (\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              ) : (\n                <DatabaseIcon className=\"mr-2 h-4 w-4\" />\n              )}\n              {geocodingLoading ? \"Geocoding in Progress...\" : \"Start Full Geocoding Process\"}\n            </Button>\n            {geocodingMessage && (\n              <Alert\n                className={`mt-2 text-xs ${\n                  geocodingMessage.toLowerCase().startsWith(\"error:\")\n                    ? \"border-red-500 text-red-700\"\n                    : \"border-blue-500 text-blue-700\"\n                }`}\n              >\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertTitle>\n                  {geocodingLoading\n                    ? \"Process Update\"\n                    : geocodingMessage.toLowerCase().startsWith(\"error:\")\n                      ? \"Process Error\"\n                      : \"Process Complete\"}\n                </AlertTitle>\n                <AlertDescription>{geocodingMessage}</AlertDescription>\n              </Alert>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nfunction DataStructureSettings() {\n  const { user } = useAuth()\n  const { toast } = useToast()\n  const [selectedTable, setSelectedTable] = useState<\"listings\" | \"builders\">(\"listings\")\n  const [isLoading, setIsLoading] = useState(false)\n  const [dbColumns, setDbColumns] = useState<(ListingFieldDefinition | BuilderFieldDefinition)[]>([])\n  const [fieldMappings, setFieldMappings] = useState<Record<string, string[]>>({}) // dbColumnValue -> csvHeader[]\n\n  useEffect(() => {\n    if (selectedTable === \"listings\") {\n      setDbColumns(listingTableColumns)\n    } else {\n      setDbColumns(builderTableColumns)\n    }\n    setFieldMappings({}) // Reset mappings when table changes\n  }, [selectedTable])\n\n  useEffect(() => {\n    if (!user || dbColumns.length === 0) {\n      if (dbColumns.length > 0) {\n        setFieldMappings(\n          dbColumns.reduce(\n            (acc, col) => {\n              acc[col.value] = []\n              return acc\n            },\n            {} as Record<string, string[]>,\n          ),\n        )\n      }\n      return\n    }\n\n    async function fetchMappings() {\n      setIsLoading(true)\n      try {\n        const { data, error } = await supabase\n          .from(\"user_field_mappings\")\n          .select(\"target_database_column, source_csv_header\")\n          .eq(\"user_id\", user!.id)\n          .eq(\"target_table_name\", selectedTable)\n\n        if (error) throw error\n\n        const newMappings: Record<string, string[]> = {}\n        dbColumns.forEach((col) => (newMappings[col.value] = []))\n\n        data?.forEach((mapping) => {\n          if (newMappings[mapping.target_database_column]) {\n            newMappings[mapping.target_database_column].push(mapping.source_csv_header)\n          } else {\n            newMappings[mapping.target_database_column] = [mapping.source_csv_header]\n          }\n        })\n        setFieldMappings(newMappings)\n      } catch (err: any) {\n        toast({ title: \"Error\", description: `Failed to load field mappings: ${err.message}`, variant: \"destructive\" })\n        setFieldMappings(\n          dbColumns.reduce(\n            (acc, col) => {\n              acc[col.value] = []\n              return acc\n            },\n            {} as Record<string, string[]>,\n          ),\n        )\n      } finally {\n        setIsLoading(false)\n      }\n    }\n    fetchMappings()\n  }, [user, selectedTable, dbColumns, toast, supabase])\n\n  const handleMappingChange = async (dbColumnValue: string, newCsvHeaders: string[]) => {\n    if (!user) return\n\n    const oldCsvHeaders = fieldMappings[dbColumnValue] || []\n    const normalizedNewCsvHeaders = newCsvHeaders.map(normalizeHeader).filter(Boolean) // Normalize and remove empty strings\n\n    // Optimistically update UI with normalized headers\n    setFieldMappings((prev) => ({ ...prev, [dbColumnValue]: normalizedNewCsvHeaders }))\n\n    const added = normalizedNewCsvHeaders.filter((h) => !oldCsvHeaders.includes(h))\n    const removed = oldCsvHeaders.filter((h) => !normalizedNewCsvHeaders.includes(h))\n\n    try {\n      // Handle added headers\n      for (const normalizedCsv of added) {\n        const { data: existingConflict, error: checkError } = await supabase\n          .from(\"user_field_mappings\")\n          .select(\"id, target_database_column\")\n          .eq(\"user_id\", user.id)\n          .eq(\"target_table_name\", selectedTable)\n          .eq(\"source_csv_header\", normalizedCsv)\n          .neq(\"target_database_column\", dbColumnValue) // Check if mapped to a *different* column\n          .single()\n\n        if (checkError && checkError.code !== \"PGRST116\") throw checkError\n\n        if (existingConflict) {\n          toast({\n            title: \"Mapping Conflict\",\n            description: `CSV header \"${normalizedCsv}\" is already mapped to \"${existingConflict.target_database_column}\". Please remove it from the other mapping first or use a different CSV header. Reverting changes for this field.`,\n            variant: \"destructive\",\n          })\n          setFieldMappings((prev) => ({ ...prev, [dbColumnValue]: oldCsvHeaders })) // Revert\n          return // Stop processing this field's changes\n        }\n\n        const { error: insertError } = await supabase.from(\"user_field_mappings\").upsert(\n          {\n            user_id: user.id,\n            target_table_name: selectedTable,\n            target_database_column: dbColumnValue,\n            source_csv_header: normalizedCsv,\n          } as UserFieldMappingInsert,\n          { onConflict: \"user_id,target_table_name,source_csv_header\" },\n        )\n        if (insertError) throw insertError\n      }\n\n      // Handle removed headers\n      for (const csvHeaderToRemove of removed) {\n        const { error: deleteError } = await supabase\n          .from(\"user_field_mappings\")\n          .delete()\n          .eq(\"user_id\", user.id)\n          .eq(\"target_table_name\", selectedTable)\n          .eq(\"target_database_column\", dbColumnValue)\n          .eq(\"source_csv_header\", csvHeaderToRemove)\n        if (deleteError) throw deleteError\n      }\n\n      if (added.length > 0 || removed.length > 0) {\n        toast({ title: \"Mappings Updated\", description: `Mappings for ${dbColumnValue} saved.` })\n      }\n    } catch (err: any) {\n      toast({ title: \"Error\", description: `Failed to update mappings: ${err.message}`, variant: \"destructive\" })\n      setFieldMappings((prev) => ({ ...prev, [dbColumnValue]: oldCsvHeaders })) // Revert on error\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-base flex items-center\">\n          <DatabaseIcon className=\"mr-2 h-5 w-5\" /> Custom Field Mappings\n        </CardTitle>\n        <CardDescription className=\"text-xs\">\n          Define default CSV headers that should map to your database columns for faster imports. These mappings are\n          specific to your user account. Enter the exact CSV header text you expect.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"space-y-2 max-w-sm\">\n          <Label htmlFor=\"table-select\">Select Table</Label>\n          <ShadSelect\n            value={selectedTable}\n            onValueChange={(value) => setSelectedTable(value as \"listings\" | \"builders\")}\n          >\n            <ShadSelectTrigger id=\"table-select\" className=\"attio-input\">\n              <ShadSelectValue placeholder=\"Select a table\" />\n            </ShadSelectTrigger>\n            <ShadSelectContent>\n              <ShadSelectItem value=\"listings\">Listings</ShadSelectItem>\n              <ShadSelectItem value=\"builders\">Builders</ShadSelectItem>\n            </ShadSelectContent>\n          </ShadSelect>\n        </div>\n\n        {isLoading && (\n          <div className=\"flex items-center justify-center py-8\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n            <p className=\"ml-2\">Loading mappings...</p>\n          </div>\n        )}\n\n        {!isLoading && dbColumns.length > 0 && (\n          <div className=\"space-y-4 max-h-[60vh] overflow-y-auto pr-2\">\n            {dbColumns.map((col) => (\n              <div key={col.value} className=\"p-4 border rounded-md bg-muted/20\">\n                <Label htmlFor={`map-${col.value}`} className=\"font-semibold text-sm block mb-1\">\n                  {col.label} <span className=\"text-xs text-muted-foreground\">({col.value})</span>\n                </Label>\n                <PillInput\n                  value={fieldMappings[col.value] || []}\n                  onChange={(newPills) => handleMappingChange(col.value, newPills)}\n                  placeholder=\"Enter CSV header and press Enter...\"\n                  className=\"mt-1\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Enter the exact CSV header(s) that should map to this field. Headers are case-insensitive and spaces\n                  are replaced with underscores.\n                </p>\n              </div>\n            ))}\n          </div>\n        )}\n        {!isLoading && dbColumns.length === 0 && selectedTable && (\n          <p className=\"text-sm text-muted-foreground\">No columns defined for the '{selectedTable}' table.</p>\n        )}\n      </CardContent>\n      <CardFooter>\n        <p className=\"text-xs text-muted-foreground\">\n          Changes are saved automatically. CSV headers are stored in a normalized format (uppercase, underscores).\n        </p>\n      </CardFooter>\n    </Card>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/social/[postId]/page.tsx\n```typescript\n\"use client\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport { useParams } from \"next/navigation\"\nimport { useEffect, useState, useCallback } from \"react\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport type { Database } from \"@/types/supabase\" // Ensure this path is correct\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { toast } from \"@/hooks/use-toast\"\nimport Link from \"next/link\"\nimport { ArrowLeft, Loader2, ImageIcon } from \"lucide-react\"\nimport { EditableField } from \"@/components/editable-field\"\nimport { SocialPostPropertyItem } from \"@/components/social-post-property-item\"\nimport { SelectContent, SelectItem } from \"@/components/ui/select\"\n\ntype SocialPostFromDB = Database[\"public\"][\"Tables\"][\"social_posts\"][\"Row\"]\ntype SocialPostPropertyFromDB = Database[\"public\"][\"Tables\"][\"social_post_properties\"][\"Row\"]\ntype ListingFromDB = Database[\"public\"][\"Tables\"][\"listings\"][\"Row\"]\n\ninterface SocialPostProperty extends SocialPostPropertyFromDB {\n  properties: ListingFromDB | null\n}\n\ninterface FullSocialPost extends SocialPostFromDB {\n  social_post_properties: SocialPostProperty[]\n  content_type: string | null // Added\n  format_type: string | null // Added\n}\n\nexport default function SocialPostDetailPage() {\n  const params = useParams()\n  const postId = params.postId as string\n  const [post, setPost] = useState<FullSocialPost | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  const fetchPostDetails = useCallback(async () => {\n    if (!postId) {\n      setLoading(false) // Stop loading if no postId\n      return\n    }\n    setLoading(true)\n    const { data, error } = await supabase\n      .from(\"social_posts\")\n      .select(\n        `\n        *,\n        social_post_properties (\n          *,\n          properties (\n            id, mls_number, list_price, city, state, zip_code, street_number, street_direction, street_name, unit_number, status\n          )\n        )\n      `,\n      )\n      .eq(\"id\", postId)\n      .single()\n\n    if (error) {\n      console.error(\"Error fetching post details:\", error)\n      toast({ title: \"Error\", description: \"Failed to load post details. \" + error.message, variant: \"destructive\" })\n      setPost(null)\n    } else {\n      setPost(data as FullSocialPost)\n    }\n    setLoading(false)\n  }, [postId])\n\n  useEffect(() => {\n    fetchPostDetails()\n  }, [fetchPostDetails])\n\n  const handleUpdatePostField = async (\n    field: \"title\" | \"description\" | \"content_type\" | \"format_type\",\n    value: string,\n  ) => {\n    if (!post) return\n    const oldPost = { ...post }\n    setPost((prev) => (prev ? { ...prev, [field]: value } : null))\n\n    try {\n      const { error } = await supabase\n        .from(\"social_posts\")\n        .update({ [field]: value })\n        .eq(\"id\", post.id)\n      if (error) throw error\n      toast({ title: \"Post Updated\", description: `Post ${field} has been successfully updated.` })\n    } catch (error: any) {\n      toast({\n        title: \"Update Failed\",\n        description: `Failed to update post ${field}: ${error.message}`,\n        variant: \"destructive\",\n      })\n      setPost(oldPost)\n    }\n  }\n\n  const handlePropertyItemUpdate = (updatedPropertyItem: Partial<SocialPostProperty>) => {\n    setPost((prevPost) => {\n      if (!prevPost) return null\n      return {\n        ...prevPost,\n        social_post_properties: prevPost.social_post_properties.map((p) =>\n          p.id === updatedPropertyItem.id ? { ...p, ...updatedPropertyItem } : p,\n        ),\n      }\n    })\n  }\n\n  const getStatusBadgeVariant = (status?: string | null): \"default\" | \"secondary\" | \"outline\" | \"destructive\" => {\n    switch (status?.toLowerCase()) {\n      case \"posted\":\n        return \"default\"\n      case \"complete\":\n        return \"secondary\"\n      case \"draft\":\n        return \"outline\"\n      default:\n        return \"outline\"\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-950\">\n        <Loader2 className=\"h-10 w-10 animate-spin text-blueishGreen-500\" />\n      </div>\n    )\n  }\n\n  if (!post) {\n    return (\n      <div className=\"p-6 text-center min-h-screen flex flex-col items-center justify-center bg-gray-100 dark:bg-gray-950\">\n        <p className=\"text-xl text-muted-foreground mb-4\">Post Not Found</p>\n        <p className=\"text-sm text-muted-foreground mb-4\">\n          It might have been deleted or there was an issue loading it.\n        </p>\n        <Button variant=\"outline\" asChild className=\"bg-white dark:bg-gray-800\">\n          <Link href=\"/social\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Social Posts\n          </Link>\n        </Button>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"flex flex-col md:flex-row min-h-screen overflow-hidden bg-gray-100 dark:bg-gray-950\">\n      <main className=\"flex-1 p-4 md:p-6 space-y-4 overflow-y-auto\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            asChild\n            className=\"bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700\"\n          >\n            <Link href=\"/social\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back to Posts\n            </Link>\n          </Button>\n        </div>\n\n        <h2 className=\"text-sm font-medium uppercase text-gray-500 dark:text-gray-400 tracking-wider mb-3\">\n          Listings ({post.social_post_properties?.length || 0})\n        </h2>\n\n        {post.social_post_properties && post.social_post_properties.length > 0 ? (\n          <div className=\"space-y-3\">\n            {post.social_post_properties.map((spp) => (\n              <SocialPostPropertyItem key={spp.id} item={spp} postId={post.id} onUpdate={handlePropertyItemUpdate} />\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-12 border-2 border-dashed border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800/30\">\n            <ImageIcon className=\"mx-auto h-12 w-12 text-gray-300 dark:text-gray-600\" />\n            <p className=\"mt-2 text-sm text-muted-foreground\">No listings associated with this post.</p>\n            <p className=\"text-xs text-muted-foreground mt-1\">You can add listings from the main Social Posts page.</p>\n          </div>\n        )}\n      </main>\n\n      <aside className=\"w-full md:w-[360px] lg:w-[400px] bg-white dark:bg-gray-900 border-l border-gray-200 dark:border-gray-700 p-4 md:p-6 space-y-5 overflow-y-auto\">\n        <div className=\"pb-4 border-b border-gray-200 dark:border-gray-700\">\n          <label className=\"text-xs font-medium text-gray-500 dark:text-gray-400 block mb-0.5\">Post Title</label>\n          <EditableField\n            initialValue={post.title}\n            onSave={(newTitle) => handleUpdatePostField(\"title\", newTitle)}\n            label=\"Post Title\"\n            inputClassName=\"text-lg font-semibold !h-9\"\n            textClassName=\"text-lg font-semibold py-1\"\n            placeholder=\"Enter post title\"\n          />\n        </div>\n\n        <div className=\"pb-4 border-b border-gray-200 dark:border-gray-700\">\n          <label className=\"text-xs font-medium text-gray-500 dark:text-gray-400 block mb-0.5\">Description</label>\n          <EditableField\n            initialValue={post.description || \"\"}\n            onSave={(newDesc) => handleUpdatePostField(\"description\", newDesc)}\n            label=\"Post Description\"\n            as=\"textarea\"\n            inputClassName=\"min-h-[100px] text-sm\"\n            textClassName=\"py-1 leading-relaxed text-sm min-h-[40px]\" // min-h for text view\n            placeholder=\"Add a description...\"\n          />\n        </div>\n\n        <div className=\"pb-4 border-b border-gray-200 dark:border-gray-700\">\n          <label className=\"text-xs font-medium text-gray-500 dark:text-gray-400 block mb-0.5\">Content Type</label>\n          <EditableField\n            initialValue={post.content_type || \"\"}\n            onSave={(newContentType) => handleUpdatePostField(\"content_type\", newContentType)}\n            label=\"Content Type\"\n            as=\"select\"\n            inputClassName=\"!h-9\"\n            textClassName=\"py-1 text-sm\"\n            placeholder=\"Select content type\"\n          >\n            <SelectContent>\n              <SelectItem value=\"Single Property\">Single Property</SelectItem>\n              <SelectItem value=\"Multi Property\">Multi Property</SelectItem>\n            </SelectContent>\n          </EditableField>\n        </div>\n\n        <div className=\"pb-4 border-b border-gray-200 dark:border-gray-700\">\n          <label className=\"text-xs font-medium text-gray-500 dark:text-gray-400 block mb-0.5\">Format Type</label>\n          <EditableField\n            initialValue={post.format_type || \"\"}\n            onSave={(newFormatType) => handleUpdatePostField(\"format_type\", newFormatType)}\n            label=\"Format Type\"\n            as=\"select\"\n            inputClassName=\"!h-9\"\n            textClassName=\"py-1 text-sm\"\n            placeholder=\"Select format type\"\n          >\n            <SelectContent>\n              <SelectItem value=\"Carousel\">Carousel</SelectItem>\n              <SelectItem value=\"Post\">Post</SelectItem>\n              <SelectItem value=\"Reel\">Reel</SelectItem>\n              <SelectItem value=\"Story\">Story</SelectItem>\n            </SelectContent>\n          </EditableField>\n        </div>\n\n        <div className=\"space-y-3 text-sm pt-1\">\n          <div>\n            <p className=\"text-xs font-medium text-gray-500 dark:text-gray-400\">Status</p>\n            <Badge\n              variant={getStatusBadgeVariant(post.status)}\n              className={cn(\n                \"text-xs capitalize px-2.5 py-0.5\",\n                getStatusBadgeVariant(post.status) === \"default\" &&\n                  \"bg-blueishGreen-500 hover:bg-blueishGreen-600 text-blueishGreen-foreground\",\n              )}\n            >\n              {post.status || \"Unknown\"}\n            </Badge>\n          </div>\n          <div>\n            <p className=\"text-xs font-medium text-gray-500 dark:text-gray-400\">Created</p>\n            <p className=\"text-gray-700 dark:text-gray-300\">{new Date(post.created_at).toLocaleDateString()}</p>\n          </div>\n          {post.post_url && (\n            <div>\n              <p className=\"text-xs font-medium text-gray-500 dark:text-gray-400\">Post URL</p>\n              <a\n                href={post.post_url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-blueishGreen-600 hover:text-blueishGreen-500 hover:underline break-all dark:text-blueishGreen-400 dark:hover:text-blueishGreen-300\"\n              >\n                {post.post_url}\n              </a>\n            </div>\n          )}\n        </div>\n      </aside>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/social/loading.tsx\n```typescript\nimport { Loader2 } from \"lucide-react\"\n\nexport default function Loading() {\n  return (\n    <div className=\"flex h-full items-center justify-center\">\n      <Loader2 className=\"h-6 w-6 animate-spin text-gray-400\" />\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/social/page.tsx\n```typescript\n\"use client\"\n\nimport React from \"react\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { DataTable } from \"@/components/ui/data-table\"\nimport { DataTableColumnHeader } from \"@/components/ui/data-table-column-header\"\nimport {\n  PlusCircle,\n  ChevronDown,\n  ChevronRight,\n  Edit3,\n  Trash2,\n  Loader2,\n  AlertCircle,\n  ExternalLink,\n  MoreHorizontal,\n  PackagePlus,\n  CheckCircle2,\n  XCircle,\n  ListPlus,\n} from \"lucide-react\"\nimport Link from \"next/link\"\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\"\nimport type { Database } from \"@/types/supabase\"\nimport type { ColumnDef, Row } from \"@tanstack/react-table\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n\ntype ListingRow = Database[\"public\"][\"Tables\"][\"listings\"][\"Row\"]\ntype SocialPostRow = Database[\"public\"][\"Tables\"][\"social_posts\"][\"Row\"]\ntype SocialPostPropertyJunctionRow = Database[\"public\"][\"Tables\"][\"social_post_properties\"][\"Row\"]\n\ninterface EnrichedSocialPostPropertyForMainTable extends SocialPostPropertyJunctionRow {\n  properties: Partial<ListingRow> | null\n}\ninterface EnrichedSocialPost extends SocialPostRow {\n  social_post_properties: EnrichedSocialPostPropertyForMainTable[]\n  content_type: string | null\n  format_type: string | null\n}\n\ninterface AllLinkedPropertyItem extends SocialPostPropertyJunctionRow {\n  properties: Pick<\n    ListingRow,\n    | \"id\"\n    | \"mls_number\"\n    | \"street_number\"\n    | \"street_direction\"\n    | \"street_name\"\n    | \"unit_number\"\n    | \"city\"\n    | \"state\"\n    | \"zip_code\"\n  > | null\n  social_posts: Pick<SocialPostRow, \"id\" | \"title\"> | null\n}\n\nconst getFullAddress = (\n  property:\n    | Partial<ListingRow>\n    | Pick<\n        ListingRow,\n        | \"id\"\n        | \"mls_number\"\n        | \"street_number\"\n        | \"street_direction\"\n        | \"street_name\"\n        | \"unit_number\"\n        | \"city\"\n        | \"state\"\n        | \"zip_code\"\n      >\n    | null,\n): string => {\n  if (!property) return \"N/A\"\n  return (\n    `${property.street_number || \"\"} ${property.street_direction || \"\"} ${property.street_name || \"\"}${property.unit_number ? ` #${property.unit_number}` : \"\"}, ${property.city || \"\"}, ${property.state || \"\"} ${\n      property.zip_code || \"\"\n    }`\n      .replace(/\\s,/g, \",\")\n      .replace(/, $/, \"\")\n      .replace(/^,/, \"\")\n      .trim() || \"Address not available\"\n  )\n}\n\nconst formatCurrency = (amount: number | null | undefined) => {\n  if (amount == null) return \"N/A\"\n  return new Intl.NumberFormat(\"en-US\", { style: \"currency\", currency: \"USD\", minimumFractionDigits: 0 }).format(amount)\n}\n\nexport default function SocialPostsPage() {\n  const { user } = useAuth()\n  const { toast } = useToast()\n  const [socialPosts, setSocialPosts] = React.useState<EnrichedSocialPost[]>([])\n  const [allLinkedProperties, setAllLinkedProperties] = React.useState<AllLinkedPropertyItem[]>([])\n  const [propertiesAvailableForQueue, setPropertiesAvailableForQueue] = React.useState<ListingRow[]>([])\n\n  const [isLoadingPosts, setIsLoadingPosts] = React.useState(true)\n  const [isLoadingLinkedItems, setIsLoadingLinkedItems] = React.useState(true)\n  const [isLoadingAvailableProps, setIsLoadingAvailableProps] = React.useState(true)\n  const [error, setError] = React.useState<string | null>(null)\n\n  const [isCreatePostDialogOpen, setIsCreatePostDialogOpen] = React.useState(false)\n  const [newPostName, setNewPostName] = React.useState(\"\")\n  const [newPostContentType, setNewPostContentType] = React.useState<string | undefined>(undefined)\n  const [newPostFormatType, setNewPostFormatType] = React.useState<string | undefined>(undefined)\n  const [selectedPropertiesForDialog, setSelectedPropertiesForDialog] = React.useState<string[]>([])\n  const [isCreatingPost, setIsCreatingPost] = React.useState(false)\n\n  const fetchData = React.useCallback(async () => {\n    if (!user) return\n    setIsLoadingPosts(true)\n    setIsLoadingLinkedItems(true)\n    setIsLoadingAvailableProps(true)\n    setError(null)\n\n    try {\n      // 1. Fetch Social Posts (for main table)\n      const { data: postsData, error: postsError } = await supabase\n        .from(\"social_posts\")\n        .select(\n          `*, social_post_properties (*, properties (id, mls_number, street_number, street_direction, street_name, unit_number, city, state, zip_code, list_price, status))`,\n        )\n        .eq(\"user_id\", user.id)\n        .order(\"created_at\", { ascending: false })\n      if (postsError) throw postsError\n      setSocialPosts((postsData as EnrichedSocialPost[]) || [])\n      setIsLoadingPosts(false)\n\n      // 2. Fetch All Linked Property Items (for second table)\n      const { data: linkedItemsData, error: linkedItemsError } = await supabase\n        .from(\"social_post_properties\")\n        .select(\n          `*, properties (id, mls_number, street_number, street_direction, street_name, unit_number, city, state, zip_code), social_posts (id, title)`,\n        )\n        .eq(\"social_posts.user_id\", user.id)\n        .order(\"created_at\", { ascending: false })\n      if (linkedItemsError) throw linkedItemsError\n      setAllLinkedProperties((linkedItemsData as AllLinkedPropertyItem[]) || [])\n      setIsLoadingLinkedItems(false)\n\n      // 3. Fetch Properties Available for Queue/New Post\n      // This assumes NO `in_social_queue` field on properties table.\n      // We find properties NOT in social_post_properties for this user.\n      const { data: allUserProperties, error: allPropsError } = await supabase.from(\"listings\").select(\"id\")\n      // Add .eq('user_id', user.id) if properties are user-specific\n      if (allPropsError) throw allPropsError\n\n      const propertyIdsInUserPosts = new Set(\n        (linkedItemsData?.map((item) => item.property_id).filter(Boolean) as string[]) || [],\n      )\n\n      const { data: allPropertiesFullData, error: allPropertiesFullDataError } = await supabase\n        .from(\"listings\")\n        .select(\"*\")\n        // Add .eq('user_id', user.id) if properties are user-specific\n        .order(\"created_at\", { ascending: false })\n\n      if (allPropertiesFullDataError) throw allPropertiesFullDataError\n\n      const availableProperties = allPropertiesFullData?.filter((p) => !propertyIdsInUserPosts.has(p.id)) || []\n      setPropertiesAvailableForQueue(availableProperties)\n      setIsLoadingAvailableProps(false)\n    } catch (err: any) {\n      console.error(\"Error fetching social page data:\", err)\n      setError(err.message || \"Failed to fetch data.\")\n      toast({ title: \"Error\", description: \"Could not fetch all social page data.\", variant: \"destructive\" })\n      setIsLoadingPosts(false)\n      setIsLoadingLinkedItems(false)\n      setIsLoadingAvailableProps(false)\n    }\n  }, [user, toast])\n\n  React.useEffect(() => {\n    fetchData()\n  }, [fetchData])\n\n  // ... (handleCreatePostAction, calculateProgress, handlePropertySelectionInDialog, handleDeletePost remain largely the same)\n  const handleCreatePostAction = async () => {\n    if (!user) {\n      toast({ title: \"Error\", description: \"You must be logged in.\", variant: \"destructive\" })\n      return\n    }\n    if (!newPostName.trim()) {\n      toast({ title: \"Error\", description: \"Post name cannot be empty.\", variant: \"destructive\" })\n      return\n    }\n    if (selectedPropertiesForDialog.length === 0) {\n      toast({ title: \"Error\", description: \"Please select at least one listing.\", variant: \"destructive\" })\n      return\n    }\n\n    setIsCreatingPost(true)\n\n    const { data: newPost, error: postError } = await supabase\n      .from(\"social_posts\")\n      .insert({\n        user_id: user.id,\n        title: newPostName,\n        status: \"draft\",\n        content_type: newPostContentType,\n        format_type: newPostFormatType,\n      })\n      .select()\n      .single()\n\n    if (postError || !newPost) {\n      setIsCreatingPost(false)\n      toast({\n        title: \"Error Creating Post\",\n        description: postError?.message || \"Failed to create post.\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    const postPropertiesToInsert = selectedPropertiesForDialog.map((propertyId) => ({\n      social_post_id: newPost.id,\n      property_id: propertyId,\n      image_complete: false,\n      description_complete: false,\n      contacted_complete: false,\n    }))\n\n    const { error: propertiesError } = await supabase.from(\"social_post_properties\").insert(postPropertiesToInsert)\n\n    if (propertiesError) {\n      setIsCreatingPost(false)\n      // Attempt to delete the post if linking properties failed\n      await supabase.from(\"social_posts\").delete().eq(\"id\", newPost.id)\n      toast({\n        title: \"Error Linking Properties\",\n        description: propertiesError.message || \"Failed to link properties. Post creation rolled back.\",\n        variant: \"destructive\",\n      })\n      return\n    }\n\n    // If you were using an `in_social_queue` flag, you'd update it here.\n    // Since you said it's not present, linking to social_post_properties effectively \"queues\" it.\n\n    toast({ title: \"Success\", description: `Social post \"${newPostName}\" created.` })\n    setIsCreatingPost(false)\n    setIsCreatePostDialogOpen(false)\n    setNewPostName(\"\")\n    setSelectedPropertiesForDialog([])\n    setNewPostContentType(undefined) // Add this\n    setNewPostFormatType(undefined) // Add this\n    fetchData() // Refresh all data\n  }\n\n  const calculateProgress = (post: EnrichedSocialPost) => {\n    if (!post.social_post_properties || post.social_post_properties.length === 0) return 0\n    let totalCompletedTasks = 0\n    const totalPossibleTasks = post.social_post_properties.length * 3\n    post.social_post_properties.forEach((spp) => {\n      if (spp.image_complete) totalCompletedTasks++\n      if (spp.description_complete) totalCompletedTasks++\n      if (spp.contacted_complete) totalCompletedTasks++\n    })\n    return totalPossibleTasks > 0 ? (totalCompletedTasks / totalPossibleTasks) * 100 : 0\n  }\n\n  const handlePropertySelectionInDialog = (propertyId: string) => {\n    setSelectedPropertiesForDialog((prev) =>\n      prev.includes(propertyId) ? prev.filter((id) => id !== propertyId) : [...prev, propertyId],\n    )\n  }\n\n  const handleDeletePost = async (postId: string, postTitle: string) => {\n    if (\n      !confirm(\n        `Are you sure you want to delete the post \"${postTitle}\"? This will also remove its linked properties from this post.`,\n      )\n    )\n      return\n    try {\n      // No need to update `in_social_queue` if it doesn't exist.\n      // Deleting from social_post_properties makes them available again by our new logic.\n      await supabase.from(\"social_post_properties\").delete().eq(\"social_post_id\", postId)\n      await supabase.from(\"social_posts\").delete().eq(\"id\", postId)\n\n      toast({ title: \"Success\", description: `Post \"${postTitle}\" and its property links deleted.` })\n      fetchData() // Refresh all data\n    } catch (err: any) {\n      toast({ title: \"Error\", description: `Failed to delete post: ${err.message}`, variant: \"destructive\" })\n    }\n  }\n\n  // Columns for Main Social Posts Table (remains the same)\n  const socialPostColumns = React.useMemo<ColumnDef<EnrichedSocialPost>[]>(\n    () => [\n      {\n        id: \"expander\",\n        header: () => null,\n        cell: ({ row }) =>\n          row.getCanExpand() ? (\n            <Button variant=\"ghost\" size=\"sm\" onClick={row.getToggleExpandedHandler()} className=\"p-1 h-auto\">\n              {row.getIsExpanded() ? <ChevronDown size={18} /> : <ChevronRight size={18} />}\n            </Button>\n          ) : null,\n        enableSorting: false,\n        enableHiding: false,\n      },\n      {\n        accessorKey: \"title\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Post Name\" />,\n        cell: ({ row }) => (\n          <Link href={`/social/${row.original.id}`} className=\"font-medium text-primary hover:underline\">\n            {row.original.title}\n          </Link>\n        ),\n      },\n      {\n        accessorKey: \"status\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Status\" />,\n        cell: ({ row }) => (\n          <Badge variant={row.original.status === \"published\" ? \"default\" : \"outline\"}>{row.original.status}</Badge>\n        ),\n      },\n      {\n        id: \"propertiesCount\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Listings\" />,\n        cell: ({ row }) => row.original.social_post_properties?.length || 0,\n      },\n      {\n        id: \"progress\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Progress\" />,\n        cell: ({ row }) => {\n          const progress = calculateProgress(row.original)\n          return (\n            <div className=\"flex items-center\">\n              <Progress value={progress} className=\"w-24 h-2 mr-2\" />\n              <span className=\"text-xs\">{Math.round(progress)}%</span>\n            </div>\n          )\n        },\n      },\n      {\n        accessorKey: \"content_type\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Content Type\" />,\n        cell: ({ row }) => row.original.content_type || \"N/A\",\n        filterFn: (row, id, value) => {\n          return value.includes(row.getValue(id))\n        },\n      },\n      {\n        accessorKey: \"format_type\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Format Type\" />,\n        cell: ({ row }) => row.original.format_type || \"N/A\",\n        filterFn: (row, id, value) => {\n          return value.includes(row.getValue(id))\n        },\n      },\n      {\n        accessorKey: \"created_at\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Created At\" />,\n        cell: ({ row }) => new Date(row.original.created_at).toLocaleDateString(),\n      },\n      {\n        id: \"actions\",\n        cell: ({ row }) => (\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"h-7 w-7 p-0\">\n                <span className=\"sr-only\">Open menu</span>\n                <MoreHorizontal className=\"h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-[160px]\">\n              <DropdownMenuLabel className=\"text-xs\">Actions</DropdownMenuLabel>\n              <DropdownMenuItem className=\"text-xs\" asChild>\n                <Link href={`/social/${row.original.id}`}>\n                  <Edit3 className=\"mr-2 h-3.5 w-3.5\" />\n                  View/Edit Details\n                </Link>\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem\n                className=\"text-xs text-red-600 focus:text-red-600 focus:bg-red-50\"\n                onClick={() => handleDeletePost(row.original.id, row.original.title || \"Untitled Post\")}\n              >\n                <Trash2 className=\"mr-2 h-3.5 w-3.5\" />\n                Delete Post\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        ),\n      },\n    ],\n    [fetchData],\n  )\n\n  // Sub-component for main social posts table (remains the same)\n  const renderSocialPostSubComponent = ({ row }: { row: Row<EnrichedSocialPost> }) => {\n    const postProperties = row.original.social_post_properties\n    if (!postProperties || postProperties.length === 0) {\n      return <div className=\"p-4 text-sm text-muted-foreground bg-muted/30\">No listings linked to this post.</div>\n    }\n    return (\n      <div className=\"p-2 pl-10 bg-muted/30\">\n        <h4 className=\"text-xs font-semibold mb-1 text-muted-foreground\">Linked Listings:</h4>\n        <ul className=\"space-y-1\">\n          {postProperties.map((spp) => (\n            <li\n              key={spp.property_id}\n              className=\"text-xs flex items-center justify-between p-1 rounded hover:bg-background\"\n            >\n              <span>{getFullAddress(spp.properties)}</span>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox id={`img-${spp.id}`} checked={spp.image_complete ?? false} disabled className=\"h-3 w-3\" />\n                <Checkbox\n                  id={`desc-${spp.id}`}\n                  checked={spp.description_complete ?? false}\n                  disabled\n                  className=\"h-3 w-3\"\n                />\n                <Checkbox\n                  id={`contact-${spp.id}`}\n                  checked={spp.contacted_complete ?? false}\n                  disabled\n                  className=\"h-3 w-3\"\n                />\n                {spp.properties && spp.properties.id && (\n                  <Link href={`/properties/${spp.properties.id}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <ExternalLink className=\"h-3 w-3 text-muted-foreground hover:text-primary\" />\n                  </Link>\n                )}\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    )\n  }\n\n  // Columns for \"All Linked Properties\" Table (remains the same)\n  const linkedPropertyItemsColumns = React.useMemo<ColumnDef<AllLinkedPropertyItem>[]>(\n    () => [\n      {\n        id: \"propertyAddress\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Property Address\" />,\n        cell: ({ row }) => (\n          <Link href={`/properties/${row.original.properties?.id}`} className=\"hover:underline text-primary\">\n            {getFullAddress(row.original.properties)}\n          </Link>\n        ),\n        accessorFn: (row) => getFullAddress(row.properties),\n      },\n      {\n        id: \"socialPostTitle\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Social Post\" />,\n        cell: ({ row }) => (\n          <Link href={`/social/${row.original.social_posts?.id}`} className=\"hover:underline\">\n            {row.original.social_posts?.title || \"N/A\"}\n          </Link>\n        ),\n        accessorFn: (row) => row.social_posts?.title,\n      },\n      {\n        accessorKey: \"image_complete\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Image\" />,\n        cell: ({ row }) =>\n          row.original.image_complete ? (\n            <CheckCircle2 className=\"h-4 w-4 text-green-500\" />\n          ) : (\n            <XCircle className=\"h-4 w-4 text-muted-foreground\" />\n          ),\n      },\n      {\n        accessorKey: \"description_complete\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Description\" />,\n        cell: ({ row }) =>\n          row.original.description_complete ? (\n            <CheckCircle2 className=\"h-4 w-4 text-green-500\" />\n          ) : (\n            <XCircle className=\"h-4 w-4 text-muted-foreground\" />\n          ),\n      },\n      {\n        accessorKey: \"contacted_complete\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Contacted\" />,\n        cell: ({ row }) =>\n          row.original.contacted_complete ? (\n            <CheckCircle2 className=\"h-4 w-4 text-green-500\" />\n          ) : (\n            <XCircle className=\"h-4 w-4 text-muted-foreground\" />\n          ),\n      },\n      {\n        accessorKey: \"created_at\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Date Linked\" />,\n        cell: ({ row }) => new Date(row.original.created_at).toLocaleDateString(),\n      },\n    ],\n    [],\n  )\n\n  // Columns for \"Properties Available for Social Queue\" Table (NEW/REVISED)\n  const availablePropertiesColumns = React.useMemo<ColumnDef<ListingRow>[]>(\n    () => [\n      {\n        id: \"select\",\n        header: ({ table }) => (\n          <Checkbox\n            checked={\n              table.getIsAllPageRowsSelected() ||\n              (selectedPropertiesForDialog.length > 0 &&\n                propertiesAvailableForQueue.every((p) => selectedPropertiesForDialog.includes(p.id)))\n            }\n            onCheckedChange={(value) => {\n              const allCurrentPageIds = table.getFilteredRowModel().rows.map((row) => row.original.id)\n              if (!!value) {\n                setSelectedPropertiesForDialog((prev) => Array.from(new Set([...prev, ...allCurrentPageIds])))\n              } else {\n                setSelectedPropertiesForDialog((prev) => prev.filter((id) => !allCurrentPageIds.includes(id)))\n              }\n              table.toggleAllPageRowsSelected(!!value)\n            }}\n            aria-label=\"Select all on current page\"\n          />\n        ),\n        cell: ({ row }) => (\n          <Checkbox\n            checked={selectedPropertiesForDialog.includes(row.original.id)}\n            onCheckedChange={() => handlePropertySelectionInDialog(row.original.id)}\n            aria-label=\"Select row\"\n          />\n        ),\n        enableSorting: false,\n        enableHiding: false,\n      },\n      {\n        accessorKey: \"mls_number\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"MLS#\" />,\n      },\n      {\n        id: \"address\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Address\" />,\n        cell: ({ row }) => getFullAddress(row.original),\n        accessorFn: (row) => getFullAddress(row),\n      },\n      {\n        accessorKey: \"status\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"Status\" />,\n        cell: ({ row }) => <Badge variant=\"outline\">{row.original.status}</Badge>,\n      },\n      {\n        accessorKey: \"list_price\",\n        header: ({ column }) => <DataTableColumnHeader column={column} title=\"List Price\" />,\n        cell: ({ row }) => formatCurrency(row.original.list_price),\n      },\n    ],\n    [selectedPropertiesForDialog, propertiesAvailableForQueue], // Ensure re-render on selection change\n  )\n\n  if (error && !isLoadingPosts && !isLoadingLinkedItems && !isLoadingAvailableProps) {\n    return (\n      <Alert variant=\"destructive\">\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertTitle>Error</AlertTitle>\n        <AlertDescription>{error} Please try refreshing the page.</AlertDescription>\n      </Alert>\n    )\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Section 1: Social Media Posts Table */}\n      <section>\n        <div className=\"flex justify-between items-center mb-4\">\n          <h1 className=\"text-2xl font-semibold\">Social Media Posts</h1>\n          {/* \"Create Post\" Dialog Trigger - now uses propertiesAvailableForQueue */}\n          <Dialog open={isCreatePostDialogOpen} onOpenChange={setIsCreatePostDialogOpen}>\n            <DialogTrigger asChild>\n              <Button\n                onClick={() => {\n                  /* setSelectedPropertiesForDialog([]); // Clear previous selections if opening fresh */\n                  setIsCreatePostDialogOpen(true)\n                }}\n              >\n                <PlusCircle className=\"mr-2 h-4 w-4\" /> Create New Post\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[600px]\">\n              <DialogHeader>\n                <DialogTitle>Create New Social Post</DialogTitle>\n                <DialogDescription>\n                  Name your post and select listings from the list of available listings below.\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"grid gap-4 py-4\">\n                <div className=\"grid grid-cols-4 items-center gap-4\">\n                  <Label htmlFor=\"post-name-input\" className=\"text-right\">\n                    Post Name\n                  </Label>\n                  <Input\n                    id=\"post-name-input\"\n                    value={newPostName}\n                    onChange={(e) => setNewPostName(e.target.value)}\n                    className=\"col-span-3\"\n                    placeholder=\"e.g., Spring Listings Showcase\"\n                  />\n                </div>\n                <div className=\"grid grid-cols-4 items-center gap-4\">\n                  <Label htmlFor=\"post-content-type\" className=\"text-right\">\n                    Content Type\n                  </Label>\n                  <Select value={newPostContentType} onValueChange={setNewPostContentType}>\n                    <SelectTrigger id=\"post-content-type\" className=\"col-span-3\">\n                      <SelectValue placeholder=\"Select content type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Single Property\">Single Property</SelectItem>\n                      <SelectItem value=\"Multi Property\">Multi Property</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"grid grid-cols-4 items-center gap-4\">\n                  <Label htmlFor=\"post-format-type\" className=\"text-right\">\n                    Format Type\n                  </Label>\n                  <Select value={newPostFormatType} onValueChange={setNewPostFormatType}>\n                    <SelectTrigger id=\"post-format-type\" className=\"col-span-3\">\n                      <SelectValue placeholder=\"Select format type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Carousel\">Carousel</SelectItem>\n                      <SelectItem value=\"Post\">Post</SelectItem>\n                      <SelectItem value=\"Reel\">Reel</SelectItem>\n                      <SelectItem value=\"Story\">Story</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Available Listings ({propertiesAvailableForQueue.length} not in any of your posts)</Label>\n                  {isLoadingAvailableProps ? (\n                    <Loader2 className=\"h-5 w-5 animate-spin text-muted-foreground mx-auto my-4\" />\n                  ) : propertiesAvailableForQueue.length === 0 ? (\n                    <p className=\"text-sm text-muted-foreground p-4 border rounded-md text-center\">\n                      No listings available to add to a new post.\n                    </p>\n                  ) : (\n                    <div className=\"max-h-60 overflow-y-auto border rounded-md p-2 space-y-1\">\n                      {propertiesAvailableForQueue.map((prop) => (\n                        <div\n                          key={prop.id}\n                          className=\"flex items-center justify-between p-2 rounded hover:bg-muted/50 cursor-pointer\"\n                          onClick={() => handlePropertySelectionInDialog(prop.id)}\n                        >\n                          <div className=\"flex items-center space-x-2\">\n                            <Checkbox\n                              checked={selectedPropertiesForDialog.includes(prop.id)}\n                              onCheckedChange={() => handlePropertySelectionInDialog(prop.id)}\n                              id={`dialog-prop-select-${prop.id}`}\n                              aria-labelledby={`dialog-prop-label-${prop.id}`}\n                            />\n                            <Label\n                              htmlFor={`dialog-prop-select-${prop.id}`}\n                              id={`dialog-prop-label-${prop.id}`}\n                              className=\"text-sm font-normal cursor-pointer\"\n                            >\n                              {getFullAddress(prop)}\n                            </Label>\n                          </div>\n                          <span className=\"text-xs text-muted-foreground\">{prop.mls_number}</span>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n                {selectedPropertiesForDialog.length > 0 && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    {selectedPropertiesForDialog.length} listing{selectedPropertiesForDialog.length === 1 ? \"\" : \"s\"}{\" \"}\n                    selected.\n                  </p>\n                )}\n              </div>\n              <DialogFooter>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setIsCreatePostDialogOpen(false) /* setSelectedPropertiesForDialog([]); */\n                  }}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleCreatePostAction}\n                  disabled={\n                    isCreatingPost ||\n                    !newPostName.trim() ||\n                    selectedPropertiesForDialog.length === 0 ||\n                    !newPostContentType ||\n                    !newPostFormatType\n                  }\n                >\n                  {isCreatingPost ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : \"Create Post\"}\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        </div>\n        <DataTable\n          columns={socialPostColumns}\n          data={socialPosts}\n          loading={isLoadingPosts}\n          renderSubComponent={renderSocialPostSubComponent}\n          searchColumn=\"title\"\n        />\n        {socialPosts.length === 0 && !isLoadingPosts && !error && (\n          <div className=\"text-center py-10 border-2 border-dashed rounded-lg\">\n            <PackagePlus className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n            <h3 className=\"mt-2 text-lg font-medium text-muted-foreground\">No Social Posts Yet</h3>\n            <p className=\"text-sm text-muted-foreground mt-1\">Click \"Create Post\" to get started.</p>\n          </div>\n        )}\n      </section>\n\n      {/* Section 2: All Properties Currently Linked in User's Social Posts */}\n      <section className=\"mt-12\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h2 className=\"text-xl font-semibold\">All Listings Currently Linked in Your Social Posts</h2>\n        </div>\n        <DataTable\n          columns={linkedPropertyItemsColumns}\n          data={allLinkedProperties}\n          loading={isLoadingLinkedItems}\n          searchColumn=\"propertyAddress\"\n        />\n        {allLinkedProperties.length === 0 && !isLoadingLinkedItems && !error && (\n          <div className=\"text-center py-10 border-2 border-dashed rounded-lg\">\n            <ListPlus className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n            <h3 className=\"mt-2 text-lg font-medium text-muted-foreground\">No Properties Linked to Your Posts</h3>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              Create posts and link properties; they will appear here.\n            </p>\n          </div>\n        )}\n      </section>\n\n      {/* Section 3: Properties Available for Social Queue (NEW/REVISED) */}\n      <section className=\"mt-12\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h2 className=\"text-xl font-semibold\">Listings Available for Social Posts</h2>\n          {selectedPropertiesForDialog.length > 0 && (\n            <Button onClick={() => setIsCreatePostDialogOpen(true)}>\n              <PlusCircle className=\"mr-2 h-4 w-4\" /> Create Post with {selectedPropertiesForDialog.length} Selected\n            </Button>\n          )}\n        </div>\n        <DataTable\n          columns={availablePropertiesColumns}\n          data={propertiesAvailableForQueue}\n          loading={isLoadingAvailableProps}\n          searchColumn=\"address\" // Search by address\n        />\n        {propertiesAvailableForQueue.length === 0 && !isLoadingAvailableProps && !error && (\n          <div className=\"text-center py-10 border-2 border-dashed rounded-lg\">\n            <ListPlus className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n            <h3 className=\"mt-2 text-lg font-medium text-muted-foreground\">No Listings Available for New Posts</h3>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              All properties might be in existing posts, or no properties are available.\n            </p>\n          </div>\n        )}\n      </section>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/(dashboard)/layout.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\nimport { useState, useEffect, useCallback } from \"react\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { Sidebar } from \"@/components/layout/sidebar\"\nimport { Header } from \"@/components/layout/header\"\nimport { redirect, usePathname } from \"next/navigation\"\nimport { Loader2 } from \"lucide-react\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { hexToHsl } from \"@/lib/color-utils\"\n\n// Default HSL values from globals.css (light mode)\nconst DEFAULT_PRIMARY_HSL = \"240 5.9% 10%\"\nconst DEFAULT_PRIMARY_FOREGROUND_HSL = \"0 0% 98%\"\n\nexport default function DashboardLayout({ children }: { children: React.ReactNode }) {\n  const { user, loading: authLoading, session } = useAuth()\n  const [themeLoading, setThemeLoading] = useState(true)\n  const pathname = usePathname()\n\n  const applyThemeToDocument = useCallback((primaryHsl: string, foregroundHsl: string) => {\n    if (typeof document !== \"undefined\") {\n      document.documentElement.style.setProperty(\"--primary\", primaryHsl)\n      document.documentElement.style.setProperty(\"--primary-foreground\", foregroundHsl)\n    }\n  }, [])\n\n  useEffect(() => {\n    const fetchAndApplyTheme = async () => {\n      if (authLoading) {\n        setThemeLoading(true)\n        return\n      }\n\n      setThemeLoading(true)\n\n      if (user && session) {\n        try {\n          const { data, error } = await supabase\n            .from(\"user_settings\")\n            .select(\"primary_color_hex, primary_foreground_color_hex\")\n            .eq(\"user_id\", user.id)\n            .single()\n\n          if (error && error.code !== \"PGRST116\") {\n            console.error(\"Error fetching theme settings:\", error)\n            applyThemeToDocument(DEFAULT_PRIMARY_HSL, DEFAULT_PRIMARY_FOREGROUND_HSL)\n          } else if (data) {\n            const primaryHsl = data.primary_color_hex ? hexToHsl(data.primary_color_hex) : null\n            const foregroundHsl = data.primary_foreground_color_hex ? hexToHsl(data.primary_foreground_color_hex) : null\n\n            applyThemeToDocument(primaryHsl || DEFAULT_PRIMARY_HSL, foregroundHsl || DEFAULT_PRIMARY_FOREGROUND_HSL)\n          } else {\n            applyThemeToDocument(DEFAULT_PRIMARY_HSL, DEFAULT_PRIMARY_FOREGROUND_HSL)\n          }\n        } catch (e) {\n          console.error(\"Exception during theme settings fetch:\", e)\n          applyThemeToDocument(DEFAULT_PRIMARY_HSL, DEFAULT_PRIMARY_FOREGROUND_HSL)\n        } finally {\n          setThemeLoading(false)\n        }\n      } else {\n        applyThemeToDocument(DEFAULT_PRIMARY_HSL, DEFAULT_PRIMARY_FOREGROUND_HSL)\n        setThemeLoading(false)\n      }\n    }\n\n    fetchAndApplyTheme()\n  }, [user, session, authLoading, applyThemeToDocument, pathname])\n\n  if (authLoading || themeLoading) {\n    return (\n      <div className=\"flex h-screen items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        <p className=\"ml-2 text-sm text-muted-foreground\">Initializing...</p>\n      </div>\n    )\n  }\n\n  if (!user && !session && (pathname.startsWith(\"/dashboard\") || pathname === \"/\")) {\n    redirect(\"/login\")\n    return null\n  }\n\n  if (!user && (pathname === \"/login\" || pathname === \"/register\")) {\n    return <>{children}</>\n  }\n\n  if (user && (pathname === \"/login\" || pathname === \"/register\")) {\n    redirect(\"/dashboard\")\n    return null\n  }\n\n  if (!user && !pathname.startsWith(\"/login\") && !pathname.startsWith(\"/register\")) {\n    redirect(\"/login\")\n    return null\n  }\n\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar />\n      <div className=\"flex flex-1 flex-col\">\n        <Header />\n        <main className=\"flex-1 overflow-auto bg-gray-50/30 p-4\">{children}</main>\n      </div>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/actions/ai-actions.ts\n```typescript\n\"use server\"\n\nimport { createServerClient } from \"@/lib/supabase/server\"\nimport { openai } from \"@ai-sdk/openai\" // Use Vercel AI SDK\nimport { generateText, type CoreMessage } from \"ai\" // Use Vercel AI SDK\n\nexport async function generateDescriptionWithAI(\n  actionType: \"rewrite\" | \"prompt\",\n  text: string, // For \"rewrite\", this is the text to rewrite. For \"prompt\", this is the custom prompt.\n  contextText?: string, // For \"prompt\", this is the existing description to provide as context.\n): Promise<{ generatedText: string | null; error: string | null }> {\n  console.log(\n    `AI Action: Started - Type: ${actionType}, Text Length: ${text.length}, Context Length: ${contextText?.length || 0}`,\n  )\n\n  const supabase = await createServerClient() // Correctly instantiate server client\n  const {\n    data: { user },\n    error: userError,\n  } = await supabase.auth.getUser()\n\n  if (userError || !user) {\n    console.error(\"AI Action: User not authenticated.\", userError)\n    return { generatedText: null, error: \"User not authenticated. Please log in.\" }\n  }\n  console.log(\"AI Action: User authenticated:\", user.id)\n\n  const { data: userSettings, error: settingsError } = await supabase\n    .from(\"user_settings\") // Corrected table name from previous iterations\n    .select(\"openai_api_key, openai_model\")\n    .eq(\"user_id\", user.id)\n    .single()\n\n  if (settingsError) {\n    console.error(\"AI Action: Error fetching user settings.\", settingsError)\n    if (settingsError.code === \"PGRST116\") {\n      // No row found\n      return {\n        generatedText: null,\n        error: \"AI settings not found. Please configure your OpenAI API key and model in the Integrations settings.\",\n      }\n    }\n    return { generatedText: null, error: `Could not load AI settings: ${settingsError.message}` }\n  }\n\n  if (!userSettings) {\n    // Should be caught by PGRST116, but as a safeguard\n    console.error(\"AI Action: User settings are unexpectedly null after query.\")\n    return {\n      generatedText: null,\n      error: \"AI settings not found. Please configure your OpenAI API key and model in the Integrations settings.\",\n    }\n  }\n\n  console.log(\n    \"AI Action: User settings fetched. Has API Key:\",\n    !!userSettings.openai_api_key,\n    \"Model:\",\n    userSettings.openai_model,\n  )\n\n  if (!userSettings.openai_api_key) {\n    console.warn(\"AI Action: OpenAI API key not configured for user:\", user.id)\n    return { generatedText: null, error: \"OpenAI API key not configured. Please add it in the Integrations settings.\" }\n  }\n\n  const openAIModel = userSettings.openai_model || \"gpt-3.5-turbo\" // Default model if not set\n\n  try {\n    let systemPromptMessage = \"\"\n    const messages: CoreMessage[] = []\n\n    if (actionType === \"rewrite\") {\n      systemPromptMessage =\n        \"You are an expert real estate copywriter. Rewrite the following property description to be more engaging, concise, or as instructed by the user. Retain key details and the original intent unless specified otherwise. Focus on clarity and appeal for potential buyers or renters.\"\n      messages.push({ role: \"user\", content: `Rewrite this listing description: \"${text}\"` })\n    } else if (actionType === \"prompt\") {\n      systemPromptMessage =\n        \"You are an expert real estate copywriter. Generate a property description based on the user's prompt. If context (current description) is provided, use it to inform your response, either by enhancing, replacing, or building upon it as per the user's prompt. Aim for compelling and accurate real estate copy.\"\n      let userPromptContent = `User Prompt: \"${text}\"`\n      if (contextText && contextText.trim() !== \"\") {\n        userPromptContent += `\\n\\nFor context, here is the current description (you can choose to ignore, enhance, or replace it based on my prompt): \"${contextText}\"`\n      }\n      messages.push({ role: \"user\", content: userPromptContent })\n    }\n\n    console.log(\n      `AI Action: Calling OpenAI. Model: ${openAIModel}. System Prompt: ${systemPromptMessage.substring(0, 100)}... Messages:`,\n      messages.map((m) => ({ role: m.role, content: (m.content as string)?.substring(0, 100) + \"...\" })),\n    )\n\n    const {\n      text: resultText,\n      finishReason,\n      usage,\n    } = await generateText({\n      model: openai(openAIModel, { apiKey: userSettings.openai_api_key }), // Pass API key here\n      system: systemPromptMessage,\n      messages: messages,\n      // temperature: 0.7, // Optional: Adjust creativity\n    })\n\n    console.log(\n      \"AI Action: OpenAI response received. Finish Reason:\",\n      finishReason,\n      \"Usage:\",\n      usage,\n      \"Generated Text Length:\",\n      resultText?.length,\n    )\n\n    if (!resultText && finishReason !== \"stop\" && finishReason !== \"length\") {\n      console.error(\"AI Action: OpenAI generation failed or returned empty text. Finish Reason:\", finishReason)\n      return { generatedText: null, error: `AI generation failed. Reason: ${finishReason || \"unknown\"}` }\n    }\n\n    console.log(\"AI Action: Successfully generated text.\")\n    return { generatedText: resultText || \"\", error: null } // Ensure generatedText is at least an empty string if null\n  } catch (error: any) {\n    console.error(\"AI Action: OpenAI API call error.\", error)\n    let errorMessage = \"An error occurred while generating text with AI.\"\n    if (error.message) {\n      errorMessage = error.message\n    }\n    // Specific error checks for OpenAI\n    if (error.status === 401) errorMessage = \"Invalid OpenAI API key. Please check your key in settings.\"\n    if (error.status === 429)\n      errorMessage = \"OpenAI API rate limit exceeded or quota finished. Please check your OpenAI account.\"\n    if (error.name === \"AbortError\") errorMessage = \"The AI request timed out.\"\n\n    return { generatedText: null, error: errorMessage }\n  }\n}\n```\n\n## File: dkl-microapp-2-main/app/globals.css\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 222.2 84% 4.9%;\n    --radius: 0.3rem;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground text-xs;\n    font-family: var(--font-inter);\n  }\n}\n\n/* Dense Attio-like styles */\n.dense-table {\n  font-size: 11px;\n  line-height: 1.25;\n}\n\n.dense-table th {\n  padding: 0.375rem 0.5rem;\n  font-weight: 500;\n}\n\n.dense-table td {\n  padding: 0.25rem 0.5rem;\n}\n\n.compact-card {\n  padding: 0.75rem;\n}\n\n.compact-input {\n  height: 1.75rem;\n  font-size: 0.75rem;\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n\n.compact-button {\n  height: 1.75rem;\n  font-size: 0.75rem;\n  padding-left: 0.75rem;\n  padding-right: 0.75rem;\n}\n\n.compact-select {\n  height: 1.75rem;\n  font-size: 0.75rem;\n}\n\n/* Scrollbar styling */\n::-webkit-scrollbar {\n  width: 0.5rem;\n  height: 0.5rem;\n}\n\n::-webkit-scrollbar-track {\n  background-color: #f3f4f6;\n}\n\n::-webkit-scrollbar-thumb {\n  background-color: #d1d5db;\n  border-radius: 0.25rem;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background-color: #9ca3af;\n}\n\n.mapboxgl-ctrl-logo {\n  display: none !important;\n}\n\n.mapboxgl-ctrl-attrib {\n  display: none !important;\n}\n```\n\n## File: dkl-microapp-2-main/app/layout.tsx\n```typescript\nimport type React from \"react\"\nimport type { Metadata } from \"next\"\nimport { Inter } from \"next/font/google\"\nimport \"./globals.css\"\nimport { Toaster } from \"@/components/ui/toaster\"\nimport { AuthProvider } from \"@/contexts/auth-context\"\nimport { ThemeProvider } from \"@/components/theme-provider\" // Assuming you have this\n\nconst inter = Inter({ subsets: [\"latin\"], variable: \"--font-inter\" })\n\nexport const metadata: Metadata = {\n  title: \"Real Estate Platform\",\n  description: \"Manage and analyze real estate properties and builders.\",\n    generator: 'v0.dev'\n}\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode\n}>) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <head>\n        <link href=\"https://api.mapbox.com/mapbox-gl-js/v3.4.0/mapbox-gl.css\" rel=\"stylesheet\" />\n      </head>\n      <body className={inter.variable}>\n        <AuthProvider>\n          <ThemeProvider attribute=\"class\" defaultTheme=\"system\" enableSystem disableTransitionOnChange>\n            {children}\n            <Toaster />\n          </ThemeProvider>\n        </AuthProvider>\n      </body>\n    </html>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/app/page.tsx\n```typescript\nimport { redirect } from \"next/navigation\"\n\nexport default function HomePage() {\n  // This component should ideally check auth status before redirecting,\n  // or rely on the layout to handle it.\n  // For simplicity, Next.js middleware or the root layout is often\n  // a better place for initial auth checks and redirects.\n  // Given our current structure, the redirect in app/(dashboard)/layout.tsx\n  // will handle unauthenticated users trying to access dashboard routes.\n  // This page itself might briefly render before that layout kicks in if not careful.\n  // However, since it's just a redirect, it's usually fine.\n  redirect(\"/dashboard\")\n  // return null; // Or a loading indicator if preferred\n}\n```\n\n## File: dkl-microapp-2-main/components/layout/header.tsx\n```typescript\n\"use client\"\n\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { User, LogOut, Settings, Search } from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport function Header() {\n  const { user, signOut } = useAuth()\n\n  return (\n    <header className=\"flex h-12 items-center justify-between border-b bg-white px-4\">\n      <div className=\"flex items-center gap-x-4\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-2.5 top-1/2 h-3.5 w-3.5 -translate-y-1/2 text-muted-foreground\" />\n          <Input\n            type=\"search\"\n            placeholder=\"Search properties, builders...\"\n            className=\"h-7 w-64 rounded pl-8 text-xs attio-input\" // Using attio-input for consistency if defined elsewhere, or remove for default shadcn\n          />\n        </div>\n      </div>\n\n      <div className=\"flex items-center gap-x-2\">\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" size=\"sm\" className=\"h-7 gap-x-1 px-2\">\n              <User className=\"h-3.5 w-3.5\" />\n              <span className=\"text-xs\">{user?.email}</span>\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-48\">\n            <DropdownMenuLabel className=\"text-xs\">My Account</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem asChild>\n              <Link href=\"/settings\" className=\"text-xs\">\n                <Settings className=\"mr-2 h-3.5 w-3.5\" />\n                Settings\n              </Link>\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={() => signOut()} className=\"text-xs\">\n              <LogOut className=\"mr-2 h-3.5 w-3.5\" />\n              Sign out\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </header>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/layout/sidebar.tsx\n```typescript\n\"use client\"\n\nimport Link from \"next/link\"\nimport { usePathname } from \"next/navigation\"\nimport { cn } from \"@/lib/utils\"\nimport {\n  LayoutDashboard,\n  Building2,\n  Users,\n  TrendingUp,\n  Upload,\n  Settings,\n  BarChart3,\n  FileText,\n  Share2,\n} from \"lucide-react\"\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/dashboard\", icon: LayoutDashboard },\n  { name: \"Listings\", href: \"/listings\", icon: Building2 },\n  { name: \"Builders\", href: \"/builders\", icon: Users },\n  { name: \"Social Posts\", href: \"/social\", icon: Share2 },\n  { name: \"Market Insights\", href: \"/insights\", icon: TrendingUp },\n  { name: \"Reports\", href: \"/reports\", icon: FileText },\n  { name: \"Analytics\", href: \"/analytics\", icon: BarChart3 },\n  { name: \"Import Data\", href: \"/import\", icon: Upload },\n  { name: \"Settings\", href: \"/settings\", icon: Settings },\n]\n\nexport function Sidebar() {\n  const pathname = usePathname()\n\n  return (\n    <div className=\"flex h-full w-48 flex-col border-r bg-gray-50/50\">\n      <div className=\"flex h-12 items-center border-b px-4\">\n        <Link href=\"/dashboard\" aria-label=\"Go to dashboard\">\n          <svg\n            width=\"105.13\"\n            height=\"36\"\n            viewBox=\"0 0 1577 541\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            className=\"h-auto\"\n            style={{ height: \"20px\" }}\n          >\n            <rect x=\"76.2188\" y=\"76.436\" width=\"178.273\" height=\"178.273\" fill=\"currentColor\" />\n            <path\n              d=\"M296.199 76.436C321.646 76.436 346.844 81.4483 370.354 91.1868C393.864 100.925 415.225 115.199 433.219 133.193C451.213 151.188 465.486 172.55 475.224 196.061C484.963 219.571 489.975 244.77 489.975 270.218C489.975 295.666 484.963 320.864 475.224 344.375C465.486 367.885 451.213 389.248 433.219 407.242C415.225 425.236 393.864 439.51 370.354 449.249C346.844 458.987 321.646 463.999 296.199 463.999L296.199 76.436Z\"\n              fill=\"currentColor\"\n            />\n            <circle cx=\"165.355\" cy=\"374.863\" r=\"89.1367\" fill=\"currentColor\" />\n            <path\n              d=\"M1401.56 186.084C1421.34 186.084 1438.65 189.606 1453.49 196.651C1468.33 203.697 1479.88 213.515 1488.12 226.106C1496.51 238.698 1500.71 253.462 1500.71 270.401C1500.71 287.189 1496.51 301.954 1488.12 314.695C1479.88 327.287 1468.33 337.105 1453.49 344.15C1438.65 351.195 1421.34 354.718 1401.56 354.718H1319.26V186.084H1401.56ZM1361.53 337.405L1340.85 317.169H1404.7C1415.5 317.169 1424.86 315.22 1432.81 311.323C1440.75 307.425 1446.9 302.029 1451.25 295.134C1455.59 288.089 1457.77 279.844 1457.77 270.401C1457.77 260.807 1455.59 252.563 1451.25 245.668C1446.9 238.773 1440.75 233.376 1432.81 229.479C1424.86 225.582 1415.5 223.633 1404.7 223.633H1340.85L1361.53 203.397V337.405Z\"\n              fill=\"currentColor\"\n            />\n            <path\n              d=\"M1126.16 260.283H1189.34C1197.28 260.283 1203.58 258.484 1208.23 254.886C1212.87 251.139 1215.2 245.968 1215.2 239.372C1215.2 232.777 1212.87 227.68 1208.23 224.083C1203.58 220.335 1197.28 218.461 1189.34 218.461H1120.09L1139.2 197.551V354.718H1096.7V186.084H1194.96C1207.55 186.084 1218.57 188.332 1228.01 192.829C1237.46 197.326 1244.8 203.547 1250.05 211.491C1255.29 219.436 1257.92 228.729 1257.92 239.372C1257.92 249.865 1255.29 259.084 1250.05 267.028C1244.8 274.973 1237.46 281.193 1228.01 285.69C1218.57 290.037 1207.55 292.211 1194.96 292.211H1126.16V260.283ZM1153.36 275.797H1201.26L1263.31 354.718H1214.07L1153.36 275.797Z\"\n              fill=\"currentColor\"\n            />\n            <path\n              d=\"M935.3 186.084V335.831L916.189 317.169H1042.55V354.718H892.805V186.084H935.3Z\"\n              fill=\"currentColor\"\n            />\n            <path\n              d=\"M734.969 186.084C754.756 186.084 772.069 189.606 786.908 196.651C801.748 203.697 813.29 213.515 821.535 226.106C829.929 238.698 834.126 253.462 834.126 270.401C834.126 287.189 829.929 301.954 821.535 314.695C813.29 327.287 801.748 337.105 786.908 344.15C772.069 351.195 754.756 354.718 734.969 354.718H652.676V186.084H734.969ZM694.947 337.405L674.261 317.169H738.117C748.91 317.169 758.278 315.22 766.223 311.323C774.167 307.425 780.313 302.029 784.66 295.134C789.007 288.089 791.181 279.844 791.181 270.401C791.181 260.807 789.007 252.563 784.66 245.668C780.313 238.773 774.167 233.376 766.223 229.479C758.278 225.582 748.91 223.633 738.117 223.633H674.261L694.947 203.397V337.405Z\"\n              fill=\"currentColor\"\n            />\n          </svg>\n        </Link>\n      </div>\n      <nav className=\"flex-1 space-y-0.5 p-2\">\n        {navigation.map((item) => {\n          const isActive = pathname === item.href || (item.href !== \"/dashboard\" && pathname.startsWith(item.href))\n          return (\n            <Link\n              key={item.name}\n              href={item.href}\n              className={cn(\n                \"flex items-center gap-x-2 rounded px-2 py-1.5 text-xs font-medium transition-colors\",\n                isActive\n                  ? \"bg-primary text-primary-foreground\"\n                  : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\",\n              )}\n            >\n              <item.icon className=\"h-3.5 w-3.5\" />\n              {item.name}\n            </Link>\n          )\n        })}\n      </nav>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/alert-dialog.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/alert.tsx\n```typescript\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n```\n\n## File: dkl-microapp-2-main/components/ui/badge.tsx\n```typescript\nimport type * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default: \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive: \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return <div className={cn(badgeVariants({ variant }), className)} {...props} />\n}\n\nexport { Badge, badgeVariants }\n```\n\n## File: dkl-microapp-2-main/components/ui/button.tsx\n```typescript\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n```\n\n## File: dkl-microapp-2-main/components/ui/card.tsx\n```typescript\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n```\n\n## File: dkl-microapp-2-main/components/ui/chart.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/checkbox.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n      \"data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className,\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator className={cn(\"flex items-center justify-center text-current\")}>\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n```\n\n## File: dkl-microapp-2-main/components/ui/command.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/data-table-column-header.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\n\nimport type { Column } from \"@tanstack/react-table\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { ArrowDown, ArrowUp, ChevronsUpDown, EyeOff } from \"lucide-react\"\n\ninterface DataTableColumnHeaderProps<TData, TValue> extends React.HTMLAttributes<HTMLDivElement> {\n  column: Column<TData, TValue>\n  title: string\n}\n\nexport function DataTableColumnHeader<TData, TValue>({\n  column,\n  title,\n  className,\n}: DataTableColumnHeaderProps<TData, TValue>) {\n  if (!column.getCanSort() && !column.getCanHide()) {\n    return <div className={cn(className)}>{title}</div>\n  }\n\n  return (\n    <div className={cn(\"flex items-center space-x-2\", className)}>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"ghost\" size=\"sm\" className=\"-ml-3 h-8 data-[state=open]:bg-accent text-xs\">\n            <span>{title}</span>\n            {column.getCanSort() && column.getIsSorted() === \"desc\" ? (\n              <ArrowDown className=\"ml-2 h-3 w-3\" />\n            ) : column.getIsSorted() === \"asc\" ? (\n              <ArrowUp className=\"ml-2 h-3 w-3\" />\n            ) : (\n              <ChevronsUpDown className=\"ml-2 h-3 w-3\" />\n            )}\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"start\">\n          {column.getCanSort() && (\n            <>\n              <DropdownMenuItem onClick={() => column.toggleSorting(false)}>\n                <ArrowUp className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n                Asc\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => column.toggleSorting(true)}>\n                <ArrowDown className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n                Desc\n              </DropdownMenuItem>\n            </>\n          )}\n          {column.getCanSort() && column.getCanHide() && <DropdownMenuSeparator />}\n          {column.getCanHide() && (\n            <DropdownMenuItem onClick={() => column.toggleVisibility(false)}>\n              <EyeOff className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n              Hide\n            </DropdownMenuItem>\n          )}\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/data-table-pagination.tsx\n```typescript\n\"use client\"\n\nimport type { Table } from \"@tanstack/react-table\"\nimport { Button } from \"@/components/ui/button\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { ChevronLeft, ChevronRight, ChevronsLeft, ChevronsRight } from \"lucide-react\"\n\ninterface DataTablePaginationProps<TData> {\n  table: Table<TData>\n}\n\nexport function DataTablePagination<TData>({ table }: DataTablePaginationProps<TData>) {\n  return (\n    <div className=\"flex items-center justify-between px-2 py-2 border-t\">\n      <div className=\"flex-1 text-sm text-muted-foreground\">\n        {table.getFilteredSelectedRowModel().rows.length} of {table.getFilteredRowModel().rows.length} row(s) selected.\n      </div>\n      <div className=\"flex items-center space-x-6 lg:space-x-8\">\n        <div className=\"flex items-center space-x-2\">\n          <p className=\"text-sm font-medium\">Rows per page</p>\n          <Select\n            value={`${table.getState().pagination.pageSize}`}\n            onValueChange={(value) => {\n              table.setPageSize(Number(value))\n            }}\n          >\n            <SelectTrigger className=\"h-8 w-[70px]\">\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\n            </SelectTrigger>\n            <SelectContent side=\"top\">\n              {[10, 20, 30, 40, 50, 100].map((pageSize) => (\n                <SelectItem key={pageSize} value={`${pageSize}`}>\n                  {pageSize}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n          Page {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\n            onClick={() => table.setPageIndex(0)}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <span className=\"sr-only\">Go to first page</span>\n            <ChevronsLeft className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"h-8 w-8 p-0\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <span className=\"sr-only\">Go to previous page</span>\n            <ChevronLeft className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"h-8 w-8 p-0\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n          >\n            <span className=\"sr-only\">Go to next page</span>\n            <ChevronRight className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\n            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n            disabled={!table.getCanNextPage()}\n          >\n            <span className=\"sr-only\">Go to last page</span>\n            <ChevronsRight className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/data-table-toolbar.tsx\n```typescript\n\"use client\"\n\nimport type { Table } from \"@tanstack/react-table\"\nimport { Input } from \"@/components/ui/input\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { SlidersHorizontal, X } from \"lucide-react\"\n\ninterface DataTableToolbarProps<TData> {\n  table: Table<TData>\n  globalFilter?: string\n  setGlobalFilter?: (value: string) => void\n  // Add props for faceted filters if needed, e.g., filterComponents?: React.ReactNode[]\n}\n\nexport function DataTableToolbar<TData>({ table, globalFilter, setGlobalFilter }: DataTableToolbarProps<TData>) {\n  const isFiltered = table.getState().columnFilters.length > 0\n\n  return (\n    <div className=\"flex items-center justify-between py-2\">\n      <div className=\"flex flex-1 items-center space-x-2\">\n        {setGlobalFilter && (\n          <Input\n            placeholder=\"Search all columns...\"\n            value={globalFilter ?? \"\"}\n            onChange={(event) => setGlobalFilter(event.target.value)}\n            className=\"h-8 w-[150px] lg:w-[250px]\"\n          />\n        )}\n        {/* Placeholder for Faceted Filter Buttons */}\n        {/* {table.getAllColumns().map(column => {\n          if (column.getCanFilter()) {\n            // Render faceted filter UIs here based on column meta or type\n          }\n          return null;\n        })} */}\n        {isFiltered && (\n          <Button variant=\"ghost\" onClick={() => table.resetColumnFilters()} className=\"h-8 px-2 lg:px-3\">\n            Reset\n            <X className=\"ml-2 h-4 w-4\" />\n          </Button>\n        )}\n      </div>\n      <div className=\"flex items-center space-x-2\">\n        {/* Placeholder for Advanced/Command Filters */}\n        {/* <Button variant=\"outline\" size=\"sm\" className=\"h-8\">Advanced Filters</Button> */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"outline\" size=\"sm\" className=\"ml-auto hidden h-8 lg:flex\">\n              <SlidersHorizontal className=\"mr-2 h-4 w-4\" />\n              View\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-[150px]\">\n            <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            {table\n              .getAllColumns()\n              .filter((column) => typeof column.accessorFn !== \"undefined\" && column.getCanHide())\n              .map((column) => {\n                return (\n                  <DropdownMenuCheckboxItem\n                    key={column.id}\n                    className=\"capitalize\"\n                    checked={column.getIsVisible()}\n                    onCheckedChange={(value) => column.toggleVisibility(!!value)}\n                  >\n                    {column.id}\n                  </DropdownMenuCheckboxItem>\n                )\n              })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/data-table.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport {\n  type ColumnDef,\n  type ColumnFiltersState,\n  type SortingState,\n  type VisibilityState,\n  type RowSelectionState,\n  flexRender,\n  getCoreRowModel,\n  getFacetedRowModel,\n  getFacetedUniqueValues,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { DataTablePagination } from \"./data-table-pagination\"\nimport { DataTableToolbar } from \"./data-table-toolbar\" // We'll create this\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[]\n  data: TData[]\n  loading?: boolean\n  // Add props for bulk actions if needed\n  renderBulkActions?: (selectedRows: TData[]) => React.ReactNode\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n  loading = false,\n  renderBulkActions,\n}: DataTableProps<TData, TValue>) {\n  const [rowSelection, setRowSelection] = React.useState<RowSelectionState>({})\n  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({})\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([])\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [globalFilter, setGlobalFilter] = React.useState(\"\")\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      sorting,\n      columnVisibility,\n      rowSelection,\n      columnFilters,\n      globalFilter,\n    },\n    enableRowSelection: true,\n    onRowSelectionChange: setRowSelection,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    onColumnVisibilityChange: setColumnVisibility,\n    onGlobalFilterChange: setGlobalFilter,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFacetedRowModel: getFacetedRowModel(),\n    getFacetedUniqueValues: getFacetedUniqueValues(),\n    manualPagination: false, // Set to true if using server-side pagination\n  })\n\n  const selectedRowsData = table.getFilteredSelectedRowModel().rows.map((row) => row.original)\n\n  return (\n    <div className=\"space-y-2\">\n      <DataTableToolbar table={table} globalFilter={globalFilter} setGlobalFilter={setGlobalFilter} />\n      <div className=\"rounded-md border bg-card\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead key={header.id} colSpan={header.colSpan} className=\"text-xs\">\n                      {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                    </TableHead>\n                  )\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {loading ? (\n              <TableRow>\n                <TableCell colSpan={columns.length} className=\"h-24 text-center text-xs\">\n                  Loading...\n                </TableCell>\n              </TableRow>\n            ) : table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow key={row.id} data-state={row.getIsSelected() && \"selected\"}>\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id} className=\"text-xs py-2\">\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell colSpan={columns.length} className=\"h-24 text-center text-xs\">\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <DataTablePagination table={table} />\n      {renderBulkActions && selectedRowsData.length > 0 && (\n        <div className=\"fixed bottom-4 left-1/2 -translate-x-1/2 z-50\">\n          <div className=\"bg-card border shadow-lg rounded-md p-2 flex items-center space-x-2\">\n            <span className=\"text-sm font-medium px-2\">{selectedRowsData.length} selected</span>\n            {renderBulkActions(selectedRowsData)}\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/dialog.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className,\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"flex flex-col space-y-1.5 text-center sm:text-left\", className)} {...props} />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)} {...props} />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/dropdown-menu.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/input.tsx\n```typescript\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n```\n\n## File: dkl-microapp-2-main/components/ui/label.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n```\n\n## File: dkl-microapp-2-main/components/ui/popover.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n```\n\n## File: dkl-microapp-2-main/components/ui/progress.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\"relative h-4 w-full overflow-hidden rounded-full bg-secondary\", className)}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n```\n\n## File: dkl-microapp-2-main/components/ui/radio-group.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n```\n\n## File: dkl-microapp-2-main/components/ui/scroll-area.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n```\n\n## File: dkl-microapp-2-main/components/ui/select.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\"flex cursor-default items-center justify-center py-1\", className)}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\"flex cursor-default items-center justify-center py-1\", className)}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName = SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className,\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\",\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label ref={ref} className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)} {...props} />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className,\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator ref={ref} className={cn(\"-mx-1 my-1 h-px bg-muted\", className)} {...props} />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/separator.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n```\n\n## File: dkl-microapp-2-main/components/ui/sheet.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/switch.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className,\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\",\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n```\n\n## File: dkl-microapp-2-main/components/ui/table.tsx\n```typescript\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<HTMLTableElement, React.HTMLAttributes<HTMLTableElement>>(\n  ({ className, ...props }, ref) => (\n    <div className=\"relative w-full overflow-auto\">\n      <table ref={ref} className={cn(\"w-full caption-bottom text-sm\", className)} {...props} />\n    </div>\n  ),\n)\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />,\n)\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => (\n    <tbody ref={ref} className={cn(\"[&_tr:last-child]:border-0\", className)} {...props} />\n  ),\n)\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => (\n    <tfoot ref={ref} className={cn(\"bg-primary font-medium text-primary-foreground\", className)} {...props} />\n  ),\n)\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<HTMLTableRowElement, React.HTMLAttributes<HTMLTableRowElement>>(\n  ({ className, ...props }, ref) => (\n    <tr\n      ref={ref}\n      className={cn(\"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\", className)}\n      {...props}\n    />\n  ),\n)\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<HTMLTableCellElement, React.ThHTMLAttributes<HTMLTableCellElement>>(\n  ({ className, ...props }, ref) => (\n    <th\n      ref={ref}\n      className={cn(\n        \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className,\n      )}\n      {...props}\n    />\n  ),\n)\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<HTMLTableCellElement, React.TdHTMLAttributes<HTMLTableCellElement>>(\n  ({ className, ...props }, ref) => (\n    <td\n      ref={ref}\n      className={cn(\"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\", className)}\n      {...props}\n    />\n  ),\n)\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<HTMLTableCaptionElement, React.HTMLAttributes<HTMLTableCaptionElement>>(\n  ({ className, ...props }, ref) => (\n    <caption ref={ref} className={cn(\"mt-4 text-sm text-muted-foreground\", className)} {...props} />\n  ),\n)\nTableCaption.displayName = \"TableCaption\"\n\nexport { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption }\n```\n\n## File: dkl-microapp-2-main/components/ui/tabs.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className,\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className,\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className,\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n```\n\n## File: dkl-microapp-2-main/components/ui/textarea.tsx\n```typescript\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n```\n\n## File: dkl-microapp-2-main/components/ui/toast.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className,\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive: \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> & VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return <ToastPrimitives.Root ref={ref} className={cn(toastVariants({ variant }), className)} {...props} />\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className,\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className,\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title ref={ref} className={cn(\"text-sm font-semibold\", className)} {...props} />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description ref={ref} className={cn(\"text-sm opacity-90\", className)} {...props} />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/toaster.tsx\n```typescript\n\"use client\"\n\nimport { Toast, ToastClose, ToastDescription, ToastProvider, ToastTitle, ToastViewport } from \"@/components/ui/toast\"\nimport { useToast } from \"@/hooks/use-toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(({ id, title, description, action, ...props }) => (\n        <Toast key={id} {...props}>\n          <div className=\"grid gap-1\">\n            {title && <ToastTitle>{title}</ToastTitle>}\n            {description && <ToastDescription>{description}</ToastDescription>}\n          </div>\n          {action}\n          <ToastClose />\n        </Toast>\n      ))}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/ui/toggle.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n```\n\n## File: dkl-microapp-2-main/components/builder-assignment-dialog.tsx\n```typescript\n\"use client\"\n\nimport * as React from \"react\"\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\"\nimport { Button } from \"@/components/ui/button\"\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport type { Database } from \"@/types/supabase\"\nimport { ChevronsUpDown, Check } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\ntype Builder = Database[\"public\"][\"Tables\"][\"builders\"][\"Row\"]\n\ninterface BuilderAssignmentDialogProps {\n  open: boolean\n  onOpenChange: (open: boolean) => void\n  selectedPropertyIds: string[]\n  onAssignmentComplete: () => void\n}\n\nexport function BuilderAssignmentDialog({\n  open,\n  onOpenChange,\n  selectedPropertyIds,\n  onAssignmentComplete,\n}: BuilderAssignmentDialogProps) {\n  const [builders, setBuilders] = React.useState<Builder[]>([])\n  const [selectedBuilderId, setSelectedBuilderId] = React.useState<string | null>(null)\n  const [isLoadingBuilders, setIsLoadingBuilders] = React.useState(false)\n  const [isAssigning, setIsAssigning] = React.useState(false)\n  const [popoverOpen, setPopoverOpen] = React.useState(false)\n\n  const { toast } = useToast()\n\n  React.useEffect(() => {\n    if (open) {\n      const fetchBuilders = async () => {\n        setIsLoadingBuilders(true)\n        // Fetch only essential fields for the dropdown\n        const { data, error } = await supabase.from(\"builders\").select(\"id, name, company_name\").order(\"name\")\n\n        if (error) {\n          toast({\n            title: \"Error fetching builders\",\n            description: error.message,\n            variant: \"destructive\",\n          })\n          setBuilders([])\n        } else {\n          setBuilders(data || [])\n        }\n        setIsLoadingBuilders(false)\n      }\n      fetchBuilders()\n      setSelectedBuilderId(null) // Reset selected builder when dialog opens\n    }\n  }, [open, toast])\n\n  const handleAssignBuilder = async () => {\n    if (!selectedBuilderId) {\n      toast({\n        title: \"No builder selected\",\n        description: \"Please select a builder to assign.\",\n        variant: \"warning\", // Changed from \"destructive\" to \"warning\" for non-critical user error\n      })\n      return\n    }\n\n    if (!selectedPropertyIds || selectedPropertyIds.length === 0) {\n      toast({\n        title: \"No listings selected\",\n        description: \"No listings were selected to assign the builder to.\", // More user-friendly message\n        variant: \"warning\",\n      })\n      return\n    }\n\n    setIsAssigning(true)\n    const updates = selectedPropertyIds.map((propertyId) => ({\n      id: propertyId, // Ensure this matches the primary key of your listings table\n      builder_id: selectedBuilderId,\n    }))\n\n    // Using .upsert might be safer if you have RLS policies that prevent updates unless certain conditions are met\n    // and you want to ensure the operation goes through. .update is also fine.\n    const { error } = await supabase.from(\"listings\").upsert(updates).select()\n\n    setIsAssigning(false)\n\n    if (error) {\n      toast({\n        title: \"Failed to assign builder\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      })\n    } else {\n      toast({\n        title: \"Builder assigned successfully\",\n        description: `Assigned builder to ${selectedPropertyIds.length} listing(s).`,\n      })\n      onAssignmentComplete() // Callback to refresh data on the parent page\n      onOpenChange(false) // Close the dialog\n    }\n  }\n\n  // Render nothing if the dialog is not open\n  if (!open) {\n    return null\n  }\n\n  return (\n    <AlertDialog open={open} onOpenChange={onOpenChange}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>Assign Builder to Listings</AlertDialogTitle>\n          <AlertDialogDescription>\n            Select a builder to assign to the {selectedPropertyIds.length} selected listing(s).\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n\n        <Popover open={popoverOpen} onOpenChange={setPopoverOpen}>\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"outline\"\n              role=\"combobox\"\n              aria-expanded={popoverOpen}\n              className=\"w-full justify-between\"\n              disabled={isLoadingBuilders || builders.length === 0}\n            >\n              {selectedBuilderId\n                ? (builders.find((builder) => builder.id === selectedBuilderId)?.name ?? \"Select builder...\")\n                : \"Select builder...\"}\n              <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-[--radix-popover-trigger-width] p-0\">\n            <Command>\n              <CommandInput placeholder=\"Search builders...\" />\n              <CommandList>\n                {isLoadingBuilders && <CommandItem disabled>Loading builders...</CommandItem>}\n                {!isLoadingBuilders && builders.length === 0 && <CommandItem disabled>No builders found.</CommandItem>}\n                <CommandEmpty>No builder found.</CommandEmpty>\n                <CommandGroup>\n                  {builders.map((builder) => (\n                    <CommandItem\n                      key={builder.id}\n                      value={builder.name || builder.id} // Ensure value is unique and searchable\n                      onSelect={() => {\n                        setSelectedBuilderId(builder.id)\n                        setPopoverOpen(false)\n                      }}\n                    >\n                      <Check\n                        className={cn(\"mr-2 h-4 w-4\", selectedBuilderId === builder.id ? \"opacity-100\" : \"opacity-0\")}\n                      />\n                      {builder.name} {builder.company_name && `(${builder.company_name})`}\n                    </CommandItem>\n                  ))}\n                </CommandGroup>\n              </CommandList>\n            </Command>\n          </PopoverContent>\n        </Popover>\n\n        <AlertDialogFooter>\n          <AlertDialogCancel disabled={isAssigning}>Cancel</AlertDialogCancel>\n          <AlertDialogAction\n            onClick={handleAssignBuilder}\n            disabled={!selectedBuilderId || isAssigning || isLoadingBuilders || selectedPropertyIds.length === 0}\n          >\n            {isAssigning ? \"Assigning...\" : \"Assign\"}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/builder-form-dialog.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\nimport { useState, useEffect } from \"react\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n  DialogClose,\n} from \"@/components/ui/dialog\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { Save, Loader2 } from \"lucide-react\"\nimport type { Database } from \"@/types/supabase\"\n\ninterface BuilderFormDialogProps {\n  open: boolean\n  onOpenChange: (open: boolean) => void\n  onBuilderCreated: () => void\n  builder?: Partial<Database[\"public\"][\"Tables\"][\"builders\"][\"Row\"]> // For potential edit mode\n}\n\nconst initialFormData = {\n  name: \"\",\n  company_name: \"\",\n  phone: \"\",\n  email: \"\",\n  website: \"\",\n  address: \"\",\n  city: \"\",\n  state: \"\",\n  zip_code: \"\",\n  years_in_business: \"\",\n  total_projects: \"\",\n  active_projects: \"\",\n  price_range_min: \"\",\n  price_range_max: \"\",\n  specialties: \"\", // Stored as comma-separated string in form, converted to array on submit\n  notes: \"\",\n}\n\nexport function BuilderFormDialog({ open, onOpenChange, onBuilderCreated, builder }: BuilderFormDialogProps) {\n  const { toast } = useToast()\n  const [loading, setLoading] = useState(false)\n  const [formData, setFormData] = useState(initialFormData)\n\n  useEffect(() => {\n    if (builder && open) {\n      setFormData({\n        name: builder.name || \"\",\n        company_name: builder.company_name || \"\",\n        phone: builder.phone || \"\",\n        email: builder.email || \"\",\n        website: builder.website || \"\",\n        address: builder.address || \"\",\n        city: builder.city || \"\",\n        state: builder.state || \"\",\n        zip_code: builder.zip_code || \"\",\n        years_in_business: builder.years_in_business?.toString() || \"\",\n        total_projects: builder.total_projects?.toString() || \"\",\n        active_projects: builder.active_projects?.toString() || \"\",\n        price_range_min: builder.price_range_min?.toString() || \"\",\n        price_range_max: builder.price_range_max?.toString() || \"\",\n        specialties: Array.isArray(builder.specialties) ? builder.specialties.join(\", \") : builder.specialties || \"\",\n        notes: builder.notes || \"\",\n      })\n    } else if (!builder && open) {\n      setFormData(initialFormData)\n    }\n  }, [builder, open])\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n\n    try {\n      const builderData = {\n        ...formData,\n        years_in_business: formData.years_in_business ? Number.parseInt(formData.years_in_business) : null,\n        total_projects: formData.total_projects ? Number.parseInt(formData.total_projects) : null,\n        active_projects: formData.active_projects ? Number.parseInt(formData.active_projects) : null,\n        price_range_min: formData.price_range_min ? Number.parseFloat(formData.price_range_min) : null,\n        price_range_max: formData.price_range_max ? Number.parseFloat(formData.price_range_max) : null,\n        specialties: formData.specialties\n          ? formData.specialties\n              .split(\",\")\n              .map((s) => s.trim())\n              .filter(Boolean)\n          : null,\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { id, created_at, updated_at, ...upsertData } = builderData\n\n      const { error } = await supabase\n        .from(\"builders\")\n        .upsert(builder?.id ? { ...upsertData, id: builder.id } : upsertData)\n\n      if (error) throw error\n\n      toast({\n        title: builder?.id ? \"Builder Updated\" : \"Builder Created\",\n        description: `Builder has been successfully ${builder?.id ? \"updated\" : \"added\"}.`,\n      })\n      onBuilderCreated()\n      onOpenChange(false)\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || `Failed to ${builder?.id ? \"update\" : \"create\"} builder.`,\n        variant: \"destructive\",\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[800px] max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>{builder?.id ? \"Edit Builder\" : \"Add New Builder\"}</DialogTitle>\n          <DialogDescription>Fill in the details for the builder. Click save when you're done.</DialogDescription>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"py-4\">\n          <div className=\"grid gap-4 lg:grid-cols-2\">\n            <div className=\"space-y-3 rounded-md border p-4\">\n              <h3 className=\"text-sm font-medium mb-2\">Basic Information</h3>\n              <div>\n                <Label htmlFor=\"name\" className=\"text-xs\">\n                  Builder Name *\n                </Label>\n                <Input\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  className=\"h-8 text-xs\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"company_name\" className=\"text-xs\">\n                  Company Name\n                </Label>\n                <Input\n                  id=\"company_name\"\n                  value={formData.company_name}\n                  onChange={(e) => setFormData({ ...formData, company_name: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"phone\" className=\"text-xs\">\n                  Phone\n                </Label>\n                <Input\n                  id=\"phone\"\n                  value={formData.phone}\n                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"email\" className=\"text-xs\">\n                  Email\n                </Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"website\" className=\"text-xs\">\n                  Website\n                </Label>\n                <Input\n                  id=\"website\"\n                  value={formData.website}\n                  onChange={(e) => setFormData({ ...formData, website: e.target.value })}\n                  className=\"h-8 text-xs\"\n                  placeholder=\"https://\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-3 rounded-md border p-4\">\n              <h3 className=\"text-sm font-medium mb-2\">Address</h3>\n              <div>\n                <Label htmlFor=\"address\" className=\"text-xs\">\n                  Street Address\n                </Label>\n                <Input\n                  id=\"address\"\n                  value={formData.address}\n                  onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"city\" className=\"text-xs\">\n                  City\n                </Label>\n                <Input\n                  id=\"city\"\n                  value={formData.city}\n                  onChange={(e) => setFormData({ ...formData, city: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <Label htmlFor=\"state\" className=\"text-xs\">\n                    State\n                  </Label>\n                  <Input\n                    id=\"state\"\n                    value={formData.state}\n                    onChange={(e) => setFormData({ ...formData, state: e.target.value })}\n                    className=\"h-8 text-xs\"\n                    placeholder=\"VA\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"zip_code\" className=\"text-xs\">\n                    Zip Code\n                  </Label>\n                  <Input\n                    id=\"zip_code\"\n                    value={formData.zip_code}\n                    onChange={(e) => setFormData({ ...formData, zip_code: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-3 rounded-md border p-4\">\n              <h3 className=\"text-sm font-medium mb-2\">Business Details</h3>\n              <div>\n                <Label htmlFor=\"years_in_business\" className=\"text-xs\">\n                  Years in Business\n                </Label>\n                <Input\n                  id=\"years_in_business\"\n                  type=\"number\"\n                  value={formData.years_in_business}\n                  onChange={(e) => setFormData({ ...formData, years_in_business: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <Label htmlFor=\"total_projects\" className=\"text-xs\">\n                    Total Projects\n                  </Label>\n                  <Input\n                    id=\"total_projects\"\n                    type=\"number\"\n                    value={formData.total_projects}\n                    onChange={(e) => setFormData({ ...formData, total_projects: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"active_projects\" className=\"text-xs\">\n                    Active Projects\n                  </Label>\n                  <Input\n                    id=\"active_projects\"\n                    type=\"number\"\n                    value={formData.active_projects}\n                    onChange={(e) => setFormData({ ...formData, active_projects: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <Label htmlFor=\"price_range_min\" className=\"text-xs\">\n                    Min Price Range\n                  </Label>\n                  <Input\n                    id=\"price_range_min\"\n                    type=\"number\"\n                    value={formData.price_range_min}\n                    onChange={(e) => setFormData({ ...formData, price_range_min: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"price_range_max\" className=\"text-xs\">\n                    Max Price Range\n                  </Label>\n                  <Input\n                    id=\"price_range_max\"\n                    type=\"number\"\n                    value={formData.price_range_max}\n                    onChange={(e) => setFormData({ ...formData, price_range_max: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-3 rounded-md border p-4\">\n              <h3 className=\"text-sm font-medium mb-2\">Additional Information</h3>\n              <div>\n                <Label htmlFor=\"specialties\" className=\"text-xs\">\n                  Specialties\n                </Label>\n                <Input\n                  id=\"specialties\"\n                  value={formData.specialties}\n                  onChange={(e) => setFormData({ ...formData, specialties: e.target.value })}\n                  className=\"h-8 text-xs\"\n                  placeholder=\"Luxury Homes, Custom Builds (comma separated)\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"notes\" className=\"text-xs\">\n                  Notes\n                </Label>\n                <Textarea\n                  id=\"notes\"\n                  value={formData.notes}\n                  onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                  className=\"text-xs\"\n                  rows={3}\n                />\n              </div>\n            </div>\n          </div>\n          <DialogFooter className=\"pt-6\">\n            <DialogClose asChild>\n              <Button type=\"button\" variant=\"outline\">\n                Cancel\n              </Button>\n            </DialogClose>\n            <Button type=\"submit\" disabled={loading}>\n              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Save className=\"mr-2 h-4 w-4\" />}\n              {builder?.id ? \"Save Changes\" : \"Create Builder\"}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/editable-field.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useEffect, useRef } from \"react\"\nimport { Input } from \"@/components/ui/input\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Button } from \"@/components/ui/button\"\nimport { Check, Edit3, X, Loader2 } from \"lucide-react\"\n\ninterface EditableFieldProps {\n  initialValue: string\n  onSave: (newValue: string) => Promise<void>\n  label: string\n  as?: \"input\" | \"textarea\"\n  inputClassName?: string\n  textClassName?: string\n  placeholder?: string\n}\n\nexport function EditableField({\n  initialValue,\n  onSave,\n  label,\n  as = \"input\",\n  inputClassName = \"\",\n  textClassName = \"\",\n  placeholder = \"Not set\",\n}: EditableFieldProps) {\n  const [isEditing, setIsEditing] = useState(false)\n  const [value, setValue] = useState(initialValue)\n  const [isLoading, setIsLoading] = useState(false)\n  const inputRef = useRef<HTMLInputElement | HTMLTextAreaElement>(null)\n\n  useEffect(() => {\n    setValue(initialValue)\n  }, [initialValue])\n\n  useEffect(() => {\n    if (isEditing && inputRef.current) {\n      inputRef.current.focus()\n      if (as === \"input\" && typeof (inputRef.current as HTMLInputElement).select === \"function\") {\n        ;(inputRef.current as HTMLInputElement).select()\n      }\n    }\n  }, [isEditing, as])\n\n  const handleSave = async () => {\n    if (value === initialValue && !isEditing) {\n      // ensure not to save if not edited or already saved\n      setIsEditing(false)\n      return\n    }\n    if (value === initialValue && isEditing) {\n      // if value is same as initial, just close edit mode\n      setIsEditing(false)\n      return\n    }\n\n    setIsLoading(true)\n    try {\n      await onSave(value)\n      setIsEditing(false) // Close edit mode on successful save\n    } catch (error) {\n      console.error(`Failed to save ${label}:`, error)\n      // Optionally, revert value or show error to user\n      // setValue(initialValue); // Revert to initial value on error\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleCancel = () => {\n    setValue(initialValue)\n    setIsEditing(false)\n  }\n\n  if (isEditing) {\n    return (\n      <div className=\"space-y-1 w-full\">\n        {as === \"input\" ? (\n          <Input\n            ref={inputRef as React.RefObject<HTMLInputElement>}\n            type=\"text\"\n            value={value}\n            onChange={(e) => setValue(e.target.value)}\n            className={`h-8 text-sm ${inputClassName}`}\n            disabled={isLoading}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\" && !e.shiftKey) {\n                e.preventDefault()\n                handleSave()\n              }\n              if (e.key === \"Escape\") handleCancel()\n            }}\n          />\n        ) : (\n          <Textarea\n            ref={inputRef as React.RefObject<HTMLTextAreaElement>}\n            value={value}\n            onChange={(e) => setValue(e.target.value)}\n            className={`text-sm min-h-[60px] ${inputClassName}`}\n            disabled={isLoading}\n            onKeyDown={(e) => {\n              if (e.key === \"Escape\") handleCancel()\n            }}\n          />\n        )}\n        <div className=\"flex items-center space-x-1 pt-1\">\n          <Button\n            variant=\"ghost\"\n            size=\"iconSm\"\n            onClick={handleSave}\n            disabled={isLoading}\n            className=\"h-6 w-6 text-green-600 hover:text-green-700\"\n            aria-label=\"Save change\"\n          >\n            {isLoading ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <Check className=\"h-4 w-4\" />}\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"iconSm\"\n            onClick={handleCancel}\n            disabled={isLoading}\n            className=\"h-6 w-6 text-red-600 hover:text-red-700\"\n            aria-label=\"Cancel change\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div\n      className={`group flex items-center cursor-pointer hover:bg-gray-100/50 dark:hover:bg-gray-800/50 p-1 -m-1 rounded transition-colors w-full ${textClassName}`}\n      onClick={() => setIsEditing(true)}\n      role=\"button\"\n      tabIndex={0}\n      onKeyDown={(e) => {\n        if (e.key === \"Enter\" || e.key === \" \") {\n          e.preventDefault()\n          setIsEditing(true)\n        }\n      }}\n      aria-label={`Edit ${label}`}\n    >\n      <span className={`flex-grow text-sm ${!initialValue && \"text-muted-foreground\"}`}>\n        {initialValue || placeholder}\n      </span>\n      <Edit3 className=\"h-3 w-3 ml-2 text-muted-foreground opacity-0 group-hover:opacity-100 transition-opacity flex-shrink-0\" />\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/field-mapping-sheet.tsx\n```typescript\n\"use client\"\nimport { useState, useEffect } from \"react\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n  SheetDescription,\n  SheetFooter,\n  SheetClose,\n} from \"@/components/ui/sheet\"\nimport { Button } from \"@/components/ui/button\"\nimport { Label } from \"@/components/ui/label\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\nimport { Check, ChevronsUpDown } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport type { ListingFieldDefinition, MappedDbColumn } from \"@/lib/listing-fields\"\n\ninterface FieldMappingSheetProps {\n  isOpen: boolean\n  onClose: () => void\n  csvHeaders: string[]\n  currentMappings: Record<string, MappedDbColumn>\n  onSaveMappings: (mappings: Record<string, MappedDbColumn>) => void\n  availableDbColumns: readonly ListingFieldDefinition[]\n}\n\nconst IGNORE_FIELD_VALUE: MappedDbColumn = \"ignore_field\"\nconst IGNORE_FIELD_LABEL = \"Ignore this field\"\n\nexport function FieldMappingSheet({\n  isOpen,\n  onClose,\n  csvHeaders,\n  currentMappings,\n  onSaveMappings,\n  availableDbColumns,\n}: FieldMappingSheetProps) {\n  const [tempMappings, setTempMappings] = useState<Record<string, MappedDbColumn>>(currentMappings)\n  const [popoverOpenStates, setPopoverOpenStates] = useState<Record<string, boolean>>({})\n\n  useEffect(() => {\n    setTempMappings(currentMappings)\n  }, [isOpen, currentMappings])\n\n  const handleMappingChange = (csvHeader: string, newDbCol: MappedDbColumn) => {\n    setTempMappings((prev) => ({ ...prev, [csvHeader]: newDbCol }))\n    setPopoverOpenStates((prev) => ({ ...prev, [csvHeader]: false }))\n  }\n\n  const handleSave = () => {\n    onSaveMappings(tempMappings)\n    onClose()\n  }\n\n  const getDisplayLabel = (value: MappedDbColumn): string => {\n    if (value === IGNORE_FIELD_VALUE) {\n      return IGNORE_FIELD_LABEL\n    }\n    const foundColumn = availableDbColumns.find((col) => col.value === value)\n    return foundColumn ? `${foundColumn.label} (${foundColumn.value})` : \"Select database field...\"\n  }\n\n  return (\n    <Sheet open={isOpen} onOpenChange={(open) => !open && onClose()}>\n      <SheetContent className=\"sm:max-w-lg w-[90vw] flex flex-col\">\n        <SheetHeader>\n          <SheetTitle>Map CSV Fields to Database Columns</SheetTitle>\n          <SheetDescription>\n            Review and adjust how your CSV fields correspond to the listing database fields. Unmapped fields or fields\n            set to \"Ignore\" will not be imported.\n          </SheetDescription>\n        </SheetHeader>\n        <ScrollArea className=\"flex-grow py-4 pr-2\">\n          <div className=\"space-y-4 pr-4\">\n            {csvHeaders.map((header) => (\n              <div key={header} className=\"grid grid-cols-2 gap-4 items-center\">\n                <Label htmlFor={`map-${header}`} className=\"truncate text-sm font-medium\">\n                  {header}\n                </Label>\n                <Popover\n                  open={popoverOpenStates[header] || false}\n                  onOpenChange={(isOpenState) => setPopoverOpenStates((prev) => ({ ...prev, [header]: isOpenState }))}\n                >\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      role=\"combobox\"\n                      aria-expanded={popoverOpenStates[header] || false}\n                      className=\"w-full justify-between\"\n                      id={`map-${header}`}\n                    >\n                      <span className=\"truncate\">{getDisplayLabel(tempMappings[header] || IGNORE_FIELD_VALUE)}</span>\n                      <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-[--radix-popover-trigger-width] p-0 max-h-[--radix-popover-content-available-height]\">\n                    <Command>\n                      <CommandInput placeholder=\"Search field...\" />\n                      <CommandEmpty>No field found.</CommandEmpty>\n                      <CommandList>\n                        <CommandGroup>\n                          <CommandItem\n                            key={IGNORE_FIELD_VALUE}\n                            value={IGNORE_FIELD_VALUE}\n                            onSelect={() => handleMappingChange(header, IGNORE_FIELD_VALUE)}\n                          >\n                            <Check\n                              className={cn(\n                                \"mr-2 h-4 w-4\",\n                                (tempMappings[header] || IGNORE_FIELD_VALUE) === IGNORE_FIELD_VALUE\n                                  ? \"opacity-100\"\n                                  : \"opacity-0\",\n                              )}\n                            />\n                            {IGNORE_FIELD_LABEL}\n                          </CommandItem>\n                          {availableDbColumns.map((col) => {\n                            const isOptionSelectedByCurrentHeader = tempMappings[header] === col.value\n                            const isOptionTakenByAnotherHeader = Object.entries(tempMappings).some(\n                              ([otherCsvHeader, mappedDbCol]) =>\n                                otherCsvHeader !== header &&\n                                mappedDbCol === col.value &&\n                                mappedDbCol !== \"ignore_field\",\n                            )\n                            return (\n                              <CommandItem\n                                key={col.value}\n                                value={col.value}\n                                onSelect={() => {\n                                  if (!(isOptionTakenByAnotherHeader && !isOptionSelectedByCurrentHeader)) {\n                                    handleMappingChange(header, col.value as MappedDbColumn)\n                                  }\n                                }}\n                                disabled={isOptionTakenByAnotherHeader && !isOptionSelectedByCurrentHeader}\n                                className={cn(\n                                  isOptionTakenByAnotherHeader &&\n                                    !isOptionSelectedByCurrentHeader &&\n                                    \"opacity-50 cursor-not-allowed\",\n                                )}\n                              >\n                                <Check\n                                  className={cn(\n                                    \"mr-2 h-4 w-4\",\n                                    isOptionSelectedByCurrentHeader ? \"opacity-100\" : \"opacity-0\",\n                                  )}\n                                />\n                                {col.label} ({col.value})\n                                {isOptionTakenByAnotherHeader && !isOptionSelectedByCurrentHeader && (\n                                  <span className=\"ml-auto text-xs text-muted-foreground\">(In use)</span>\n                                )}\n                              </CommandItem>\n                            )\n                          })}\n                        </CommandGroup>\n                      </CommandList>\n                    </Command>\n                  </PopoverContent>\n                </Popover>\n              </div>\n            ))}\n          </div>\n        </ScrollArea>\n        <SheetFooter className=\"mt-auto pt-4 border-t\">\n          <SheetClose asChild>\n            <Button variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n          </SheetClose>\n          <Button onClick={handleSave}>Save Mappings</Button>\n        </SheetFooter>\n      </SheetContent>\n    </Sheet>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/header.tsx\n```typescript\n\"use client\"\n\nimport { UserNav } from \"@/components/user-nav\"\nimport { Input } from \"@/components/ui/input\"\nimport { Search } from \"lucide-react\"\n\nexport function Header() {\n  return (\n    <header className=\"sticky top-0 z-50 flex h-12 items-center justify-between border-b bg-background px-4\">\n      <div className=\"flex items-center gap-x-4\">\n        <div className=\"text-sm font-semibold\">Real Estate Market Analysis</div>\n      </div>\n      <div className=\"flex items-center gap-x-4\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\n          <Input type=\"search\" placeholder=\"Search...\" className=\"w-64 rounded-md pl-8 attio-input\" />\n        </div>\n        <UserNav />\n      </div>\n    </header>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/listing-form-dialog.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\nimport { useState, useEffect } from \"react\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n  DialogClose,\n} from \"@/components/ui/dialog\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { Save, Loader2 } from \"lucide-react\"\nimport type { Database } from \"@/types/supabase\"\n\ntype Builder = Database[\"public\"][\"Tables\"][\"builders\"][\"Row\"]\ntype Listing = Database[\"public\"][\"Tables\"][\"listings\"][\"Row\"] // Changed from Property\n\ninterface ListingFormDialogProps {\n  open: boolean\n  onOpenChange: (open: boolean) => void\n  onListingCreated: () => void // Renamed from onPropertyCreated\n  listing?: Partial<Listing> // Changed from Property\n}\n\nconst initialFormData = {\n  mls_number: \"\",\n  status: \"Active\",\n  list_price: \"\",\n  street_number: \"\",\n  street_name: \"\",\n  city: \"\",\n  state: \"\",\n  zip_code: \"\",\n  bedrooms: \"\",\n  baths_full: \"\",\n  baths_half: \"\",\n  interior_sqft: \"\",\n  new_construction: false,\n  builder_id: \"\",\n  property_condition: \"\",\n  garage_spaces: \"\",\n  fireplace: false,\n  central_air: false,\n  basement: false,\n  // Add any other relevant fields from your 'listings' table\n}\n\nexport function ListingFormDialog({ open, onOpenChange, onListingCreated, listing }: ListingFormDialogProps) {\n  // Renamed component\n  const { toast } = useToast()\n  const [builders, setBuilders] = useState<Builder[]>([])\n  const [loading, setLoading] = useState(false)\n  const [formData, setFormData] = useState(initialFormData)\n\n  useEffect(() => {\n    fetchBuilders()\n  }, [])\n\n  useEffect(() => {\n    if (listing && open) {\n      setFormData({\n        mls_number: listing.mls_number || \"\",\n        status: listing.status || \"Active\",\n        list_price: listing.list_price?.toString() || \"\",\n        street_number: listing.street_number || \"\",\n        street_name: listing.street_name || \"\",\n        city: listing.city || \"\",\n        state: listing.state || \"\",\n        zip_code: listing.zip_code || \"\",\n        bedrooms: listing.bedrooms?.toString() || \"\",\n        baths_full: listing.baths_full?.toString() || \"\",\n        baths_half: listing.baths_half?.toString() || \"\",\n        interior_sqft: listing.interior_sqft?.toString() || \"\",\n        new_construction: listing.new_construction || false,\n        builder_id: listing.builder_id || \"\",\n        property_condition: listing.property_condition || \"\",\n        garage_spaces: listing.garage_spaces?.toString() || \"\",\n        fireplace: listing.fireplace || false,\n        central_air: listing.central_air || false,\n        basement: listing.basement || false,\n        // Map other fields from listing to formData as needed\n      })\n    } else if (!listing && open) {\n      setFormData(initialFormData)\n    }\n  }, [listing, open])\n\n  async function fetchBuilders() {\n    try {\n      const { data } = await supabase.from(\"builders\").select(\"id, name, company_name\").order(\"name\")\n      setBuilders(data || [])\n    } catch (error) {\n      console.error(\"Error fetching builders:\", error)\n      toast({ title: \"Error\", description: \"Could not fetch builders.\", variant: \"destructive\" })\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n\n    try {\n      const listingData = {\n        // Renamed from propertyData\n        ...formData,\n        list_price: formData.list_price ? Number.parseFloat(formData.list_price) : null,\n        bedrooms: formData.bedrooms ? Number.parseInt(formData.bedrooms) : null,\n        baths_full: formData.baths_full ? Number.parseInt(formData.baths_full) : null,\n        baths_half: formData.baths_half ? Number.parseInt(formData.baths_half) : null,\n        interior_sqft: formData.interior_sqft ? Number.parseInt(formData.interior_sqft) : null,\n        garage_spaces: formData.garage_spaces ? Number.parseInt(formData.garage_spaces) : null,\n        builder_id: formData.builder_id || null,\n        list_date: listing?.list_date || new Date().toISOString().split(\"T\")[0],\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { id, created_at, updated_at, ...upsertData } = listingData as Partial<Listing> & {\n        id?: string\n        created_at?: string\n        updated_at?: string\n      }\n\n      const { error } = await supabase\n        .from(\"listings\") // Changed from \"properties\"\n        .upsert(listing?.id ? { ...upsertData, id: listing.id } : upsertData)\n\n      if (error) throw error\n\n      toast({\n        title: listing?.id ? \"Listing Updated\" : \"Listing Created\",\n        description: `Listing has been successfully ${listing?.id ? \"updated\" : \"added\"}.`,\n      })\n      onListingCreated() // Call the renamed prop\n      onOpenChange(false)\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || `Failed to ${listing?.id ? \"update\" : \"create\"} listing.`,\n        variant: \"destructive\",\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[800px] max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>{listing?.id ? \"Edit Listing\" : \"Add New Listing\"}</DialogTitle>\n          <DialogDescription>Fill in the details for the listing. Click save when you're done.</DialogDescription>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"py-4\">\n          <div className=\"grid gap-4 lg:grid-cols-2\">\n            <div className=\"space-y-3 rounded-md border p-4\">\n              <h3 className=\"text-sm font-medium mb-2\">Basic Information</h3>\n              <div>\n                <Label htmlFor=\"mls_number\" className=\"text-xs\">\n                  MLS Number *\n                </Label>\n                <Input\n                  id=\"mls_number\"\n                  value={formData.mls_number}\n                  onChange={(e) => setFormData({ ...formData, mls_number: e.target.value })}\n                  className=\"h-8 text-xs\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"status\" className=\"text-xs\">\n                  Status\n                </Label>\n                <Select value={formData.status} onValueChange={(value) => setFormData({ ...formData, status: value })}>\n                  <SelectTrigger className=\"h-8 text-xs\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Active\">Active</SelectItem>\n                    <SelectItem value=\"Pending\">Pending</SelectItem>\n                    <SelectItem value=\"Under Contract\">Under Contract</SelectItem>\n                    <SelectItem value=\"Sold\">Sold</SelectItem>\n                    <SelectItem value=\"Coming Soon\">Coming Soon</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"list_price\" className=\"text-xs\">\n                  List Price\n                </Label>\n                <Input\n                  id=\"list_price\"\n                  type=\"number\"\n                  value={formData.list_price}\n                  onChange={(e) => setFormData({ ...formData, list_price: e.target.value })}\n                  className=\"h-8 text-xs\"\n                  placeholder=\"0\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"builder_id\" className=\"text-xs\">\n                  Builder\n                </Label>\n                <Select\n                  value={formData.builder_id}\n                  onValueChange={(value) =>\n                    setFormData({ ...formData, builder_id: value === \"no_builder\" ? \"\" : value })\n                  }\n                >\n                  <SelectTrigger className=\"h-8 text-xs\">\n                    <SelectValue placeholder=\"Select builder\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"no_builder\">No builder</SelectItem>\n                    {builders.map((b) => (\n                      <SelectItem key={b.id} value={b.id}>\n                        {b.name} {b.company_name && `(${b.company_name})`}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"space-y-3 rounded-md border p-4\">\n              <h3 className=\"text-sm font-medium mb-2\">Address</h3>\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <Label htmlFor=\"street_number\" className=\"text-xs\">\n                    Street Number\n                  </Label>\n                  <Input\n                    id=\"street_number\"\n                    value={formData.street_number}\n                    onChange={(e) => setFormData({ ...formData, street_number: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"street_name\" className=\"text-xs\">\n                    Street Name\n                  </Label>\n                  <Input\n                    id=\"street_name\"\n                    value={formData.street_name}\n                    onChange={(e) => setFormData({ ...formData, street_name: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"city\" className=\"text-xs\">\n                  City\n                </Label>\n                <Input\n                  id=\"city\"\n                  value={formData.city}\n                  onChange={(e) => setFormData({ ...formData, city: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <Label htmlFor=\"state\" className=\"text-xs\">\n                    State\n                  </Label>\n                  <Input\n                    id=\"state\"\n                    value={formData.state}\n                    onChange={(e) => setFormData({ ...formData, state: e.target.value })}\n                    className=\"h-8 text-xs\"\n                    placeholder=\"VA\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"zip_code\" className=\"text-xs\">\n                    Zip Code\n                  </Label>\n                  <Input\n                    id=\"zip_code\"\n                    value={formData.zip_code}\n                    onChange={(e) => setFormData({ ...formData, zip_code: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-3 rounded-md border p-4\">\n              <h3 className=\"text-sm font-medium mb-2\">Listing Details</h3> {/* Changed from Property Details */}\n              <div className=\"grid grid-cols-3 gap-2\">\n                <div>\n                  <Label htmlFor=\"bedrooms\" className=\"text-xs\">\n                    Bedrooms\n                  </Label>\n                  <Input\n                    id=\"bedrooms\"\n                    type=\"number\"\n                    value={formData.bedrooms}\n                    onChange={(e) => setFormData({ ...formData, bedrooms: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"baths_full\" className=\"text-xs\">\n                    Full Baths\n                  </Label>\n                  <Input\n                    id=\"baths_full\"\n                    type=\"number\"\n                    value={formData.baths_full}\n                    onChange={(e) => setFormData({ ...formData, baths_full: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"baths_half\" className=\"text-xs\">\n                    Half Baths\n                  </Label>\n                  <Input\n                    id=\"baths_half\"\n                    type=\"number\"\n                    value={formData.baths_half}\n                    onChange={(e) => setFormData({ ...formData, baths_half: e.target.value })}\n                    className=\"h-8 text-xs\"\n                  />\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"interior_sqft\" className=\"text-xs\">\n                  Square Feet\n                </Label>\n                <Input\n                  id=\"interior_sqft\"\n                  type=\"number\"\n                  value={formData.interior_sqft}\n                  onChange={(e) => setFormData({ ...formData, interior_sqft: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"garage_spaces\" className=\"text-xs\">\n                  Garage Spaces\n                </Label>\n                <Input\n                  id=\"garage_spaces\"\n                  type=\"number\"\n                  value={formData.garage_spaces}\n                  onChange={(e) => setFormData({ ...formData, garage_spaces: e.target.value })}\n                  className=\"h-8 text-xs\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-3 rounded-md border p-4\">\n              <h3 className=\"text-sm font-medium mb-2\">Features</h3>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"new_construction\"\n                  checked={formData.new_construction}\n                  onCheckedChange={(checked) => setFormData({ ...formData, new_construction: !!checked })}\n                />\n                <Label htmlFor=\"new_construction\" className=\"text-xs font-normal\">\n                  New Construction\n                </Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"fireplace\"\n                  checked={formData.fireplace}\n                  onCheckedChange={(checked) => setFormData({ ...formData, fireplace: !!checked })}\n                />\n                <Label htmlFor=\"fireplace\" className=\"text-xs font-normal\">\n                  Fireplace\n                </Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"central_air\"\n                  checked={formData.central_air}\n                  onCheckedChange={(checked) => setFormData({ ...formData, central_air: !!checked })}\n                />\n                <Label htmlFor=\"central_air\" className=\"text-xs font-normal\">\n                  Central Air\n                </Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"basement\"\n                  checked={formData.basement}\n                  onCheckedChange={(checked) => setFormData({ ...formData, basement: !!checked })}\n                />\n                <Label htmlFor=\"basement\" className=\"text-xs font-normal\">\n                  Basement\n                </Label>\n              </div>\n            </div>\n          </div>\n          <DialogFooter className=\"pt-6\">\n            <DialogClose asChild>\n              <Button type=\"button\" variant=\"outline\">\n                Cancel\n              </Button>\n            </DialogClose>\n            <Button type=\"submit\" disabled={loading}>\n              {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Save className=\"mr-2 h-4 w-4\" />}\n              {listing?.id ? \"Save Changes\" : \"Create Listing\"}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/main-nav.tsx\n```typescript\n\"use client\"\n\nimport Link from \"next/link\"\nimport { usePathname } from \"next/navigation\"\nimport { cn } from \"@/lib/utils\"\nimport {\n  BarChart3,\n  Building2,\n  Home,\n  Settings,\n  Upload,\n  Users,\n  TrendingUp,\n  FileText,\n  Share2,\n  Palette,\n} from \"lucide-react\"\n\nconst navItems = [\n  {\n    name: \"Dashboard\",\n    href: \"/dashboard\",\n    icon: Home,\n  },\n  {\n    name: \"Listings\",\n    href: \"/listings\",\n    icon: Building2,\n  },\n  {\n    name: \"Builders\",\n    href: \"/builders\",\n    icon: Users,\n  },\n  {\n    name: \"Social Posts\",\n    href: \"/social\",\n    icon: Share2,\n  },\n  {\n    name: \"Market Insights\",\n    href: \"/insights\",\n    icon: TrendingUp,\n  },\n  {\n    name: \"Reports\",\n    href: \"/reports\",\n    icon: FileText,\n  },\n  {\n    name: \"Analytics\",\n    href: \"/analytics\",\n    icon: BarChart3,\n  },\n  {\n    name: \"Data Import\",\n    href: \"/import\",\n    icon: Upload,\n  },\n  // This is the new item\n  {\n    name: \"Style Guide\",\n    href: \"/style-guide\",\n    icon: Palette,\n  },\n  {\n    name: \"Settings\",\n    href: \"/settings\",\n    icon: Settings,\n  },\n]\n\nexport function MainNav() {\n  const pathname = usePathname()\n\n  return (\n    <nav className=\"flex flex-col space-y-1\">\n      {navItems.map((item) => {\n        const isActive = pathname === item.href || pathname?.startsWith(`${item.href}/`)\n        const Icon = item.icon\n\n        return (\n          <Link\n            key={item.href}\n            href={item.href}\n            className={cn(\n              \"flex items-center gap-x-2 rounded-md px-3 py-2 text-xs font-medium\",\n              isActive ? \"bg-primary/10 text-primary\" : \"text-muted-foreground hover:bg-muted hover:text-foreground\",\n            )}\n          >\n            <Icon className=\"h-4 w-4\" />\n            <span>{item.name}</span>\n          </Link>\n        )\n      })}\n    </nav>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/mapbox-map.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\nimport { useEffect, useRef, useState } from \"react\"\nimport mapboxgl, { type Map } from \"mapbox-gl\" // ES6 import\nimport { Loader2, AlertTriangle } from \"lucide-react\"\n\n// Update the MappableProperty interface to include additional fields for the popup\nexport interface MappableListing {\n  id: string\n  address_line_1: string | null\n  city: string | null\n  state: string | null\n  latitude?: number | null\n  longitude?: number | null\n  status?: string | null\n  list_price?: number | null\n  builder_name?: string | null\n  [key: string]: any // Allow other listing fields\n}\n\ninterface MapboxMapProps {\n  userApiKey: string | null // API key from user settings\n  properties: MappableListing[]\n  initialViewState?: {\n    longitude: number\n    latitude: number\n    zoom: number\n  }\n  className?: string\n}\n\nconst FALLBACK_MAPBOX_TOKEN = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN\n\n// Update the MapboxMap component to use a flat projection, limit to DC area, and add popups\nconst MapboxMap: React.FC<MapboxMapProps> = ({ userApiKey, properties, initialViewState, className }) => {\n  const mapContainer = useRef<HTMLDivElement | null>(null)\n  const map = useRef<Map | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [currentMarkers, setCurrentMarkers] = useState<mapboxgl.Marker[]>([])\n  const [currentPopups, setCurrentPopups] = useState<mapboxgl.Popup[]>([])\n\n  const effectiveApiKey = userApiKey || FALLBACK_MAPBOX_TOKEN\n\n  // Washington DC coordinates\n  const DC_CENTER = [-77.0369, 38.9072]\n  const DC_BOUNDS = [\n    [-77.4369, 38.5072], // Southwest coordinates (roughly 20 miles from center)\n    [-76.6369, 39.3072], // Northeast coordinates (roughly 20 miles from center)\n  ]\n\n  // Get color based on listing status\n  const getStatusColor = (status: string | null): string => {\n    switch (status?.toLowerCase()) {\n      case \"active\":\n        return \"#10b981\" // green\n      case \"pending\":\n        return \"#f59e0b\" // yellow/amber\n      case \"sold\":\n        return \"#3b82f6\" // blue\n      case \"under contract\":\n        return \"#8b5cf6\" // purple\n      case \"coming soon\":\n        return \"#f97316\" // orange\n      default:\n        return \"#6b7280\" // gray\n    }\n  }\n\n  // Format price for popup\n  const formatPrice = (price: number | null | undefined): string => {\n    if (price == null) return \"Price not available\"\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n      maximumFractionDigits: 0,\n    }).format(price)\n  }\n\n  useEffect(() => {\n    if (!effectiveApiKey) {\n      setError(\"Mapbox Access Token is not configured. Please set it in settings or as an environment variable.\")\n      setIsLoading(false)\n      return\n    }\n\n    if (!mapContainer.current) {\n      setError(\"Map container not found.\")\n      setIsLoading(false)\n      return\n    }\n\n    if (map.current) return // Initialize map only once\n\n    mapboxgl.accessToken = effectiveApiKey\n\n    try {\n      map.current = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: \"mapbox://styles/mapbox/light-v11\", // Minimalist style\n        center: DC_CENTER, // Center on Washington DC\n        zoom: 10, // Default zoom level\n        maxBounds: DC_BOUNDS, // Restrict panning to DC area\n        minZoom: 9, // Restrict zooming out too far\n      })\n\n      map.current.addControl(new mapboxgl.NavigationControl(), \"top-right\")\n\n      map.current.on(\"load\", () => {\n        setIsLoading(false)\n      })\n\n      map.current.on(\"error\", (e) => {\n        console.error(\"Mapbox GL error:\", e.error?.message || e)\n        setError(`Mapbox error: ${e.error?.message || \"Unknown map error\"}`)\n        setIsLoading(false)\n      })\n    } catch (e: any) {\n      console.error(\"Failed to initialize Mapbox map:\", e)\n      setError(`Failed to initialize map: ${e.message}`)\n      setIsLoading(false)\n    }\n\n    return () => {\n      map.current?.remove()\n      map.current = null\n    }\n  }, [effectiveApiKey])\n\n  useEffect(() => {\n    // Guard: If map instance doesn't exist or is still in its initial loading phase.\n    if (!map.current || isLoading) {\n      // It's too early to do anything with markers.\n      // If there were old markers and the map is re-initializing or properties cleared,\n      // ensure markers are cleared.\n      if (currentMarkers.length > 0) {\n        currentMarkers.forEach((marker) => marker.remove())\n        setCurrentMarkers([])\n      }\n\n      // Also clear any popups\n      if (currentPopups.length > 0) {\n        currentPopups.forEach((popup) => popup.remove())\n        setCurrentPopups([])\n      }\n      return\n    }\n\n    // At this point, map.current exists and isLoading is false (map has loaded).\n\n    // Clear all previously added markers and popups from the map.\n    currentMarkers.forEach((marker) => marker.remove())\n    currentPopups.forEach((popup) => popup.remove())\n\n    if (!properties || properties.length === 0) {\n      setCurrentMarkers([])\n      setCurrentPopups([])\n      return\n    }\n\n    const geocodePromises: Promise<mapboxgl.Marker | null>[] = []\n    const newMarkersFromLatLon: mapboxgl.Marker[] = []\n    const newPopups: mapboxgl.Popup[] = []\n    const bounds = new mapboxgl.LngLatBounds()\n\n    properties.forEach((listing) => {\n      if (listing.latitude && listing.longitude) {\n        // Create popup for this listing\n        const popup = new mapboxgl.Popup({ offset: 25, closeButton: false }).setHTML(`\n            <div class=\"p-2\">\n              <p class=\"font-medium\">${listing.address_line_1 || \"\"}, ${listing.city || \"\"}, ${listing.state || \"\"}</p>\n              <p class=\"text-sm text-gray-600\">Status: <span class=\"font-medium\">${listing.status || \"N/A\"}</span></p>\n              <p class=\"text-sm text-gray-600\">Builder: <span class=\"font-medium\">${listing.builder_name || \"N/A\"}</span></p>\n              <p class=\"text-sm text-gray-600\">Price: <span class=\"font-medium\">${formatPrice(listing.list_price)}</span></p>\n            </div>\n          `)\n\n        newPopups.push(popup)\n\n        // Create a custom marker element\n        const el = document.createElement(\"div\")\n        el.className = \"custom-marker\"\n        el.style.backgroundColor = getStatusColor(listing.status)\n        el.style.width = \"12px\"\n        el.style.height = \"12px\"\n        el.style.borderRadius = \"50%\"\n        el.style.border = \"2px solid white\"\n        el.style.boxShadow = \"0 0 2px rgba(0,0,0,0.3)\"\n\n        // Create the marker\n        const marker = new mapboxgl.Marker(el).setLngLat([listing.longitude, listing.latitude]).setPopup(popup) // Attach popup to marker\n\n        newMarkersFromLatLon.push(marker)\n        bounds.extend([listing.longitude, listing.latitude])\n      } else if (listing.address_line_1 && listing.city && listing.state && effectiveApiKey) {\n        const query = `${listing.address_line_1}, ${listing.city}, ${listing.state}`\n        const geocodeUrl = `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(\n          query,\n        )}.json?access_token=${effectiveApiKey}&limit=1`\n\n        geocodePromises.push(\n          fetch(geocodeUrl)\n            .then((response) => response.json())\n            .then((data) => {\n              if (data.features && data.features.length > 0) {\n                const [lng, lat] = data.features[0].center\n\n                // Create popup for this listing\n                const popup = new mapboxgl.Popup({ offset: 25, closeButton: false }).setHTML(`\n                    <div class=\"p-2\">\n                      <p class=\"font-medium\">${listing.address_line_1 || \"\"}, ${listing.city || \"\"}, ${listing.state || \"\"}</p>\n                      <p class=\"text-sm text-gray-600\">Status: <span class=\"font-medium\">${listing.status || \"N/A\"}</span></p>\n                      <p class=\"text-sm text-gray-600\">Builder: <span class=\"font-medium\">${listing.builder_name || \"N/A\"}</span></p>\n                      <p class=\"text-sm text-gray-600\">Price: <span class=\"font-medium\">${formatPrice(listing.list_price)}</span></p>\n                    </div>\n                  `)\n\n                newPopups.push(popup)\n\n                // Create a custom marker element\n                const el = document.createElement(\"div\")\n                el.className = \"custom-marker\"\n                el.style.backgroundColor = getStatusColor(listing.status)\n                el.style.width = \"12px\"\n                el.style.height = \"12px\"\n                el.style.borderRadius = \"50%\"\n                el.style.border = \"2px solid white\"\n                el.style.boxShadow = \"0 0 2px rgba(0,0,0,0.3)\"\n\n                // Create the marker\n                const marker = new mapboxgl.Marker(el).setLngLat([lng, lat]).setPopup(popup) // Attach popup to marker\n\n                bounds.extend([lng, lat])\n                return marker\n              }\n              console.warn(`Geocoding failed for: ${query}`)\n              return null\n            })\n            .catch((err) => {\n              console.error(`Geocoding error for ${query}:`, err)\n              return null\n            }),\n        )\n      }\n    })\n\n    Promise.all(geocodePromises).then((resolvedGeocodedMarkers) => {\n      const allMarkersToAdd: mapboxgl.Marker[] = [...newMarkersFromLatLon]\n      const validGeocodedMarkers = resolvedGeocodedMarkers.filter(Boolean) as mapboxgl.Marker[]\n      allMarkersToAdd.push(...validGeocodedMarkers)\n\n      if (map.current && allMarkersToAdd.length > 0) {\n        allMarkersToAdd.forEach((marker) => marker.addTo(map.current!))\n\n        // Only fit bounds if we have markers and they're within our DC area\n        if (!bounds.isEmpty()) {\n          // Ensure we don't zoom out beyond our restricted area\n          map.current.fitBounds(bounds, {\n            padding: 50,\n            maxZoom: 15,\n            duration: 1000,\n            // Ensure we don't go beyond our DC bounds\n            bounds: DC_BOUNDS,\n          })\n        }\n      }\n\n      setCurrentMarkers(allMarkersToAdd)\n      setCurrentPopups(newPopups)\n    })\n  }, [properties, effectiveApiKey, isLoading])\n\n  return (\n    <div className={`relative w-full h-full min-h-[300px] ${className || \"\"}`}>\n      <div ref={mapContainer} className=\"absolute top-0 bottom-0 w-full h-full\" />\n      {isLoading && (\n        <div className=\"absolute inset-0 flex items-center justify-center bg-white/50 backdrop-blur-sm z-10\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n          <p className=\"ml-2\">Loading map...</p>\n        </div>\n      )}\n      {!isLoading && error && (\n        <div className=\"absolute inset-0 flex flex-col items-center justify-center bg-red-50 p-4 z-10\">\n          <AlertTriangle className=\"h-8 w-8 text-red-500 mb-2\" />\n          <p className=\"text-red-700 text-center text-sm\">{error}</p>\n          {error.includes(\"Access Token\") && (\n            <p className=\"text-xs text-red-600 mt-1 text-center\">\n              Please verify your Mapbox Access Token in Settings &gt; Integrations.\n            </p>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default MapboxMap\n```\n\n## File: dkl-microapp-2-main/components/pill-input.tsx\n```typescript\n\"use client\"\n\nimport { useState, type KeyboardEvent } from \"react\"\nimport { Input } from \"@/components/ui/input\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { XIcon } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\ninterface PillInputProps {\n  value: string[]\n  onChange: (newValue: string[]) => void\n  placeholder?: string\n  className?: string\n  maxPills?: number\n}\n\nexport function PillInput({ value = [], onChange, placeholder = \"Add item...\", className, maxPills }: PillInputProps) {\n  const [inputValue, setInputValue] = useState(\"\")\n\n  const handleAddPill = () => {\n    const newPill = inputValue.trim()\n    if (newPill && !value.includes(newPill) && (!maxPills || value.length < maxPills)) {\n      onChange([...value, newPill])\n      setInputValue(\"\")\n    }\n  }\n\n  const handleRemovePill = (pillToRemove: string) => {\n    onChange(value.filter((pill) => pill !== pillToRemove))\n  }\n\n  const handleKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      event.preventDefault()\n      handleAddPill()\n    } else if (event.key === \"Backspace\" && inputValue === \"\" && value.length > 0) {\n      handleRemovePill(value[value.length - 1])\n    }\n  }\n\n  return (\n    <div className={cn(\"space-y-2\", className)}>\n      <div className=\"flex flex-wrap gap-2 mb-2\">\n        {value.map((pill) => (\n          <Badge key={pill} variant=\"secondary\" className=\"flex items-center gap-1\">\n            {pill}\n            <button\n              type=\"button\"\n              onClick={() => handleRemovePill(pill)}\n              className=\"rounded-full hover:bg-muted-foreground/20 p-0.5\"\n              aria-label={`Remove ${pill}`}\n            >\n              <XIcon className=\"h-3 w-3\" />\n            </button>\n          </Badge>\n        ))}\n      </div>\n      {(!maxPills || value.length < maxPills) && (\n        <div className=\"flex gap-2\">\n          <Input\n            type=\"text\"\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={handleKeyDown}\n            placeholder={placeholder}\n            className=\"attio-input flex-grow\"\n          />\n          <Button type=\"button\" onClick={handleAddPill} variant=\"outline\" size=\"sm\">\n            Add\n          </Button>\n        </div>\n      )}\n      {maxPills && value.length >= maxPills && (\n        <p className=\"text-xs text-muted-foreground\">Maximum number of items reached.</p>\n      )}\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/sidebar.tsx\n```typescript\nimport { MainNav } from \"@/components/main-nav\"\n\nexport function Sidebar() {\n  return (\n    <aside className=\"fixed inset-y-0 left-0 z-40 hidden w-48 flex-col border-r bg-background md:flex\">\n      <div className=\"flex h-12 items-center border-b px-4\">\n        <div className=\"flex items-center gap-x-2\">\n          <div className=\"h-6 w-6 rounded-md bg-primary\" />\n          <span className=\"text-sm font-semibold\">RE Market</span>\n        </div>\n      </div>\n      <div className=\"flex-1 overflow-auto py-4 px-3\">\n        <MainNav />\n      </div>\n    </aside>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/social-post-property-item.tsx\n```typescript\n\"use client\"\n\nimport { useState, useEffect, type ChangeEvent } from \"react\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport type { Database } from \"@/types/supabase\"\nimport { Button } from \"@/components/ui/button\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { Input } from \"@/components/ui/input\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { toast } from \"@/hooks/use-toast\"\nimport { ChevronDown, ChevronUp, Plus, XIcon, ImageIcon, AlertTriangle, Loader2, Wand2 } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\"\nimport { Label } from \"@/components/ui/label\"\nimport { generateDescriptionWithAI } from \"@/app/actions/ai-actions\"\n\ntype SocialPostProperty = Database[\"public\"][\"Tables\"][\"social_post_properties\"][\"Row\"] & {\n  properties: Database[\"public\"][\"Tables\"][\"listings\"][\"Row\"] | null\n}\n\ninterface SocialPostPropertyItemProps {\n  item: SocialPostProperty\n  postId: string\n  onUpdate: (updatedItem: Partial<SocialPostProperty>) => void\n}\n\nconst formatCurrency = (amount: number | null) => {\n  if (amount === null || amount === undefined) return \"N/A\"\n  return new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(amount)\n}\n\nconst IMAGE_BUCKET_NAME = \"social-post-images\"\n\nexport function SocialPostPropertyItem({ item, postId, onUpdate }: SocialPostPropertyItemProps) {\n  const [isExpanded, setIsExpanded] = useState(true) // Default to expanded\n  const [contacted, setContacted] = useState(item.contacted_complete)\n  const [imageComplete, setImageComplete] = useState(item.image_complete)\n  const [descriptionComplete, setDescriptionComplete] = useState(item.description_complete)\n\n  const [propertyDescription, setPropertyDescription] = useState(item.description || \"\")\n  const [imageUrls, setImageUrls] = useState<string[]>(item.image_urls || [])\n  const [isUploading, setIsUploading] = useState(false)\n  const [isSavingDesc, setIsSavingDesc] = useState(false)\n\n  const [showPromptDialog, setShowPromptDialog] = useState(false)\n  const [aiPrompt, setAiPrompt] = useState(\"\")\n  const [isGenerating, setIsGenerating] = useState(false)\n\n  const property = item.properties\n\n  useEffect(() => {\n    setContacted(item.contacted_complete)\n    setImageComplete(item.image_complete)\n    setDescriptionComplete(item.description_complete)\n    setPropertyDescription(item.description || \"\")\n    setImageUrls(item.image_urls || [])\n  }, [item])\n\n  const handleCheckboxChange = async (\n    field: \"contacted_complete\" | \"image_complete\" | \"description_complete\",\n    value: boolean,\n  ) => {\n    if (!item.id) return\n    const { error } = await supabase\n      .from(\"social_post_properties\")\n      .update({ [field]: value })\n      .eq(\"id\", item.id)\n\n    if (error) {\n      toast({ title: \"Error updating status\", description: error.message, variant: \"destructive\" })\n    } else {\n      if (field === \"contacted_complete\") setContacted(value)\n      if (field === \"image_complete\") setImageComplete(value)\n      if (field === \"description_complete\") setDescriptionComplete(value)\n      onUpdate({ id: item.id, [field]: value })\n    }\n  }\n\n  const handlePropertyDescriptionSave = async (descriptionToSave?: string) => {\n    if (!item.id) return\n    const currentDesc = descriptionToSave !== undefined ? descriptionToSave : propertyDescription\n    setIsSavingDesc(true)\n    try {\n      const { error } = await supabase\n        .from(\"social_post_properties\")\n        .update({ description: currentDesc })\n        .eq(\"id\", item.id)\n\n      if (error) {\n        toast({ title: \"Error saving description\", description: error.message, variant: \"destructive\" })\n      } else {\n        toast({ title: \"Description Saved\", description: \"Listing-specific description has been updated.\" })\n        onUpdate({ id: item.id, description: currentDesc })\n        if (descriptionToSave !== undefined) {\n          setPropertyDescription(currentDesc)\n        }\n      }\n    } catch (e: any) {\n      toast({ title: \"Error\", description: e.message || \"Could not save description.\", variant: \"destructive\" })\n    } finally {\n      setIsSavingDesc(false)\n    }\n  }\n\n  const handleImageUpload = async (event: ChangeEvent<HTMLInputElement>) => {\n    if (!event.target.files || event.target.files.length === 0) return\n    const file = event.target.files[0]\n    if (!item.id || !property?.id) return\n\n    setIsUploading(true)\n    const filePath = `${postId}/${item.id}/${Date.now()}-${file.name}`\n\n    try {\n      const { error: uploadError } = await supabase.storage.from(IMAGE_BUCKET_NAME).upload(filePath, file)\n      if (uploadError) throw uploadError\n\n      const { data: publicUrlData } = supabase.storage.from(IMAGE_BUCKET_NAME).getPublicUrl(filePath)\n      if (!publicUrlData?.publicUrl) throw new Error(\"Failed to get public URL for uploaded image.\")\n\n      const newImageUrls = [...imageUrls, publicUrlData.publicUrl]\n      setImageUrls(newImageUrls)\n\n      const { error: dbError } = await supabase\n        .from(\"social_post_properties\")\n        .update({ image_urls: newImageUrls })\n        .eq(\"id\", item.id)\n      if (dbError) throw dbError\n\n      toast({ title: \"Image Uploaded\", description: \"New image added successfully.\" })\n      onUpdate({ id: item.id, image_urls: newImageUrls })\n    } catch (error: any) {\n      console.error(\"Image upload error:\", error)\n      toast({ title: \"Upload Failed\", description: error.message || \"Could not upload image.\", variant: \"destructive\" })\n    } finally {\n      setIsUploading(false)\n      if (event.target) event.target.value = \"\"\n    }\n  }\n\n  const handleImageDelete = async (imageUrlToDelete: string) => {\n    if (!item.id) return\n    const bucketBaseUrl = `${supabase.storage.url}/object/public/${IMAGE_BUCKET_NAME}/`\n    const filePath = imageUrlToDelete.replace(bucketBaseUrl, \"\")\n\n    try {\n      const { error: deleteError } = await supabase.storage.from(IMAGE_BUCKET_NAME).remove([filePath])\n      if (deleteError) throw deleteError\n\n      const newImageUrls = imageUrls.filter((url) => url !== imageUrlToDelete)\n      setImageUrls(newImageUrls)\n\n      const { error: dbError } = await supabase\n        .from(\"social_post_properties\")\n        .update({ image_urls: newImageUrls })\n        .eq(\"id\", item.id)\n      if (dbError) throw dbError\n\n      toast({ title: \"Image Deleted\", description: \"Image removed successfully.\" })\n      onUpdate({ id: item.id, image_urls: newImageUrls })\n    } catch (error: any) {\n      console.error(\"Image delete error:\", error)\n      toast({ title: \"Delete Failed\", description: error.message || \"Could not delete image.\", variant: \"destructive\" })\n    }\n  }\n\n  const handleAiRewrite = async () => {\n    if (!propertyDescription.trim()) {\n      toast({ title: \"Nothing to rewrite\", description: \"Description is empty.\", variant: \"default\" })\n      return\n    }\n    console.log(\"Client: Starting AI Rewrite for description:\", propertyDescription.substring(0, 100) + \"...\")\n    setIsGenerating(true)\n    try {\n      const result = await generateDescriptionWithAI(\"rewrite\", propertyDescription)\n      console.log(\"Client: AI Rewrite result:\", result)\n\n      if (result.error) {\n        toast({ title: \"AI Rewrite Failed\", description: result.error, variant: \"destructive\" })\n      } else if (result.generatedText !== null) {\n        // Check for null explicitly\n        setPropertyDescription(result.generatedText)\n        toast({ title: \"Text Rewritten\", description: \"Description updated with AI suggestion. Save to persist.\" })\n      } else {\n        toast({\n          title: \"AI Rewrite\",\n          description: \"No text was generated or an unknown issue occurred.\",\n          variant: \"default\",\n        })\n      }\n    } catch (e: any) {\n      console.error(\"Client: AI Rewrite caught error:\", e)\n      toast({\n        title: \"AI Rewrite Error\",\n        description: e.message || \"An unexpected error occurred.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsGenerating(false)\n      console.log(\"Client: AI Rewrite finished.\")\n    }\n  }\n\n  const handleAiPromptSubmit = async () => {\n    if (!aiPrompt.trim()) {\n      toast({ title: \"Prompt is empty\", description: \"Please enter a prompt.\", variant: \"default\" })\n      return\n    }\n    console.log(\n      \"Client: Starting AI Prompt with prompt:\",\n      aiPrompt,\n      \"and context:\",\n      propertyDescription.substring(0, 100) + \"...\",\n    )\n    setIsGenerating(true)\n    setShowPromptDialog(false)\n    try {\n      const result = await generateDescriptionWithAI(\"prompt\", aiPrompt, propertyDescription)\n      console.log(\"Client: AI Prompt result:\", result)\n\n      if (result.error) {\n        toast({ title: \"AI Generation Failed\", description: result.error, variant: \"destructive\" })\n      } else if (result.generatedText !== null) {\n        // Check for null explicitly\n        setPropertyDescription(result.generatedText)\n        toast({ title: \"Text Generated\", description: \"Description updated with AI suggestion. Save to persist.\" })\n      } else {\n        toast({\n          title: \"AI Generation\",\n          description: \"No text was generated or an unknown issue occurred.\",\n          variant: \"default\",\n        })\n      }\n    } catch (e: any) {\n      console.error(\"Client: AI Prompt caught error:\", e)\n      toast({\n        title: \"AI Generation Error\",\n        description: e.message || \"An unexpected error occurred.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setAiPrompt(\"\")\n      setIsGenerating(false)\n      console.log(\"Client: AI Prompt finished.\")\n    }\n  }\n\n  if (!property) {\n    return (\n      <div className=\"p-3 border rounded-md bg-red-50 dark:bg-red-900/30 border-red-200 dark:border-red-700 text-red-700 dark:text-red-400 flex items-center\">\n        <AlertTriangle className=\"h-5 w-5 mr-2 flex-shrink-0\" />\n        Listing data missing for this item (ID: {item.property_id}).\n      </div>\n    )\n  }\n\n  const fullAddress = [\n    property.street_number,\n    property.street_direction,\n    property.street_name,\n    property.unit_number ? `#${property.unit_number}` : null,\n    property.city,\n    property.state,\n    property.zip_code,\n  ]\n    .filter(Boolean)\n    .join(\" \")\n    .replace(/\\s+/g, \" \")\n    .trim()\n\n  return (\n    <div className=\"border border-gray-200 dark:border-gray-700 rounded-md bg-white dark:bg-gray-800/30 shadow-sm\">\n      <div className=\"p-3 flex flex-col sm:flex-row justify-between items-start sm:items-center\">\n        <div className=\"flex-grow mb-2 sm:mb-0 pr-2\">\n          <p\n            className=\"text-[11px] text-muted-foreground mb-0.5 truncate\"\n            title={fullAddress || \"Address not available\"}\n          >\n            {fullAddress || \"Address not available\"}\n          </p>\n          <p className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">MLS: {property.mls_number || \"N/A\"}</p>\n          <div className=\"flex space-x-4 mt-1\">\n            <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n              Price: <span className=\"font-normal\">{formatCurrency(property.list_price)}</span>\n            </p>\n            <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n              Status: <span className=\"font-normal\">{property.status || \"N/A\"}</span>\n            </p>\n          </div>\n        </div>\n\n        <div className=\"flex flex-col items-center space-y-1.5 sm:space-y-0 sm:flex-row sm:space-x-3 mx-auto sm:mx-0 my-2 sm:my-0 px-2\">\n          {[\n            {\n              label: \"Contacted\",\n              state: contacted,\n              setter: (val: boolean) => handleCheckboxChange(\"contacted_complete\", val),\n            },\n            {\n              label: \"Image\",\n              state: imageComplete,\n              setter: (val: boolean) => handleCheckboxChange(\"image_complete\", val),\n            },\n            {\n              label: \"Desc.\",\n              state: descriptionComplete,\n              setter: (val: boolean) => handleCheckboxChange(\"description_complete\", val),\n            },\n          ].map((cb) => (\n            <div key={cb.label} className=\"flex flex-col items-center\">\n              <label className=\"text-[10px] text-gray-500 dark:text-gray-400 mb-0.5\">{cb.label}</label>\n              <Checkbox\n                checked={cb.state}\n                onCheckedChange={cb.setter}\n                className=\"rounded-[3px] data-[state=checked]:bg-blueishGreen-500 data-[state=checked]:border-blueishGreen-500 border-gray-400 dark:border-gray-500\"\n              />\n            </div>\n          ))}\n        </div>\n\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => setIsExpanded(!isExpanded)}\n          className=\"ml-auto sm:ml-2 p-1.5 self-start sm:self-center flex-shrink-0\"\n          aria-label={isExpanded ? \"Collapse property details\" : \"Expand property details\"}\n        >\n          {isExpanded ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n        </Button>\n      </div>\n\n      {isExpanded && (\n        <div className=\"p-3 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800/50\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-grow md:w-[60%] space-y-2\">\n              <label htmlFor={`prop-desc-${item.id}`} className=\"text-xs font-medium text-gray-700 dark:text-gray-300\">\n                Property-Specific Description\n              </label>\n              <Textarea\n                id={`prop-desc-${item.id}`}\n                value={propertyDescription}\n                onChange={(e) => setPropertyDescription(e.target.value)}\n                placeholder=\"Enter description for this property in the context of this social post...\"\n                className=\"min-h-[100px] text-sm bg-white dark:bg-gray-700/50\"\n              />\n              <div className=\"flex items-center justify-between mt-1\">\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button variant=\"ghost\" size=\"sm\" className=\"text-muted-foreground hover:text-primary px-2 py-1\">\n                      <Wand2 className=\"h-4 w-4 mr-1\" /> AI Tools\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-48 p-1\">\n                    <Button\n                      variant=\"ghost\"\n                      className=\"w-full justify-start text-sm font-normal px-2 py-1.5 h-auto\"\n                      onClick={handleAiRewrite}\n                      disabled={isGenerating || !propertyDescription.trim()}\n                    >\n                      {isGenerating && <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />} Rewrite\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      className=\"w-full justify-start text-sm font-normal px-2 py-1.5 h-auto\"\n                      onClick={() => setShowPromptDialog(true)}\n                      disabled={isGenerating}\n                    >\n                      {isGenerating && <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />} Prompt...\n                    </Button>\n                  </PopoverContent>\n                </Popover>\n                <Button\n                  size=\"sm\"\n                  onClick={() => handlePropertyDescriptionSave()}\n                  disabled={isSavingDesc || isGenerating}\n                  className=\"text-xs\"\n                >\n                  {isSavingDesc ? <Loader2 className=\"mr-1 h-3 w-3 animate-spin\" /> : null}\n                  Save Description\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"flex-grow md:w-[40%] space-y-2\">\n              <label className=\"text-xs font-medium text-gray-700 dark:text-gray-300\">Images</label>\n              <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-2 mb-2\">\n                {imageUrls.map((url) => (\n                  <div key={url} className=\"relative group aspect-square bg-gray-100 dark:bg-gray-700 rounded\">\n                    <img\n                      src={url || \"/placeholder.svg?width=100&height=100&query=property\"}\n                      alt=\"Listing image\"\n                      className=\"object-cover w-full h-full rounded\"\n                      onError={(e) => (e.currentTarget.src = \"/placeholder.svg?width=100&height=100\")}\n                    />\n                    <Button\n                      variant=\"destructive\"\n                      size=\"iconSm\"\n                      className=\"absolute top-1 right-1 h-5 w-5 p-0 opacity-0 group-hover:opacity-100 focus:opacity-100\"\n                      onClick={() => handleImageDelete(url)}\n                      aria-label=\"Delete image\"\n                    >\n                      <XIcon className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                ))}\n                <label\n                  htmlFor={`img-upload-${item.id}`}\n                  className={cn(\n                    \"aspect-square flex flex-col items-center justify-center border-2 border-dashed border-gray-300 dark:border-gray-600 rounded cursor-pointer hover:border-blueishGreen-500 dark:hover:border-blueishGreen-400 transition-colors\",\n                    isUploading && \"opacity-50 cursor-not-allowed\",\n                  )}\n                >\n                  {isUploading ? (\n                    <Loader2 className=\"h-6 w-6 animate-spin text-blueishGreen-500\" />\n                  ) : (\n                    <>\n                      <Plus className=\"h-6 w-6 text-gray-400 dark:text-gray-500\" />\n                      <span className=\"text-[10px] text-muted-foreground mt-1\">Add Image</span>\n                    </>\n                  )}\n                  <Input\n                    id={`img-upload-${item.id}`}\n                    type=\"file\"\n                    className=\"hidden\"\n                    onChange={handleImageUpload}\n                    accept=\"image/png, image/jpeg, image/gif, image/webp\"\n                    disabled={isUploading}\n                  />\n                </label>\n              </div>\n              {imageUrls.length === 0 && !isUploading && (\n                <div className=\"text-center py-4 text-xs text-muted-foreground\">\n                  <ImageIcon className=\"mx-auto h-8 w-8 mb-1 text-gray-400 dark:text-gray-500\" />\n                  No images added yet.\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n      <Dialog open={showPromptDialog} onOpenChange={setShowPromptDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Generate with AI Prompt</DialogTitle>\n          </DialogHeader>\n          <div className=\"py-4 space-y-2\">\n            <Label htmlFor=\"ai-prompt-input\">Your Prompt</Label>\n            <Textarea\n              id=\"ai-prompt-input\"\n              value={aiPrompt}\n              onChange={(e) => setAiPrompt(e.target.value)}\n              placeholder=\"e.g., Write a catchy description focusing on the new kitchen...\"\n              className=\"min-h-[80px]\"\n            />\n            {propertyDescription && (\n              <p className=\"text-xs text-muted-foreground\">\n                Current description will be used as context if relevant to your prompt.\n              </p>\n            )}\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowPromptDialog(false)} disabled={isGenerating}>\n              Cancel\n            </Button>\n            <Button onClick={handleAiPromptSubmit} disabled={isGenerating || !aiPrompt.trim()}>\n              {isGenerating && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              Generate\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/components/theme-provider.tsx\n```typescript\n'use client'\n\nimport * as React from 'react'\nimport {\n  ThemeProvider as NextThemesProvider,\n  type ThemeProviderProps,\n} from 'next-themes'\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n```\n\n## File: dkl-microapp-2-main/components/user-nav.tsx\n```typescript\n\"use client\"\n\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { LogOut, Settings, User } from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport function UserNav() {\n  const { user, signOut } = useAuth()\n\n  if (!user) return null\n\n  const initials = user.email ? user.email.substring(0, 2).toUpperCase() : \"U\"\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n          <Avatar className=\"h-8 w-8\">\n            <AvatarFallback className=\"text-xs\">{initials}</AvatarFallback>\n          </Avatar>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n        <DropdownMenuLabel className=\"font-normal\">\n          <div className=\"flex flex-col space-y-1\">\n            <p className=\"text-sm font-medium leading-none\">{user.email}</p>\n            <p className=\"text-xs leading-none text-muted-foreground\">{user.id.substring(0, 8)}</p>\n          </div>\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuGroup>\n          <DropdownMenuItem asChild>\n            <Link href=\"/profile\">\n              <User className=\"mr-2 h-4 w-4\" />\n              <span>Profile</span>\n            </Link>\n          </DropdownMenuItem>\n          <DropdownMenuItem asChild>\n            <Link href=\"/settings\">\n              <Settings className=\"mr-2 h-4 w-4\" />\n              <span>Settings</span>\n            </Link>\n          </DropdownMenuItem>\n        </DropdownMenuGroup>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem onClick={() => signOut()}>\n          <LogOut className=\"mr-2 h-4 w-4\" />\n          <span>Log out</span>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n```\n\n## File: dkl-microapp-2-main/contexts/auth-context.tsx\n```typescript\n\"use client\"\n\nimport type React from \"react\"\n\nimport { createContext, useContext, useEffect, useState } from \"react\"\nimport type { User, Session } from \"@supabase/supabase-js\"\nimport { supabase } from \"@/lib/supabase/client\"\nimport { useRouter } from \"next/navigation\"\n\ninterface AuthContextType {\n  user: User | null\n  session: Session | null\n  loading: boolean\n  signIn: (email: string, password: string) => Promise<void>\n  signUp: (email: string, password: string) => Promise<void>\n  signOut: () => Promise<void>\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null)\n  const [session, setSession] = useState<Session | null>(null)\n  const [loading, setLoading] = useState(true)\n  const router = useRouter()\n\n  useEffect(() => {\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      setSession(session)\n      setUser(session?.user ?? null)\n      setLoading(false)\n\n      if (event === \"SIGNED_OUT\") {\n        router.push(\"/login\")\n      }\n    })\n\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session)\n      setUser(session?.user ?? null)\n      setLoading(false)\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [router])\n\n  const signIn = async (email: string, password: string) => {\n    const { error } = await supabase.auth.signInWithPassword({ email, password })\n    if (error) throw error\n    router.push(\"/dashboard\")\n  }\n\n  const signUp = async (email: string, password: string) => {\n    const { error } = await supabase.auth.signUp({ email, password })\n    if (error) throw error\n  }\n\n  const signOut = async () => {\n    const { error } = await supabase.auth.signOut()\n    if (error) throw error\n  }\n\n  return (\n    <AuthContext.Provider value={{ user, session, loading, signIn, signUp, signOut }}>{children}</AuthContext.Provider>\n  )\n}\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\")\n  }\n  return context\n}\n```\n\n## File: dkl-microapp-2-main/hooks/use-toast.ts\n```typescript\n\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type { ToastActionElement, ToastProps } from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 5\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_VALUE\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) => (t.id === action.toast.id ? { ...t, ...action.toast } : t)),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n```\n\n## File: dkl-microapp-2-main/lib/supabase/client.ts\n```typescript\nimport { createClient } from \"@supabase/supabase-js\"\nimport type { Database } from \"@/types/supabase\"\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\nif (!supabaseUrl) {\n  console.error(\"Supabase URL is not defined. Please check your NEXT_PUBLIC_SUPABASE_URL environment variable.\")\n  // throw new Error(\"Supabase URL is not defined.\"); // Optionally throw to halt execution\n}\n\nif (!supabaseAnonKey) {\n  console.error(\n    \"Supabase Anon Key is not defined. Please check your NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable.\",\n  )\n  // throw new Error(\"Supabase Anon Key is not defined.\"); // Optionally throw\n}\n\n// The export should only happen if the keys are defined, or handle the error gracefully.\n// For Next.js, we'll proceed with the export, relying on the console errors for debugging.\nexport const supabase = createClient<Database>(supabaseUrl!, supabaseAnonKey!)\n```\n\n## File: dkl-microapp-2-main/lib/supabase/server.ts\n```typescript\nimport { createClient } from \"@supabase/supabase-js\"\nimport { cookies } from \"next/headers\"\nimport type { Database } from \"@/types/supabase\"\n\nexport async function createServerClient() {\n  const cookieStore = cookies()\n\n  return createClient<Database>(process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!, {\n    cookies: {\n      get(name: string) {\n        return cookieStore.get(name)?.value\n      },\n    },\n  })\n}\n```\n\n## File: dkl-microapp-2-main/lib/builder-fields.ts\n```typescript\nimport type { Database } from \"@/types/supabase\"\n\ntype BuilderRowKeys = keyof Database[\"public\"][\"Tables\"][\"builders\"][\"Row\"]\n\nexport interface BuilderFieldDefinition {\n  value: BuilderRowKeys\n  label: string\n  typeHint: \"string\" | \"number\" | \"boolean\" | \"date\" | \"array_string\" | \"json\"\n}\n\nexport const builderTableColumns: readonly BuilderFieldDefinition[] = [\n  { value: \"name\", label: \"Builder Name\", typeHint: \"string\" },\n  { value: \"company_name\", label: \"Company Name\", typeHint: \"string\" },\n  { value: \"phone\", label: \"Phone\", typeHint: \"string\" },\n  { value: \"email\", label: \"Email\", typeHint: \"string\" },\n  { value: \"website\", label: \"Website\", typeHint: \"string\" },\n  { value: \"address\", label: \"Address\", typeHint: \"string\" },\n  { value: \"city\", label: \"City\", typeHint: \"string\" },\n  { value: \"state\", label: \"State\", typeHint: \"string\" },\n  { value: \"zip_code\", label: \"Zip Code\", typeHint: \"string\" },\n  { value: \"years_in_business\", label: \"Years In Business\", typeHint: \"number\" },\n  { value: \"total_projects\", label: \"Total Projects\", typeHint: \"number\" },\n  { value: \"active_projects\", label: \"Active Projects\", typeHint: \"number\" },\n  { value: \"specialties\", label: \"Specialties\", typeHint: \"array_string\" },\n  { value: \"price_range_min\", label: \"Price Range Min\", typeHint: \"number\" },\n  { value: \"price_range_max\", label: \"Price Range Max\", typeHint: \"number\" },\n  { value: \"rating\", label: \"Rating\", typeHint: \"number\" },\n  { value: \"notes\", label: \"Notes\", typeHint: \"string\" },\n  { value: \"metadata\", label: \"Metadata\", typeHint: \"json\" },\n] as const\n\nexport type MappedBuilderDbColumn = BuilderFieldDefinition[\"value\"] | \"ignore_field\"\n```\n\n## File: dkl-microapp-2-main/lib/color-utils.ts\n```typescript\n/**\n * Converts a HEX color value to HSL. Conversion formula\n * adapted from https://stackoverflow.com/a/9493060.\n * Assumes hex is a valid color string.\n * @param   {string}  hex       The hex color to convert\n * @returns {string | null}     The HSL representation \"H S% L%\" or null on error\n */\nexport function hexToHsl(hex: string): string | null {\n  let r = 0,\n    g = 0,\n    b = 0\n  // 3 digits\n  if (hex.length == 4) {\n    r = Number.parseInt(hex[1] + hex[1], 16)\n    g = Number.parseInt(hex[2] + hex[2], 16)\n    b = Number.parseInt(hex[3] + hex[3], 16)\n  }\n  // 6 digits\n  else if (hex.length == 7) {\n    r = Number.parseInt(hex.substring(1, 3), 16)\n    g = Number.parseInt(hex.substring(3, 5), 16)\n    b = Number.parseInt(hex.substring(5, 7), 16)\n  } else {\n    return null // Invalid hex format\n  }\n\n  r /= 255\n  g /= 255\n  b /= 255\n  const max = Math.max(r, g, b)\n  const min = Math.min(r, g, b)\n  let h = 0,\n    s = 0,\n    l = (max + min) / 2\n\n  if (max == min) {\n    h = s = 0 // achromatic\n  } else {\n    const d = max - min\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min)\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0)\n        break\n      case g:\n        h = (b - r) / d + 2\n        break\n      case b:\n        h = (r - g) / d + 4\n        break\n    }\n    h /= 6\n  }\n\n  h = Math.round(h * 360)\n  s = Math.round(s * 100)\n  l = Math.round(l * 100)\n\n  return `${h} ${s}% ${l}%`\n}\n\n/**\n * Converts an HSL color value to HEX. Conversion formula\n * adapted from https://stackoverflow.com/a/9493060.\n * Assumes h, s, and l are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   {string}  hsl       The HSL color \"H S% L%\"\n * @returns {string | null}     The HEX representation or null on error\n */\nexport function hslToHex(hsl: string): string | null {\n  const hslMatch = hsl.match(/(\\d+)\\s+(\\d+)%\\s+(\\d+)%/)\n  if (!hslMatch) return null\n\n  let h = Number.parseInt(hslMatch[1])\n  let s = Number.parseInt(hslMatch[2])\n  let l = Number.parseInt(hslMatch[3])\n\n  h /= 360\n  s /= 100\n  l /= 100\n\n  let r, g, b\n  if (s == 0) {\n    r = g = b = l // achromatic\n  } else {\n    const hue2rgb = (p: number, q: number, t: number) => {\n      if (t < 0) t += 1\n      if (t > 1) t -= 1\n      if (t < 1 / 6) return p + (q - p) * 6 * t\n      if (t < 1 / 2) return q\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6\n      return p\n    }\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s\n    const p = 2 * l - q\n    r = hue2rgb(p, q, h + 1 / 3)\n    g = hue2rgb(p, q, h)\n    b = hue2rgb(p, q, h - 1 / 3)\n  }\n\n  const toHex = (x: number) => {\n    const hex = Math.round(x * 255).toString(16)\n    return hex.length == 1 ? \"0\" + hex : hex\n  }\n\n  return `#${toHex(r)}${toHex(g)}${toHex(b)}`\n}\n```\n\n## File: dkl-microapp-2-main/lib/listing-fields.ts\n```typescript\nimport type { Database } from \"@/types/supabase\"\n\n// Extracting keys from a specific table's Row type\ntype ListingRowKeys = keyof Database[\"public\"][\"Tables\"][\"listings\"][\"Row\"]\n\n// Define a structure for our mapping options\nexport interface ListingFieldDefinition {\n  value: ListingRowKeys\n  label: string\n  typeHint: \"string\" | \"number\" | \"boolean\" | \"date\" | \"array_string\" | \"json\" // Add more as needed\n}\n\n// Manually define user-friendly labels and type hints for each listing column\nexport const listingTableColumns: ListingFieldDefinition[] = [\n  { value: \"mls_number\", label: \"MLS Number\", typeHint: \"string\" },\n  { value: \"status\", label: \"Status\", typeHint: \"string\" },\n  { value: \"type\", label: \"Type\", typeHint: \"string\" },\n  { value: \"dom\", label: \"DOM (Days on Market)\", typeHint: \"number\" },\n  { value: \"cdom\", label: \"CDOM (Cumulative Days on Market)\", typeHint: \"number\" },\n  { value: \"list_date\", label: \"List Date\", typeHint: \"date\" },\n  { value: \"off_market_date\", label: \"Off Market Date\", typeHint: \"date\" },\n  { value: \"settled_date\", label: \"Settled Date\", typeHint: \"date\" },\n  { value: \"original_price\", label: \"Original Price\", typeHint: \"number\" },\n  { value: \"list_price\", label: \"List Price\", typeHint: \"number\" },\n  { value: \"sold_price\", label: \"Sold Price\", typeHint: \"number\" },\n  { value: \"city\", label: \"City\", typeHint: \"string\" },\n  { value: \"state\", label: \"State\", typeHint: \"string\" },\n  { value: \"zip_code\", label: \"Zip Code\", typeHint: \"string\" },\n  { value: \"county\", label: \"County\", typeHint: \"string\" },\n  { value: \"subdivision\", label: \"Subdivision\", typeHint: \"string\" },\n  { value: \"list_agent_name\", label: \"List Agent Name\", typeHint: \"string\" },\n  { value: \"list_office_name\", label: \"List Office Name\", typeHint: \"string\" },\n  { value: \"acres_total\", label: \"Acres Total\", typeHint: \"number\" },\n  { value: \"land_use_code\", label: \"Land Use Code\", typeHint: \"string\" },\n  { value: \"hoa\", label: \"HOA\", typeHint: \"boolean\" },\n  { value: \"association_fee_frequency\", label: \"Association Fee Frequency\", typeHint: \"string\" },\n  { value: \"property_condition\", label: \"Listing Condition\", typeHint: \"string\" },\n  { value: \"bedrooms\", label: \"Bedrooms\", typeHint: \"number\" },\n  { value: \"baths_full\", label: \"Baths Full\", typeHint: \"number\" },\n  { value: \"baths_half\", label: \"Baths Half\", typeHint: \"number\" },\n  { value: \"style\", label: \"Style\", typeHint: \"string\" },\n  { value: \"basement\", label: \"Basement\", typeHint: \"boolean\" },\n  { value: \"garage_spaces\", label: \"Garage Spaces\", typeHint: \"number\" },\n  { value: \"fireplace\", label: \"Fireplace\", typeHint: \"boolean\" },\n  { value: \"new_construction\", label: \"New Construction (Y/N)\", typeHint: \"boolean\" },\n  { value: \"new_construction_details\", label: \"New Construction Details\", typeHint: \"string\" },\n  { value: \"model_name\", label: \"Model Name\", typeHint: \"string\" },\n  { value: \"builder_id\", label: \"Builder ID\", typeHint: \"string\" },\n  { value: \"metadata\", label: \"Metadata\", typeHint: \"json\" },\n  { value: \"in_social_queue\", label: \"In Social Queue\", typeHint: \"boolean\" },\n  { value: \"owner_name\", label: \"Owner Name\", typeHint: \"string\" },\n  { value: \"construction_completed_yn\", label: \"Construction Completed (Y/N)\", typeHint: \"boolean\" },\n  { value: \"year_built\", label: \"Year Built\", typeHint: \"number\" },\n  { value: \"year_built_source\", label: \"Year Built Source\", typeHint: \"string\" },\n  { value: \"imported_builder_name\", label: \"Imported Builder Name\", typeHint: \"string\" },\n  { value: \"occupant_type\", label: \"Occupant Type\", typeHint: \"string\" },\n  { value: \"occupant_name\", label: \"Occupant Name\", typeHint: \"string\" },\n  { value: \"previous_list_price\", label: \"Previous List Price\", typeHint: \"number\" },\n  { value: \"architect_name\", label: \"Architect Name\", typeHint: \"string\" },\n  { value: \"structure_type\", label: \"Structure Type\", typeHint: \"string\" },\n  { value: \"block_lot\", label: \"Block/Lot\", typeHint: \"string\" },\n  { value: \"remarks_private\", label: \"Remarks - Private\", typeHint: \"string\" },\n  { value: \"remarks_public\", label: \"Remarks - Public\", typeHint: \"string\" },\n  { value: \"year_major_reno_remodel\", label: \"Year Major Reno/Remodel\", typeHint: \"number\" },\n  { value: \"change_info\", label: \"Change Info\", typeHint: \"string\" },\n  { value: \"close_date\", label: \"Close Date\", typeHint: \"date\" },\n  { value: \"close_price\", label: \"Close Price\", typeHint: \"number\" },\n  { value: \"close_sale_type\", label: \"Close Sale Type\", typeHint: \"string\" },\n  { value: \"foundation_details\", label: \"Foundation Details\", typeHint: \"string\" },\n  { value: \"land_assessed_value\", label: \"Land Assessed Value\", typeHint: \"number\" },\n  { value: \"list_picture_url\", label: \"List Picture URL\", typeHint: \"string\" },\n  { value: \"lot_features\", label: \"Lot Features\", typeHint: \"array_string\" },\n  { value: \"lot_size_sqft\", label: \"Lot Size SqFt\", typeHint: \"number\" },\n  { value: \"address_line_1\", label: \"Address Line 1\", typeHint: \"string\" },\n  { value: \"latitude\", label: \"Latitude\", typeHint: \"number\" },\n  { value: \"longitude\", label: \"Longitude\", typeHint: \"number\" },\n  { value: \"last_sold_date\", label: \"Last Sold Date\", typeHint: \"date\" },\n  { value: \"last_sold_price\", label: \"Last Sold Price\", typeHint: \"number\" },\n  { value: \"property_type\", label: \"Listing Type\", typeHint: \"string\" },\n  { value: \"description\", label: \"Description\", typeHint: \"string\" },\n]\n\nexport type MappedDbColumn = ListingFieldDefinition[\"value\"] | \"ignore_field\"\n```\n\n## File: dkl-microapp-2-main/lib/supabase.ts\n```typescript\nimport { createClient } from \"@supabase/supabase-js\"\nimport type { Database } from \"@/types/supabase\"\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n\n// Create a single supabase client for interacting with your database\nexport const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey)\n\n// Server-side client with service role for admin operations\nexport const createServerSupabaseClient = () => {\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\n  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!\n  return createClient<Database>(supabaseUrl, supabaseServiceKey)\n}\n```\n\n## File: dkl-microapp-2-main/lib/utils.ts\n```typescript\nimport { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function formatCurrency(value: number | null | undefined): string {\n  if (value === null || value === undefined) return \"-\"\n  return new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    maximumFractionDigits: 0,\n  }).format(value)\n}\n\nexport function formatNumber(value: number | null | undefined): string {\n  if (value === null || value === undefined) return \"-\"\n  return new Intl.NumberFormat(\"en-US\").format(value)\n}\n\nexport function formatDate(date: string | null | undefined): string {\n  if (!date) return \"-\"\n  try {\n    // Attempt to parse common date formats, including those with slashes or hyphens\n    const parsedDate = new Date(date.replace(/-/g, \"/\"))\n    if (isNaN(parsedDate.getTime())) {\n      // Handle cases where date might be just a year or invalid\n      if (/^\\d{4}$/.test(date)) return date // If it's just a year, return it\n      return \"-\" // Invalid date\n    }\n    return parsedDate.toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    })\n  } catch (error) {\n    console.warn(`Could not parse date: ${date}`, error)\n    return \"-\"\n  }\n}\n\nexport function getFullAddress(listing: any): string {\n  const parts = [\n    listing.street_number,\n    listing.street_direction,\n    listing.street_name,\n    listing.unit_number ? `Unit ${listing.unit_number}` : \"\",\n  ]\n    .filter(Boolean)\n    .join(\" \")\n\n  const cityStateZip = [listing.city, listing.state, listing.zip_code].filter(Boolean).join(\", \")\n\n  return [parts, cityStateZip].filter(Boolean).join(\", \")\n}\n\nexport function getStatusColor(status: string | null): string {\n  switch (status?.toLowerCase()) {\n    case \"active\":\n      return \"bg-green-100 text-green-800\"\n    case \"pending\":\n      return \"bg-yellow-100 text-yellow-800\"\n    case \"sold\":\n      return \"bg-blue-100 text-blue-800\"\n    case \"under contract\":\n      return \"bg-purple-100 text-purple-800\"\n    case \"coming soon\":\n      return \"bg-orange-100 text-orange-800\"\n    default:\n      return \"bg-gray-100 text-gray-800\"\n  }\n}\n\nexport function parseCSVValue(\n  value: string | null | undefined,\n  targetTypeHint?: \"string\" | \"number\" | \"boolean\" | \"date\" | \"array_string\",\n): any {\n  if (value === null || value === undefined || value.trim() === \"\") return null\n\n  // Remove dollar signs and commas for currency/numbers before other parsing\n  const cleanedValue = value.replace(/[$,]/g, \"\")\n\n  if (targetTypeHint === \"array_string\") {\n    return value\n      .split(\",\")\n      .map((item) => item.trim())\n      .filter(Boolean)\n  }\n\n  // Convert Yes/No to boolean\n  if (cleanedValue.toLowerCase() === \"yes\") return true\n  if (cleanedValue.toLowerCase() === \"no\") return false\n\n  // Try to parse as number if it looks like one or hinted\n  if (targetTypeHint === \"number\" || /^-?\\d+(\\.\\d+)?$/.test(cleanedValue)) {\n    const num = Number.parseFloat(cleanedValue)\n    if (!isNaN(num)) {\n      return num\n    }\n  }\n\n  // Try to parse as date if hinted\n  if (targetTypeHint === \"date\") {\n    try {\n      const dateVal = new Date(value.replace(/-/g, \"/\")) // Normalize separators\n      if (!isNaN(dateVal.getTime())) {\n        return dateVal.toISOString()\n      }\n    } catch (e) {\n      /* ignore, will return original string */\n    }\n  }\n\n  // If it's a boolean string \"true\" or \"false\"\n  if (cleanedValue.toLowerCase() === \"true\") return true\n  if (cleanedValue.toLowerCase() === \"false\") return false\n\n  // Default to string\n  return value.trim()\n}\n\nexport function toTitleCase(str: string | null | undefined): string | null {\n  if (!str) return null\n  // Handle cases like \"McKinley\" or \"O'Malley\" by not lowercasing the entire string first.\n  // This regex capitalizes the first letter of each word.\n  // It also handles hyphens by capitalizing the letter after a hyphen.\n  return str\n    .replace(/\\b([a-z'])([a-z']*)\\b|\\b([A-Z'])([A-Z']*)\\b/g, (match, firstLower, restLower, firstUpper, restUpper) => {\n      if (firstLower) {\n        return firstLower.toUpperCase() + (restLower || \"\")\n      }\n      if (firstUpper) {\n        // If it's already mostly uppercase (e.g., an acronym), leave it, unless it's a single char.\n        // Or if it's a mixed case word that starts with uppercase.\n        if ((restUpper && restUpper.match(/[a-z]/)) || !restUpper || restUpper.length === 0) {\n          return firstUpper + (restUpper || \"\")\n        }\n        // If it's all caps and longer than 1 char, convert to title case.\n        if (restUpper && !restUpper.match(/[a-z]/) && (firstUpper + restUpper).length > 1) {\n          return firstUpper + restUpper.toLowerCase()\n        }\n        return firstUpper + (restUpper || \"\")\n      }\n      return match\n    })\n    .replace(/([a-zA-Z])(?:-|_)+([a-zA-Z])/g, (match, p1, p2) => p1 + \"-\" + p2.toUpperCase()) // Capitalize after hyphen\n}\n\n/**\n * Normalizes a CSV header string.\n * - Trims whitespace.\n * - Converts to uppercase.\n * - Replaces sequences of non-alphanumeric characters (excluding underscore) with a single underscore.\n * - Removes leading and trailing underscores.\n * Example: \"  List Price ($)  \" -> \"LIST_PRICE\"\n * Example: \"MLS #\" -> \"MLS_\"\n */\nexport function normalizeHeader(header: string): string {\n  if (!header) return \"\"\n  return header\n    .trim()\n    .toUpperCase()\n    .replace(/[^A-Z0-9_]+/g, \"_\") // Replace one or more non-alphanumeric (A-Z, 0-9) or non-underscore chars with a single underscore\n    .replace(/^_|_$/g, \"\") // Remove leading/trailing underscores\n}\n```\n\n## File: dkl-microapp-2-main/public/placeholder-logo.svg\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"215\" height=\"48\" fill=\"none\"><path fill=\"#000\" d=\"M57.588 9.6h6L73.828 38h-5.2l-2.36-6.88h-11.36L52.548 38h-5.2l10.24-28.4Zm7.16 17.16-4.16-12.16-4.16 12.16h8.32Zm23.694-2.24c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.486-7.72.12 3.4c.534-1.227 1.307-2.173 2.32-2.84 1.04-.693 2.267-1.04 3.68-1.04 1.494 0 2.76.387 3.8 1.16 1.067.747 1.827 1.813 2.28 3.2.507-1.44 1.294-2.52 2.36-3.24 1.094-.747 2.414-1.12 3.96-1.12 1.414 0 2.64.307 3.68.92s1.84 1.52 2.4 2.72c.56 1.2.84 2.667.84 4.4V38h-4.96V25.92c0-1.813-.293-3.187-.88-4.12-.56-.96-1.413-1.44-2.56-1.44-.906 0-1.68.213-2.32.64-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.84-.48 3.04V38h-4.56V25.92c0-1.2-.133-2.213-.4-3.04-.24-.827-.626-1.453-1.16-1.88-.506-.427-1.133-.64-1.88-.64-.906 0-1.68.227-2.32.68-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.827-.48 3V38h-4.96V16.8h4.48Zm26.723 10.6c0-2.24.427-4.187 1.28-5.84.854-1.68 2.067-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.84 0 3.494.413 4.96 1.24 1.467.827 2.64 2.08 3.52 3.76.88 1.653 1.347 3.693 1.4 6.12v1.32h-15.08c.107 1.813.614 3.227 1.52 4.24.907.987 2.134 1.48 3.68 1.48.987 0 1.88-.253 2.68-.76a4.803 4.803 0 0 0 1.84-2.2l5.08.36c-.64 2.027-1.84 3.64-3.6 4.84-1.733 1.173-3.733 1.76-6 1.76-2.08 0-3.906-.453-5.48-1.36-1.573-.907-2.786-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84Zm15.16-2.04c-.213-1.733-.76-3.013-1.64-3.84-.853-.827-1.893-1.24-3.12-1.24-1.44 0-2.6.453-3.48 1.36-.88.88-1.44 2.12-1.68 3.72h9.92ZM163.139 9.6V38h-5.04V9.6h5.04Zm8.322 7.2.24 5.88-.64-.36c.32-2.053 1.094-3.56 2.32-4.52 1.254-.987 2.787-1.48 4.6-1.48 2.32 0 4.107.733 5.36 2.2 1.254 1.44 1.88 3.387 1.88 5.84V38h-4.96V25.92c0-1.253-.12-2.28-.36-3.08-.24-.8-.64-1.413-1.2-1.84-.533-.427-1.253-.64-2.16-.64-1.44 0-2.573.48-3.4 1.44-.8.933-1.2 2.307-1.2 4.12V38h-4.96V16.8h4.48Zm30.003 7.72c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.443 8.16V38h-5.6v-5.32h5.6Z\"/><path fill=\"#171717\" fill-rule=\"evenodd\" d=\"m7.839 40.783 16.03-28.054L20 6 0 40.783h7.839Zm8.214 0H40L27.99 19.894l-4.02 7.032 3.976 6.914H20.02l-3.967 6.943Z\" clip-rule=\"evenodd\"/></svg>\n```\n\n## File: dkl-microapp-2-main/public/placeholder.svg\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1200\" height=\"1200\" fill=\"none\"><rect width=\"1200\" height=\"1200\" fill=\"#EAEAEA\" rx=\"3\"/><g opacity=\".5\"><g opacity=\".5\"><path fill=\"#FAFAFA\" d=\"M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z\"/><path stroke=\"#C9C9C9\" stroke-width=\"2.418\" d=\"M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z\"/></g><path stroke=\"url(#a)\" stroke-width=\"2.418\" d=\"M0-1.209h553.581\" transform=\"scale(1 -1) rotate(45 1163.11 91.165)\"/><path stroke=\"url(#b)\" stroke-width=\"2.418\" d=\"M404.846 598.671h391.726\"/><path stroke=\"url(#c)\" stroke-width=\"2.418\" d=\"M599.5 795.742V404.017\"/><path stroke=\"url(#d)\" stroke-width=\"2.418\" d=\"m795.717 796.597-391.441-391.44\"/><path fill=\"#fff\" d=\"M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z\"/><g clip-path=\"url(#e)\"><path fill=\"#666\" fill-rule=\"evenodd\" d=\"M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z\" clip-rule=\"evenodd\"/></g><path stroke=\"#C9C9C9\" stroke-width=\"2.418\" d=\"M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z\"/></g><defs><linearGradient id=\"a\" x1=\"554.061\" x2=\"-.48\" y1=\".083\" y2=\".087\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#C9C9C9\" stop-opacity=\"0\"/><stop offset=\".208\" stop-color=\"#C9C9C9\"/><stop offset=\".792\" stop-color=\"#C9C9C9\"/><stop offset=\"1\" stop-color=\"#C9C9C9\" stop-opacity=\"0\"/></linearGradient><linearGradient id=\"b\" x1=\"796.912\" x2=\"404.507\" y1=\"599.963\" y2=\"599.965\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#C9C9C9\" stop-opacity=\"0\"/><stop offset=\".208\" stop-color=\"#C9C9C9\"/><stop offset=\".792\" stop-color=\"#C9C9C9\"/><stop offset=\"1\" stop-color=\"#C9C9C9\" stop-opacity=\"0\"/></linearGradient><linearGradient id=\"c\" x1=\"600.792\" x2=\"600.794\" y1=\"403.677\" y2=\"796.082\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#C9C9C9\" stop-opacity=\"0\"/><stop offset=\".208\" stop-color=\"#C9C9C9\"/><stop offset=\".792\" stop-color=\"#C9C9C9\"/><stop offset=\"1\" stop-color=\"#C9C9C9\" stop-opacity=\"0\"/></linearGradient><linearGradient id=\"d\" x1=\"404.85\" x2=\"796.972\" y1=\"403.903\" y2=\"796.02\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#C9C9C9\" stop-opacity=\"0\"/><stop offset=\".208\" stop-color=\"#C9C9C9\"/><stop offset=\".792\" stop-color=\"#C9C9C9\"/><stop offset=\"1\" stop-color=\"#C9C9C9\" stop-opacity=\"0\"/></linearGradient><clipPath id=\"e\"><path fill=\"#fff\" d=\"M581.364 580.535h38.689v38.689h-38.689z\"/></clipPath></defs></svg>\n```\n\n## File: dkl-microapp-2-main/styles/globals.css\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n@layer utilities {\n  .text-balance {\n    text-wrap: balance;\n  }\n}\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 0 0% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 0 0% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 0 0% 3.9%;\n    --primary: 0 0% 9%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 0 0% 96.1%;\n    --secondary-foreground: 0 0% 9%;\n    --muted: 0 0% 96.1%;\n    --muted-foreground: 0 0% 45.1%;\n    --accent: 0 0% 96.1%;\n    --accent-foreground: 0 0% 9%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 89.8%;\n    --input: 0 0% 89.8%;\n    --ring: 0 0% 3.9%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem;\n    --sidebar-background: 0 0% 98%;\n    --sidebar-foreground: 240 5.3% 26.1%;\n    --sidebar-primary: 240 5.9% 10%;\n    --sidebar-primary-foreground: 0 0% 98%;\n    --sidebar-accent: 240 4.8% 95.9%;\n    --sidebar-accent-foreground: 240 5.9% 10%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n  .dark {\n    --background: 0 0% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 0 0% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 0 0% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 0 0% 9%;\n    --secondary: 0 0% 14.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 0 0% 14.9%;\n    --muted-foreground: 0 0% 63.9%;\n    --accent: 0 0% 14.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 14.9%;\n    --input: 0 0% 14.9%;\n    --ring: 0 0% 83.1%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n```\n\n## File: dkl-microapp-2-main/supabase/functions/geocode-properties/index.ts\n```typescript\n// Setup type definitions for built-in Supabase Runtime APIs\nimport \"jsr:@supabase/functions-js/edge-runtime.d.ts\"\nimport { createClient } from \"jsr:@supabase/supabase-js@2\"\n\n// Configuration\nconst BATCH_SIZE = 10 // Number of listings to process in one go\nconst DELAY_BETWEEN_REQUESTS_MS = 200 // Delay to avoid hitting Mapbox API rate limits\n\n// CORS headers\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n  \"Access-Control-Allow-Methods\": \"POST, OPTIONS\",\n}\n\nasync function geocodeAddress(address: string, mapboxApiKey: string) {\n  const url = `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(address)}.json?access_token=${mapboxApiKey}&limit=1`\n  try {\n    const response = await fetch(url)\n    if (!response.ok) {\n      console.error(`Mapbox API error: ${response.status} ${await response.text()}`)\n      return null\n    }\n    const data = await response.json()\n    if (data.features && data.features.length > 0) {\n      const [longitude, latitude] = data.features[0].center\n      return {\n        latitude,\n        longitude,\n      }\n    }\n    return null\n  } catch (error) {\n    console.error(\"Error geocoding address:\", error)\n    return null\n  }\n}\n\nDeno.serve(async (req) => {\n  // Handle OPTIONS request for CORS preflight\n  if (req.method === \"OPTIONS\") {\n    return new Response(\"ok\", {\n      headers: corsHeaders,\n    })\n  }\n\n  try {\n    const supabaseUrl = Deno.env.get(\"SUPABASE_URL\")\n    const serviceRoleKey = Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\")\n    const mapboxApiKey = Deno.env.get(\"MAPBOX_ACCESS_TOKEN\")\n\n    if (!supabaseUrl || !serviceRoleKey || !mapboxApiKey) {\n      throw new Error(\"Missing environment variables: SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, or MAPBOX_ACCESS_TOKEN\")\n    }\n\n    // Create a Supabase client with the service role key for admin privileges\n    const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey)\n\n    // Fetch listings that need geocoding\n    // UPDATED: Changed from 'properties' to 'listings'\n    const { data: listingsToGeocode, error: fetchError } = await supabaseAdmin\n      .from(\"listings\")\n      .select(\"id, address_line_1, city, state, latitude, longitude\")\n      .or(\"latitude.is.null,longitude.is.null\") // Listings missing either lat or lng\n      .not(\"address_line_1\", \"is\", null) // Must have address_line_1\n      .not(\"city\", \"is\", null) // Must have city\n      .not(\"state\", \"is\", null) // Must have state\n      .limit(BATCH_SIZE)\n\n    if (fetchError) {\n      console.error(\"Error fetching listings:\", fetchError) // UPDATED: Message text\n      throw fetchError\n    }\n\n    if (!listingsToGeocode || listingsToGeocode.length === 0) {\n      return new Response(\n        JSON.stringify({\n          success: true,\n          message: \"No listings found needing geocoding in this batch.\", // UPDATED: Message text\n          propertiesFound: 0, // Kept for client compatibility\n          geocodedCount: 0,\n          failedCount: 0,\n          details: [],\n        }),\n        {\n          headers: {\n            ...corsHeaders,\n            \"Content-Type\": \"application/json\",\n          },\n          status: 200,\n        },\n      )\n    }\n\n    let geocodedCount = 0\n    let failedCount = 0\n    const processingDetails = []\n\n    for (const listing of listingsToGeocode) {\n      // UPDATED: Variable name\n      // Ensure all parts of the address are present before attempting to geocode\n      if (!listing.address_line_1 || !listing.city || !listing.state) {\n        processingDetails.push({\n          id: listing.id,\n          status: \"skipped\",\n          reason: \"Missing address components\",\n        })\n        failedCount++\n        continue\n      }\n\n      // Construct the full address string\n      const fullAddress = `${listing.address_line_1}, ${listing.city}, ${listing.state}`\n      const coordinates = await geocodeAddress(fullAddress, mapboxApiKey)\n\n      if (coordinates) {\n        // UPDATED: Changed from 'properties' to 'listings'\n        const { error: updateError } = await supabaseAdmin\n          .from(\"listings\")\n          .update({\n            latitude: coordinates.latitude,\n            longitude: coordinates.longitude,\n          })\n          .eq(\"id\", listing.id)\n\n        if (updateError) {\n          console.error(`Error updating listing ${listing.id}:`, updateError) // UPDATED: Message text\n          failedCount++\n          processingDetails.push({\n            id: listing.id,\n            status: \"failed_update\",\n            address: fullAddress,\n            error: updateError.message,\n          })\n        } else {\n          geocodedCount++\n          processingDetails.push({\n            id: listing.id,\n            status: \"success\",\n            address: fullAddress,\n            coordinates,\n          })\n        }\n      } else {\n        failedCount++\n        processingDetails.push({\n          id: listing.id,\n          status: \"failed_geocode\",\n          address: fullAddress,\n        })\n        console.warn(`Failed to geocode address for listing ${listing.id}: ${fullAddress}`) // UPDATED: Message text\n      }\n\n      // Add a small delay between requests to Mapbox\n      if (listingsToGeocode.indexOf(listing) < listingsToGeocode.length - 1) {\n        await new Promise((resolve) => setTimeout(resolve, DELAY_BETWEEN_REQUESTS_MS))\n      }\n    }\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        message: `Batch processing complete. Processed: ${listingsToGeocode.length}, Geocoded: ${geocodedCount}, Failed: ${failedCount}.`,\n        propertiesFound: listingsToGeocode.length, // Kept for client compatibility\n        geocodedCount,\n        failedCount,\n        details: processingDetails,\n      }),\n      {\n        headers: {\n          ...corsHeaders,\n          \"Content-Type\": \"application/json\",\n        },\n        status: 200,\n      },\n    )\n  } catch (err) {\n    console.error(\"Main function error:\", err)\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: err?.message ?? String(err),\n        propertiesFound: 0, // Kept for client compatibility\n        geocodedCount: 0,\n        failedCount: 0,\n      }),\n      {\n        headers: {\n          ...corsHeaders,\n          \"Content-Type\": \"application/json\",\n        },\n        status: 500,\n      },\n    )\n  }\n})\n```\n\n## File: dkl-microapp-2-main/supabase/migrations/001_add_user_field_mappings.sql\n```sql\n-- Create user_field_mappings table\nCREATE TABLE IF NOT EXISTS public.user_field_mappings (\n    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,\n    target_table_name VARCHAR(255) NOT NULL, -- e.g., 'properties', 'builders'\n    target_database_column VARCHAR(255) NOT NULL, -- e.g., 'mls_number', 'status'\n    source_csv_header VARCHAR(255) NOT NULL, -- Normalized CSV header provided by user\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),\n    CONSTRAINT user_field_mappings_user_table_csv_header_unique UNIQUE (user_id, target_table_name, source_csv_header)\n);\n\nCOMMENT ON TABLE public.user_field_mappings IS 'Stores user-defined mappings from CSV headers to database columns.';\nCOMMENT ON COLUMN public.user_field_mappings.target_table_name IS 'The name of the database table (e.g., ''properties'', ''builders'').';\nCOMMENT ON COLUMN public.user_field_mappings.target_database_column IS 'The name of the column in the target_table_name.';\nCOMMENT ON COLUMN public.user_field_mappings.source_csv_header IS 'The user-defined CSV header (normalized) that maps to the target_database_column.';\n\n-- Create indexes\nCREATE INDEX IF NOT EXISTS idx_user_field_mappings_user_table_db_column\nON public.user_field_mappings(user_id, target_table_name, target_database_column);\n\n-- Enable RLS\nALTER TABLE public.user_field_mappings ENABLE ROW LEVEL SECURITY;\n\n-- RLS Policies\nCREATE POLICY \"Users can manage their own field mappings\"\nON public.user_field_mappings\nFOR ALL\nUSING (auth.uid() = user_id);\n\n-- Trigger for updated_at\nDROP TRIGGER IF EXISTS update_user_field_mappings_updated_at ON public.user_field_mappings;\nCREATE TRIGGER update_user_field_mappings_updated_at\nBEFORE UPDATE ON public.user_field_mappings\nFOR EACH ROW\nEXECUTE FUNCTION update_updated_at_column();\n```\n\n## File: dkl-microapp-2-main/supabase/migrations/002_add_mapbox_key_to_user_settings.sql\n```sql\n-- Add mapbox_api_key column to user_settings table\n    ALTER TABLE public.user_settings\n    ADD COLUMN IF NOT EXISTS mapbox_api_key TEXT NULL;\n\n    COMMENT ON COLUMN public.user_settings.mapbox_api_key IS 'Stores the Mapbox API key for the user';\n\n    -- Output a success message\n    SELECT 'Column mapbox_api_key added to user_settings successfully.' AS result;\n```\n\n## File: dkl-microapp-2-main/supabase/migrations/003_update_existing_mappings.sql\n```sql\n-- Description: Updates existing user field mappings from the old 'properties' table name to the new 'listings' table name.\n    -- This ensures that previously saved CSV import mappings continue to work after the table rename.\n    UPDATE public.user_field_mappings\n    SET target_table_name = 'listings'\n    WHERE target_table_name = 'properties';\n\n    -- Description: Updates the foreign key relationship in social_post_properties.\n    -- This renames the relationship name that Supabase uses for joins from 'properties' to 'listings'.\n    -- Note: This assumes the constraint was named 'social_post_properties_property_id_fkey'.\n    -- You may need to verify the actual constraint name in your Supabase dashboard.\n    ALTER TABLE public.social_post_properties\n    DROP CONSTRAINT IF EXISTS social_post_properties_property_id_fkey,\n    ADD CONSTRAINT social_post_properties_property_id_fkey\n        FOREIGN KEY (property_id)\n        REFERENCES public.listings(id)\n        ON DELETE CASCADE;\n```\n\n## File: dkl-microapp-2-main/supabase/schema.sql\n```sql\n-- Main schema definition for the Attio clone project\n-- Drop existing tables if they exist (optional, for a clean slate during development)\nDROP TABLE IF EXISTS public.social_post_properties CASCADE;\nDROP TABLE IF EXISTS public.social_posts CASCADE;\nDROP TABLE IF EXISTS public.csv_uploads CASCADE;\nDROP TABLE IF EXISTS public.user_field_mappings CASCADE;\nDROP TABLE IF EXISTS public.listings CASCADE; -- Changed from properties\nDROP TABLE IF EXISTS public.builders CASCADE;\nDROP TABLE IF EXISTS public.user_settings CASCADE;\n\n-- Extensions\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\" WITH SCHEMA extensions;\n\n-- Builders Table\nCREATE TABLE public.builders (\n    id uuid DEFAULT extensions.uuid_generate_v4() PRIMARY KEY,\n    name TEXT NOT NULL,\n    company_name TEXT,\n    phone TEXT,\n    email TEXT,\n    website TEXT,\n    address TEXT,\n    city TEXT,\n    state TEXT,\n    zip_code TEXT,\n    years_in_business INTEGER,\n    total_projects INTEGER,\n    active_projects INTEGER,\n    specialties TEXT[],\n    price_range_min NUMERIC,\n    price_range_max NUMERIC,\n    rating NUMERIC,\n    notes TEXT,\n    metadata JSONB,\n    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,\n    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL\n);\n\n-- Listings Table (formerly Properties)\nCREATE TABLE public.listings (\n    id uuid DEFAULT extensions.uuid_generate_v4() PRIMARY KEY,\n    mls_number TEXT UNIQUE, -- Assuming MLS number should be unique for listings\n    category TEXT,\n    status TEXT,\n    type TEXT,\n    dom INTEGER,\n    cdom INTEGER,\n    list_date DATE,\n    agreement_date DATE,\n    off_market_date DATE,\n    settled_date DATE,\n    original_price NUMERIC,\n    list_price NUMERIC,\n    sold_price NUMERIC,\n    street_number TEXT,\n    street_direction TEXT,\n    street_name TEXT,\n    unit_number TEXT,\n    city TEXT,\n    state TEXT,\n    zip_code TEXT,\n    county TEXT,\n    mls_area TEXT,\n    subdivision TEXT,\n    list_agent_name TEXT,\n    list_agent_code TEXT,\n    list_office_name TEXT,\n    list_office_code TEXT,\n    list_office_phone TEXT,\n    selling_agent TEXT,\n    selling_agent_code TEXT,\n    selling_office_name TEXT,\n    selling_office_code TEXT,\n    selling_office_phone TEXT,\n    final_financing TEXT,\n    final_short_sale BOOLEAN,\n    final_third_party_approval BOOLEAN,\n    final_bank_owned BOOLEAN,\n    tax_annual_total NUMERIC,\n    tax_year INTEGER,\n    acres_total NUMERIC,\n    land_use_code TEXT,\n    ownership TEXT,\n    senior_community BOOLEAN,\n    condo_coop_assoc BOOLEAN,\n    hoa BOOLEAN,\n    one_time_association_fee NUMERIC,\n    association_fee NUMERIC,\n    association_fee_frequency TEXT,\n    age INTEGER,\n    interior_sqft INTEGER,\n    property_condition TEXT,\n    bedrooms INTEGER,\n    baths_full INTEGER,\n    baths_half INTEGER,\n    design TEXT,\n    style TEXT,\n    number_of_stories TEXT,\n    floor_number TEXT,\n    basement BOOLEAN,\n    garage_spaces INTEGER,\n    fireplace BOOLEAN,\n    laundry TEXT,\n    other_rooms TEXT,\n    room_count INTEGER,\n    central_air BOOLEAN,\n    waterfront BOOLEAN,\n    new_construction BOOLEAN,\n    model_name TEXT,\n    originating_mls TEXT,\n    above_grade_sqft INTEGER,\n    below_grade_sqft INTEGER,\n    home_built TEXT,\n    basement_footprint_pct NUMERIC,\n    basement_finished_pct NUMERIC,\n    builder_id uuid REFERENCES public.builders(id) ON DELETE SET NULL,\n    development_status TEXT,\n    metadata JSONB,\n    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,\n    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL,\n    in_social_queue BOOLEAN DEFAULT FALSE,\n    owner_name TEXT,\n    construction_completed_yn BOOLEAN,\n    year_built INTEGER,\n    year_built_source TEXT,\n    imported_builder_name TEXT,\n    occupant_type TEXT,\n    occupant_name TEXT,\n    previous_list_price NUMERIC,\n    architect_name TEXT,\n    structure_type TEXT,\n    block_lot TEXT,\n    remarks_private TEXT,\n    remarks_public TEXT,\n    year_major_reno_remodel INTEGER,\n    change_info TEXT,\n    close_date DATE,\n    close_price NUMERIC,\n    close_sale_type TEXT,\n    foundation_details TEXT,\n    land_assessed_value NUMERIC,\n    list_picture_url TEXT,\n    lot_features TEXT[],\n    lot_size_sqft NUMERIC,\n    address_line_1 TEXT, -- Combined address for easier geocoding if components are missing\n    latitude NUMERIC,\n    longitude NUMERIC,\n    last_sold_date DATE,\n    last_sold_price NUMERIC,\n    property_type TEXT, -- Retained, ensure it's used consistently\n    description TEXT, -- Retained\n    new_construction_details TEXT -- Retained\n);\n\n-- User Settings Table\nCREATE TABLE public.user_settings (\n    id uuid DEFAULT extensions.uuid_generate_v4() PRIMARY KEY,\n    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE UNIQUE NOT NULL,\n    theme TEXT DEFAULT 'light'::text,\n    notifications_enabled BOOLEAN DEFAULT true,\n    email_notifications BOOLEAN DEFAULT true,\n    default_view TEXT DEFAULT 'grid'::text,\n    items_per_page INTEGER DEFAULT 50,\n    metadata JSONB,\n    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,\n    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL,\n    openai_api_key TEXT,\n    openai_model TEXT,\n    primary_color_hex TEXT,\n    primary_foreground_color_hex TEXT,\n    mapbox_api_key TEXT\n);\n\n-- CSV Uploads Table\nCREATE TABLE public.csv_uploads (\n    id uuid DEFAULT extensions.uuid_generate_v4() PRIMARY KEY,\n    user_id uuid REFERENCES auth.users(id) ON DELETE SET NULL,\n    filename TEXT,\n    upload_date TIMESTAMPTZ DEFAULT now() NOT NULL,\n    records_processed INTEGER,\n    records_created INTEGER,\n    records_updated INTEGER,\n    records_failed INTEGER,\n    status TEXT,\n    error_log TEXT,\n    metadata JSONB\n);\n\n-- Social Posts Table\nCREATE TABLE public.social_posts (\n    id uuid DEFAULT extensions.uuid_generate_v4() PRIMARY KEY,\n    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,\n    title TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'draft'::text NOT NULL, -- e.g., draft, scheduled, posted, error\n    post_url TEXT, -- URL of the live post\n    content_type TEXT, -- e.g., 'Single Property', 'Multi Property', 'Market Update'\n    format_type TEXT, -- e.g., 'Carousel', 'Post', 'Reel', 'Story'\n    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,\n    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL\n);\n\n-- Social Post Properties Junction Table\nCREATE TABLE public.social_post_properties (\n    id uuid DEFAULT extensions.uuid_generate_v4() PRIMARY KEY,\n    social_post_id uuid REFERENCES public.social_posts(id) ON DELETE CASCADE NOT NULL,\n    property_id uuid REFERENCES public.listings(id) ON DELETE CASCADE NOT NULL, -- Changed from properties\n    image_complete BOOLEAN DEFAULT FALSE,\n    description_complete BOOLEAN DEFAULT FALSE,\n    contacted_complete BOOLEAN DEFAULT FALSE,\n    image_urls TEXT[], -- Array of URLs for images specific to this property in this post\n    description TEXT, -- Description specific to this property in this post\n    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,\n    UNIQUE (social_post_id, property_id) -- Ensure a property is linked only once per post\n);\n\n-- User Field Mappings Table\nCREATE TABLE public.user_field_mappings (\n    id uuid DEFAULT extensions.uuid_generate_v4() PRIMARY KEY,\n    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,\n    target_table_name TEXT NOT NULL, -- e.g., 'listings', 'builders'\n    target_database_column TEXT NOT NULL,\n    source_csv_header TEXT NOT NULL,\n    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,\n    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL,\n    UNIQUE (user_id, target_table_name, source_csv_header) -- A CSV header can only map to one DB column for a user and table\n    -- Consider adding: UNIQUE (user_id, target_table_name, target_database_column) if a DB column can only be mapped by one CSV header\n);\n\n-- Function to update 'updated_at' column\nCREATE OR REPLACE FUNCTION public.update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n   NEW.updated_at = now();\n   RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n-- Triggers for 'updated_at'\nCREATE TRIGGER update_builders_updated_at BEFORE UPDATE ON public.builders FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();\nCREATE TRIGGER update_listings_updated_at BEFORE UPDATE ON public.listings FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column(); -- Changed\nCREATE TRIGGER update_user_settings_updated_at BEFORE UPDATE ON public.user_settings FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();\nCREATE TRIGGER update_social_posts_updated_at BEFORE UPDATE ON public.social_posts FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();\nCREATE TRIGGER update_user_field_mappings_updated_at BEFORE UPDATE ON public.user_field_mappings FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();\n\n-- Enable Row Level Security (RLS) for all tables\nALTER TABLE public.builders ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.listings ENABLE ROW LEVEL SECURITY; -- Changed\nALTER TABLE public.user_settings ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.csv_uploads ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.social_posts ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.social_post_properties ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.user_field_mappings ENABLE ROW LEVEL SECURITY;\n\n-- Policies for user_settings\nDROP POLICY IF EXISTS \"Allow individual read access on user_settings\" ON public.user_settings;\nCREATE POLICY \"Allow individual read access on user_settings\" ON public.user_settings\n    FOR SELECT USING (auth.uid() = user_id);\n\nDROP POLICY IF EXISTS \"Allow individual update access on user_settings\" ON public.user_settings;\nCREATE POLICY \"Allow individual update access on user_settings\" ON public.user_settings\n    FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);\n\nDROP POLICY IF EXISTS \"Allow individual insert access on user_settings\" ON public.user_settings;\nCREATE POLICY \"Allow individual insert access on user_settings\" ON public.user_settings\n    FOR INSERT WITH CHECK (auth.uid() = user_id);\n\n-- Policies for builders (assuming builders are public or managed by auth users)\nDROP POLICY IF EXISTS \"Allow public read access on builders\" ON public.builders;\nCREATE POLICY \"Allow public read access on builders\" ON public.builders\n    FOR SELECT USING (true); -- Or auth.role() = 'authenticated' if only for logged-in users\n\nDROP POLICY IF EXISTS \"Allow authenticated users to insert builders\" ON public.builders;\nCREATE POLICY \"Allow authenticated users to insert builders\" ON public.builders\n    FOR INSERT TO authenticated WITH CHECK (true);\n\nDROP POLICY IF EXISTS \"Allow authenticated users to update builders\" ON public.builders;\nCREATE POLICY \"Allow authenticated users to update builders\" ON public.builders\n    FOR UPDATE TO authenticated USING (true) WITH CHECK (true); -- More specific ownership checks can be added\n\nDROP POLICY IF EXISTS \"Allow authenticated users to delete builders\" ON public.builders;\nCREATE POLICY \"Allow authenticated users to delete builders\" ON public.builders\n    FOR DELETE TO authenticated USING (true); -- More specific ownership checks can be added\n\n\n-- Policies for listings (assuming listings are public or managed by auth users)\nDROP POLICY IF EXISTS \"Allow public read access on listings\" ON public.listings;\nCREATE POLICY \"Allow public read access on listings\" ON public.listings\n    FOR SELECT USING (true); -- Or auth.role() = 'authenticated'\n\nDROP POLICY IF EXISTS \"Allow authenticated users to insert listings\" ON public.listings;\nCREATE POLICY \"Allow authenticated users to insert listings\" ON public.listings\n    FOR INSERT TO authenticated WITH CHECK (true);\n\nDROP POLICY IF EXISTS \"Allow authenticated users to update listings\" ON public.listings;\nCREATE POLICY \"Allow authenticated users to update listings\" ON public.listings\n    FOR UPDATE TO authenticated USING (true) WITH CHECK (true);\n\nDROP POLICY IF EXISTS \"Allow authenticated users to delete listings\" ON public.listings;\nCREATE POLICY \"Allow authenticated users to delete listings\" ON public.listings\n    FOR DELETE TO authenticated USING (true);\n\n\n-- Policies for csv_uploads (user-specific)\nDROP POLICY IF EXISTS \"Allow individual access on csv_uploads\" ON public.csv_uploads;\nCREATE POLICY \"Allow individual access on csv_uploads\" ON public.csv_uploads\n    FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);\n\n-- Policies for social_posts (user-specific)\nDROP POLICY IF EXISTS \"Allow individual access on social_posts\" ON public.social_posts;\nCREATE POLICY \"Allow individual access on social_posts\" ON public.social_posts\n    FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);\n\n-- Policies for social_post_properties (derived from social_posts ownership)\nDROP POLICY IF EXISTS \"Allow access based on social_post ownership\" ON public.social_post_properties;\nCREATE POLICY \"Allow access based on social_post ownership\" ON public.social_post_properties\n    FOR ALL USING (\n        EXISTS (\n            SELECT 1 FROM public.social_posts sp\n            WHERE sp.id = social_post_id AND sp.user_id = auth.uid()\n        )\n    ) WITH CHECK (\n         EXISTS (\n            SELECT 1 FROM public.social_posts sp\n            WHERE sp.id = social_post_id AND sp.user_id = auth.uid()\n        )\n    );\n\n-- Policies for user_field_mappings (user-specific)\nDROP POLICY IF EXISTS \"Allow individual access on user_field_mappings\" ON public.user_field_mappings;\nCREATE POLICY \"Allow individual access on user_field_mappings\" ON public.user_field_mappings\n    FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);\n\n-- Seed initial data (optional)\n-- Example: INSERT INTO public.user_settings (user_id, theme) VALUES ('your-user-id', 'dark');\n```\n\n## File: dkl-microapp-2-main/supabase/seed-social-posts.sql\n```sql\n-- Insert a sample social post\nINSERT INTO social_posts (\n  title, \n  description, \n  status, \n  user_id\n) VALUES (\n  'Luxury Homes Showcase', \n  'Featuring our top luxury properties in the DC area',\n  'draft',\n  (SELECT auth.uid())\n);\n\n-- Get the ID of the social post we just created\nDO $$\nDECLARE\n  social_post_id UUID;\nBEGIN\n  SELECT id INTO social_post_id FROM social_posts ORDER BY created_at DESC LIMIT 1;\n  \n  -- Add properties to the social post\n  INSERT INTO social_post_properties (\n    social_post_id,\n    property_id,\n    image_complete,\n    description_complete,\n    contacted_complete\n  )\n  SELECT \n    social_post_id,\n    id,\n    CASE WHEN random() > 0.5 THEN true ELSE false END,\n    CASE WHEN random() > 0.5 THEN true ELSE false END,\n    CASE WHEN random() > 0.5 THEN true ELSE false END\n  FROM properties\n  WHERE mls_number IN ('DC2024001', 'MD2024002', 'VA2024003')\n  AND in_social_queue = true;\n  \n  -- Remove these properties from the queue\n  UPDATE properties\n  SET in_social_queue = false\n  WHERE mls_number IN ('DC2024001', 'MD2024002', 'VA2024003');\nEND $$;\n```\n\n## File: dkl-microapp-2-main/supabase/social-schema.sql\n```sql\n-- Create social_posts table\nCREATE TABLE IF NOT EXISTS social_posts (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  description TEXT,\n  status VARCHAR(50) DEFAULT 'draft', -- 'draft', 'completed', 'posted'\n  post_url VARCHAR(500),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),\n  user_id UUID REFERENCES auth.users(id)\n);\n\n-- Create social_post_properties table (junction table)\nCREATE TABLE IF NOT EXISTS social_post_properties (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  social_post_id UUID REFERENCES social_posts(id) ON DELETE CASCADE,\n  property_id UUID REFERENCES properties(id) ON DELETE CASCADE,\n  image_complete BOOLEAN DEFAULT false,\n  description_complete BOOLEAN DEFAULT false,\n  contacted_complete BOOLEAN DEFAULT false,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),\n  UNIQUE(social_post_id, property_id)\n);\n\n-- Add social_queue column to properties\nALTER TABLE properties ADD COLUMN IF NOT EXISTS in_social_queue BOOLEAN DEFAULT false;\n\n-- Create indexes\nCREATE INDEX IF NOT EXISTS idx_social_posts_user_id ON social_posts(user_id);\nCREATE INDEX IF NOT EXISTS idx_social_posts_status ON social_posts(status);\nCREATE INDEX IF NOT EXISTS idx_social_post_properties_post_id ON social_post_properties(social_post_id);\nCREATE INDEX IF NOT EXISTS idx_social_post_properties_property_id ON social_post_properties(property_id);\nCREATE INDEX IF NOT EXISTS idx_properties_social_queue ON properties(in_social_queue);\n\n-- Create updated_at trigger for social_posts\nDROP TRIGGER IF EXISTS update_social_posts_updated_at ON social_posts;\nCREATE TRIGGER update_social_posts_updated_at BEFORE UPDATE ON social_posts\n  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\n-- Enable RLS\nALTER TABLE social_posts ENABLE ROW LEVEL SECURITY;\nALTER TABLE social_post_properties ENABLE ROW LEVEL SECURITY;\n\n-- Create RLS policies\nCREATE POLICY \"Users can manage own social posts\" ON social_posts\n  FOR ALL USING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can manage social post properties\" ON social_post_properties\n  FOR ALL USING (\n    EXISTS (\n      SELECT 1 FROM social_posts \n      WHERE social_posts.id = social_post_properties.social_post_id \n      AND social_posts.user_id = auth.uid()\n    )\n  );\n```\n\n## File: dkl-microapp-2-main/supabase/update-schema.sql\n```sql\n-- Ensure builder_id column exists in properties table\nALTER TABLE properties ADD COLUMN IF NOT EXISTS builder_id UUID REFERENCES builders(id);\n\n-- Create index for better performance\nCREATE INDEX IF NOT EXISTS idx_properties_builder_id ON properties(builder_id);\n\n-- Update some existing properties to have builders assigned\nUPDATE properties \nSET builder_id = (\n  SELECT id FROM builders \n  WHERE name = 'Toll Brothers' \n  LIMIT 1\n)\nWHERE mls_number IN ('DC2024001', 'MD2024002', 'VA2024003');\n\nUPDATE properties \nSET builder_id = (\n  SELECT id FROM builders \n  WHERE name = 'Ryan Homes' \n  LIMIT 1\n)\nWHERE mls_number IN ('DC2024004', 'MD2024005', 'VA2024006');\n```\n\n## File: dkl-microapp-2-main/types/supabase.ts\n```typescript\nexport type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[]\n\nexport interface Database {\n  public: {\n    Tables: {\n      builders: {\n        Row: {\n          id: string\n          name: string\n          company_name: string | null\n          phone: string | null\n          email: string | null\n          website: string | null\n          address: string | null\n          city: string | null\n          state: string | null\n          zip_code: string | null\n          years_in_business: number | null\n          total_projects: number | null\n          active_projects: number | null\n          specialties: string[] | null\n          price_range_min: number | null\n          price_range_max: number | null\n          rating: number | null\n          notes: string | null\n          metadata: Json | null\n          created_at: string\n          updated_at: string\n        }\n        Insert: Omit<Database[\"public\"][\"Tables\"][\"builders\"][\"Row\"], \"id\" | \"created_at\" | \"updated_at\"> & {\n          id?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Update: Partial<Database[\"public\"][\"Tables\"][\"builders\"][\"Row\"]>\n      }\n      listings: {\n        // Renamed from properties\n        Row: {\n          id: string\n          mls_number: string | null\n          category: string | null\n          status: string | null\n          type: string | null\n          dom: number | null\n          cdom: number | null\n          list_date: string | null\n          agreement_date: string | null\n          off_market_date: string | null\n          settled_date: string | null\n          original_price: number | null\n          list_price: number | null\n          sold_price: number | null\n          street_number: string | null\n          street_direction: string | null\n          street_name: string | null\n          unit_number: string | null\n          city: string | null\n          state: string | null\n          zip_code: string | null\n          county: string | null\n          mls_area: string | null\n          subdivision: string | null\n          list_agent_name: string | null\n          list_agent_code: string | null\n          list_office_name: string | null\n          list_office_code: string | null\n          list_office_phone: string | null\n          selling_agent: string | null\n          selling_agent_code: string | null\n          selling_office_name: string | null\n          selling_office_code: string | null\n          selling_office_phone: string | null\n          final_financing: string | null\n          final_short_sale: boolean | null\n          final_third_party_approval: boolean | null\n          final_bank_owned: boolean | null\n          tax_annual_total: number | null\n          tax_year: number | null\n          acres_total: number | null\n          land_use_code: string | null\n          ownership: string | null\n          senior_community: boolean | null\n          condo_coop_assoc: boolean | null\n          hoa: boolean | null\n          one_time_association_fee: number | null\n          association_fee: number | null\n          association_fee_frequency: string | null\n          age: number | null\n          interior_sqft: number | null\n          property_condition: string | null\n          bedrooms: number | null\n          baths_full: number | null\n          baths_half: number | null\n          design: string | null\n          style: string | null\n          number_of_stories: string | null\n          floor_number: string | null\n          basement: boolean | null\n          garage_spaces: number | null\n          fireplace: boolean | null\n          laundry: string | null\n          other_rooms: string | null\n          room_count: number | null\n          central_air: boolean | null\n          waterfront: boolean | null\n          new_construction: boolean | null\n          model_name: string | null\n          originating_mls: string | null\n          above_grade_sqft: number | null\n          below_grade_sqft: number | null\n          home_built: string | null\n          basement_footprint_pct: number | null\n          basement_finished_pct: number | null\n          builder_id: string | null\n          development_status: string | null\n          metadata: Json | null\n          created_at: string\n          updated_at: string\n          in_social_queue: boolean | null\n          owner_name: string | null\n          construction_completed_yn: boolean | null\n          year_built: number | null\n          year_built_source: string | null\n          imported_builder_name: string | null\n          occupant_type: string | null\n          occupant_name: string | null\n          previous_list_price: number | null\n          architect_name: string | null\n          structure_type: string | null\n          block_lot: string | null\n          remarks_private: string | null\n          remarks_public: string | null\n          year_major_reno_remodel: number | null\n          change_info: string | null\n          close_date: string | null\n          close_price: number | null\n          close_sale_type: string | null\n          foundation_details: string | null\n          land_assessed_value: number | null\n          list_picture_url: string | null\n          lot_features: string[] | null\n          lot_size_sqft: number | null\n          address_line_1: string | null\n          latitude: number | null\n          longitude: number | null\n          last_sold_date: string | null\n          last_sold_price: number | null\n          property_type: string | null // Retained from previous, ensure it's in schema if used\n          description: string | null // Retained from previous, ensure it's in schema if used\n          new_construction_details: string | null // Retained from previous\n        }\n        Insert: Omit<Database[\"public\"][\"Tables\"][\"listings\"][\"Row\"], \"id\" | \"created_at\" | \"updated_at\"> & {\n          // Renamed\n          id?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Update: Partial<Database[\"public\"][\"Tables\"][\"listings\"][\"Row\"]> // Renamed\n      }\n      user_settings: {\n        Row: {\n          id: string\n          user_id: string\n          theme: string\n          notifications_enabled: boolean\n          email_notifications: boolean\n          default_view: string\n          items_per_page: number\n          metadata: Json | null\n          created_at: string\n          updated_at: string\n          openai_api_key: string | null\n          openai_model: string | null\n          primary_color_hex: string | null\n          primary_foreground_color_hex: string | null\n          mapbox_api_key: string | null\n        }\n        Insert: Omit<Database[\"public\"][\"Tables\"][\"user_settings\"][\"Row\"], \"id\" | \"created_at\" | \"updated_at\"> & {\n          id?: string\n          created_at?: string\n          updated_at?: string\n          openai_api_key?: string | null\n          openai_model?: string | null\n          primary_color_hex?: string | null\n          primary_foreground_color_hex?: string | null\n          mapbox_api_key?: string | null\n        }\n        Update: Partial<Database[\"public\"][\"Tables\"][\"user_settings\"][\"Row\"]> & {\n          openai_api_key?: string | null\n          openai_model?: string | null\n          primary_color_hex?: string | null\n          primary_foreground_color_hex?: string | null\n          mapbox_api_key?: string | null\n        }\n      }\n      csv_uploads: {\n        Row: {\n          id: string\n          user_id: string | null\n          filename: string | null\n          upload_date: string\n          records_processed: number | null\n          records_created: number | null\n          records_updated: number | null\n          records_failed: number | null\n          status: string | null\n          error_log: string | null\n          metadata: Json | null\n        }\n        Insert: Omit<Database[\"public\"][\"Tables\"][\"csv_uploads\"][\"Row\"], \"id\" | \"upload_date\"> & {\n          id?: string\n          upload_date?: string\n        }\n        Update: Partial<Database[\"public\"][\"Tables\"][\"csv_uploads\"][\"Row\"]>\n      }\n      social_posts: {\n        Row: {\n          id: string\n          title: string\n          description: string | null\n          status: string\n          post_url: string | null\n          created_at: string\n          updated_at: string\n          user_id: string | null\n          content_type: string | null\n          format_type: string | null\n        }\n        Insert: Omit<Database[\"public\"][\"Tables\"][\"social_posts\"][\"Row\"], \"id\" | \"created_at\" | \"updated_at\"> & {\n          id?: string\n          created_at?: string\n          updated_at?: string\n          content_type?: string | null\n          format_type?: string | null\n        }\n        Update: Partial<Database[\"public\"][\"Tables\"][\"social_posts\"][\"Row\"]> & {\n          content_type?: string | null\n          format_type?: string | null\n        }\n      }\n      social_post_properties: {\n        // Name remains, but property_id now refers to listings.id\n        Row: {\n          id: string\n          social_post_id: string\n          property_id: string // This ID now points to a row in the 'listings' table\n          image_complete: boolean\n          description_complete: boolean\n          contacted_complete: boolean\n          created_at: string\n          image_urls: string[] | null // Added from social-post-property-item.tsx\n          description: string | null // Added from social-post-property-item.tsx\n        }\n        Insert: Omit<Database[\"public\"][\"Tables\"][\"social_post_properties\"][\"Row\"], \"id\" | \"created_at\"> & {\n          id?: string\n          created_at?: string\n        }\n        Update: Partial<Database[\"public\"][\"Tables\"][\"social_post_properties\"][\"Row\"]>\n      }\n      user_field_mappings: {\n        Row: {\n          id: string\n          user_id: string\n          target_table_name: string // This will now store 'listings' for new mappings\n          target_database_column: string\n          source_csv_header: string\n          created_at: string\n          updated_at: string\n        }\n        Insert: Omit<Database[\"public\"][\"Tables\"][\"user_field_mappings\"][\"Row\"], \"id\" | \"created_at\" | \"updated_at\"> & {\n          id?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Update: Partial<\n          Omit<Database[\"public\"][\"Tables\"][\"user_field_mappings\"][\"Row\"], \"id\" | \"user_id\" | \"created_at\">\n        >\n      }\n    }\n    Functions: {\n      update_updated_at_column: {\n        Args: Record<string, unknown>\n        Returns: unknown\n      }\n    }\n    Enums: {}\n    CompositeTypes: {}\n  }\n}\n```\n\n## File: dkl-microapp-2-main/.gitignore\n```\n# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n\n# next.js\n/.next/\n/out/\n\n# production\n/build\n\n# debug\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n.pnpm-debug.log*\n\n# env files\n.env*\n\n# vercel\n.vercel\n\n# typescript\n*.tsbuildinfo\nnext-env.d.ts\n```\n\n## File: dkl-microapp-2-main/components.json\n```json\n{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"default\",\n  \"rsc\": true,\n  \"tsx\": true,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.ts\",\n    \"css\": \"app/globals.css\",\n    \"baseColor\": \"neutral\",\n    \"cssVariables\": true,\n    \"prefix\": \"\"\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\",\n    \"ui\": \"@/components/ui\",\n    \"lib\": \"@/lib\",\n    \"hooks\": \"@/hooks\"\n  },\n  \"iconLibrary\": \"lucide\"\n}\n```\n\n## File: dkl-microapp-2-main/next.config.mjs\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  eslint: {\n    ignoreDuringBuilds: true,\n  },\n  typescript: {\n    ignoreBuildErrors: true,\n  },\n  images: {\n    unoptimized: true,\n  },\n}\n\nexport default nextConfig\n```\n\n## File: dkl-microapp-2-main/package.json\n```json\n{\n  \"name\": \"real-estate-platform\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  },\n  \"dependencies\": {\n    \"@ai-sdk/openai\": \"latest\",\n    \"@radix-ui/react-alert-dialog\": \"^1.0.5\",\n    \"@radix-ui/react-avatar\": \"^1.0.4\",\n    \"@radix-ui/react-checkbox\": \"latest\",\n    \"@radix-ui/react-dialog\": \"latest\",\n    \"@radix-ui/react-dropdown-menu\": \"^2.0.6\",\n    \"@radix-ui/react-label\": \"^2.0.2\",\n    \"@radix-ui/react-progress\": \"latest\",\n    \"@radix-ui/react-select\": \"latest\",\n    \"@radix-ui/react-slot\": \"^1.0.2\",\n    \"@radix-ui/react-switch\": \"latest\",\n    \"@radix-ui/react-tabs\": \"latest\",\n    \"@radix-ui/react-toast\": \"latest\",\n    \"@supabase/supabase-js\": \"latest\",\n    \"@tanstack/react-table\": \"latest\",\n    \"ai\": \"latest\",\n    \"class-variance-authority\": \"^0.7.1\",\n    \"clsx\": \"^2.1.1\",\n    \"jsr:\": \"supabase\",\n    \"lucide-react\": \"^0.454.0\",\n    \"mapbox-gl\": \"latest\",\n    \"next\": \"14.2.16\",\n    \"papaparse\": \"latest\",\n    \"react\": \"^18\",\n    \"react-dom\": \"^18\",\n    \"react-dropzone\": \"latest\",\n    \"recharts\": \"latest\",\n    \"tailwind-merge\": \"^2.5.5\",\n    \"tailwindcss-animate\": \"^1.0.7\",\n    \"zod\": \"latest\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^22\",\n    \"@types/react\": \"^18\",\n    \"@types/react-dom\": \"^18\",\n    \"autoprefixer\": \"^10.0.1\",\n    \"eslint\": \"^8\",\n    \"eslint-config-next\": \"14.1.0\",\n    \"postcss\": \"^8.5\",\n    \"tailwindcss\": \"^3.3.0\",\n    \"typescript\": \"^5\"\n  }\n}\n```\n\n## File: dkl-microapp-2-main/postcss.config.mjs\n```\n/** @type {import('postcss-load-config').Config} */\nconst config = {\n  plugins: {\n    tailwindcss: {},\n  },\n};\n\nexport default config;\n```\n\n## File: dkl-microapp-2-main/README.md\n```markdown\n# Attio clone project\n\n*Automatically synced with your [v0.dev](https://v0.dev) deployments*\n\n[![Deployed on Vercel](https://img.shields.io/badge/Deployed%20on-Vercel-black?style=for-the-badge&logo=vercel)](https://vercel.com/alexander-leanos-projects/v0-attio-clone-project-a0)\n[![Built with v0](https://img.shields.io/badge/Built%20with-v0.dev-black?style=for-the-badge)](https://v0.dev/chat/projects/D4LOmdOGoSu)\n\n## Overview\n\nThis repository will stay in sync with your deployed chats on [v0.dev](https://v0.dev).\nAny changes you make to your deployed app will be automatically pushed to this repository from [v0.dev](https://v0.dev).\n\n## Deployment\n\nYour project is live at:\n\n**[https://vercel.com/alexander-leanos-projects/v0-attio-clone-project-a0](https://vercel.com/alexander-leanos-projects/v0-attio-clone-project-a0)**\n\n## Build your app\n\nContinue building your app on:\n\n**[https://v0.dev/chat/projects/D4LOmdOGoSu](https://v0.dev/chat/projects/D4LOmdOGoSu)**\n\n## How It Works\n\n1. Create and modify your project using [v0.dev](https://v0.dev)\n2. Deploy your chats from the v0 interface\n3. Changes are automatically pushed to this repository\n4. Vercel deploys the latest version from this repository\n```\n\n## File: dkl-microapp-2-main/tailwind.config.ts\n```typescript\nimport type { Config } from \"tailwindcss\"\n\nconst config: Config = {\n  darkMode: [\"class\"],\n  content: [\n    \"./pages/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./app/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  theme: {\n    extend: {\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n        blueishGreen: {\n          // Ensure this is correctly defined\n          DEFAULT: \"#14b8a6\", // teal-500\n          foreground: \"#ffffff\", // White text on teal-500\n          50: \"#f0fdfa\",\n          100: \"#ccfbf1\",\n          200: \"#99f6e4\",\n          300: \"#5eead4\",\n          400: \"#2dd4bf\",\n          500: \"#14b8a6\",\n          600: \"#0d9488\",\n          700: \"#0f766e\",\n          800: \"#115e59\",\n          900: \"#134e4a\",\n          950: \"#042f2e\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}\nexport default config\n```\n\n## File: dkl-microapp-2-main/tsconfig.json\n```json\n{\n  \"compilerOptions\": {\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"target\": \"ES6\",\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n```\n"
          }
        ],
        "modelId": "tY0lQTJu9ofNB2E2kqCuo:o3",
        "autoTitleEnabledForTurn": true,
        "toolCalls": [],
        "toolResults": [],
        "generationTime": 884,
        "isTitleGeneration": false,
        "isCompactGeneration": false,
        "error": "AI Stream Error Part: Invalid schema for function 'gitPull': In context=(), 'required' is required to be supplied and to be an array including every key in properties. Missing 'branch'."
      },
      "index": 0,
      "parentId": null
    },
    {
      "id": "kLX6r0mDbJxeMor8Ub2OU",
      "conversationId": "wj-QHZXDJfNkUaTfOOva6",
      "type": "message.user_assistant",
      "prompt": {
        "id": "oPbKFveEM8juQZPU2Sbi5",
        "content": "attached are several prompts I used to create an application (not in sequential, or any, order)., and a packaged version of the app repo is also attached\n\nreview the prompts and my repo thoroughly and create both:\n\n(1) a consolidated description of the app, its functionality, etc for me to use as context in future prompts related to improving the app and researching data feed/API integration options;\ndkl\n(2) draft documentation for my app that provides comprehensive details about its functionality and use for users (and devs).\n\nIf you are unsure from the prompts or repo whether the app behaves or functions in a certain way, or allows for something, please provide those questions, associated commentary, and recommendation in callout format following the appropriate section of the docs here are my prompts:",
        "parameters": {
          "temperature": 0.7,
          "presence_penalty": 0,
          "frequency_penalty": 0
        },
        "metadata": {
          "attachedFiles": [
            {
              "id": "eAvJcUUl1ynz0tKpgO4NV",
              "source": "vfs",
              "name": "repomix-output-dkl-microapp-2-main.md",
              "type": "application/octet-stream",
              "size": 574571,
              "path": "/synced_repos/repomix-output-dkl-microapp-2-main.md"
            },
            {
              "id": "lKDQNto6QDMe4_X4qzZwQ",
              "source": "vfs",
              "name": "app-prompt-history-1.txt",
              "type": "application/octet-stream",
              "size": 28382,
              "path": "/app-prompt-history-1.txt"
            }
          ],
          "modelId": "tY0lQTJu9ofNB2E2kqCuo:o3"
        }
      },
      "response": "====================================================================\n1.  CONDENSED “SOURCE-OF-TRUTH” DESCRIPTION\n====================================================================\n\nThe application is an internal, web-based micro-platform (Next .js 14 app router + TypeScript) for a luxury-new-construction real-estate practice operating in Washington DC / Maryland / Virginia.  \nIt replaces the CRM-style focus of Attio with data & workflow tooling around:\n\n• Listings – every residential property identified as new-construction or builder-owned, current or historical.  \n• Builders – company profiles for regional builders and their activity.  \n• Market Intelligence – dashboards, analytics & map visualisations.  \n• Social-Media Production – workflow to queue listings, mark task check-boxes (image / description / contacted), generate copy with OpenAI, and track post objects & progress.  \n• Bulk Data Import – CSV upload with intelligent field-mapping, deduplication via MLS#, upsert vs override logic, per-user saved mappings, upload history & error reporting.  \n• User Settings & Integrations – user-scoped OpenAI & Mapbox keys, accent colour picker (HEX), RLS-protected preferences.  \n• Server-Side Utilities – a Supabase Edge Function that geocodes missing listing coordinates in rate-limited batches using Mapbox.  \n• Authentication – Supabase Auth (email+password).  \n• Compact, Attio-style UI – ShadCN + Tailwind with dense font-sizes, minimal colour, and custom primary colour per-user.  \n\nHigh-level structure\n--------------------\nNext .js → app/ route groups:\n\n(auth)  → login / signup / register  \n(dashboard) → many pages:\n • dashboard (stats + map)  \n • listings (DataTable, bulk actions, listing form dialog)  \n • builders (DataTable, builder form dialog, builder detail page)  \n • social (posts & queue table, detail page)  \n • analytics, insights, reports, import, settings, etc.\n\nState & data\n------------\nSupabase PostgreSQL with RLS.  Key tables:\n\nlistings, builders, social_posts, social_post_properties, csv_uploads, user_settings, user_field_mappings.\n\nFrontend state handled with local component state + React Table selection; AuthContext provides session & user.\n\nIntegrations\n------------\n• Mapbox GL JS for maps (minimal grey-line style, builder/listing dots, popups).  \n• OpenAI (via AI SDK) for copy generation (rewrite / prompt) – user supplies own API key.  \n• Edge function geocode-properties for batch geocoding.\n\nWorkflow Highlights\n-------------------\n1. User uploads CSV → dropzone reads headers, auto-maps via rules & user-saved prefs → Sheet component lets user override mapping → optional “Override Existing Values” toggle → Start Import → server-side chunk loop, dedupe by MLS#, upsert records, stats recorded in csv_uploads → history table paginates 5 rows/page.  \n2. Builders & Listings can be created/edited via dialogs; listings reference builder_id.  \n3. Social workflow: select listings in “Social Posts” page → “Create Post” dialog chooses content_type & format_type and associates listings → each post row shows progress (checkbox triad across child listings) & can be opened → detail page lets user edit title/description, AI tools, upload images (Supabase Storage), set checkmarks.  \n4. Dashboard: mini stats + Map (restricted to ≈20 mi DC bbox, flat projection, small coloured dots, popup with address/status/builder/price).  \n5. Analytics: charts (Recharts) for price distribution, top markets, builder performance, etc.  \n6. Settings: Preferences (theme, density), Account (password), Notifications, Style Guide (accent colour HEX + component previews), Integrations (OpenAI, Mapbox, geocode batch button), Data Structure (saved field mappings form with PillInput).\n\n====================================================================\n2.  DRAFT DOCUMENTATION\n====================================================================\n\nNOTE All sections marked with ❓ contain open questions or recommended clarifications.\n\n------------------------------------------------------------\nTABLE OF CONTENTS\n------------------------------------------------------------\n1.  Getting Started (Users)  \n2.  Functional Tour  \n 2.1  Authentication & Session Behaviour  \n 2.2  Dashboard  \n 2.3  Listings Module  \n 2.4  Builders Module  \n 2.5  Social Posts Workflow  \n 2.6  Import Data  \n 2.7  Analytics, Insights, Reports  \n 2.8  Settings & Integrations  \n3.  Data Model & RLS  \n4.  Developer Guide  \n 4.1  Tech Stack & Project Layout  \n 4.2  Environment Variables  \n 4.3  Supabase Schema & Migrations  \n 4.4  Edge Functions  \n 4.5  Running Locally  \n5.  Maintenance & FAQ  \n6.  Road-map / Known Issues\n\n------------------------------------------------------------\n1.  GETTING STARTED (END-USERS)\n------------------------------------------------------------\n1.  Visit /signup to create an account.  \n2.  Confirm email, then sign in at /login.  \n3.  Go to Settings → Integrations and paste:  \n • OpenAI API key (for AI writing)  \n • Mapbox public token (for map widgets)  \n4.  (Optional) pick a brand accent colour under Style Guide; it will apply after refresh.  \n5.  Import your first CSV at Import Data:  \n • Drag-and-drop file  \n • Review auto-mapping summary  \n • Adjust mapping via “Map Fields”  \n • Toggle “Override Existing Values” if you want incoming non-null cells to overwrite existing ones.  \n • Click Start Import and wait for toast confirmation.  \n6.  Navigate:  \n • Listings – spreadsheet of all records.  \n • Builders – company profiles.  \n • Dashboard – high-level KPIs + map.  \n • Social Posts – manage marketing workflow.\n\n------------------------------------------------------------\n2.  FUNCTIONAL TOUR\n------------------------------------------------------------\n\n2.1  Authentication & Session  \n• Email / Password via Supabase Auth.  \n• AuthContext auto-redirects unauth users to /login.  \n• Sessions persisted in cookies; RLS guarantees row-level isolation of user_settings, social posts, csv_uploads, field mappings.\n\n2.2  Dashboard  \n• Stat cards: total listings, active, new-construction, under-construction, avg list price, total builders.  \n• Map (Active & Coming Soon): flat map, 20-mi DC bounds, dot colour by status, popup shows address / status / builder / price.  \n• Right column: Recent Activity snapshot & Market Trends (static placeholders).\n\n2.3  Listings  \n• DataTable with server data (listings + builder join).  \n• Column actions: sort, hide, filter.  \n• Bulk actions drawer (Add to Social Queue, Assign Builder, Hide, Delete).  \n• Per-row menu: view, edit in dialog, add to social queue.  \n• New Listing dialog.  \n• Export → CSV.\n\n2.4  Builders  \n• DataTable similar to listings.  \n• Card view grid.  \n• New / Edit dialogs.  \n• Builder detail page: contact info, stats, finance, specialties, price-over-time bar chart (time-range selector), listing table, placeholder map.  \n• Edit listing builder assignment via Listings page or Assign Builder dialog.\n\n2.5  Social Posts  \n• Top table: all post objects (columns: title, status badge, content_type, format_type, listings count, progress bar, Mark Posted button, Actions).  \n• Row expand reveals child listings subrows with address, status, builder, price, 3 checkboxes (Contacted, Image, Description) – labels above, checkboxes coloured teal (#14b8a6).  \n• Create Post dialog: pick name, content_type, format_type, choose listings (available list filtered to those not already linked in user posts).  \n• Post detail page: editable title + description (inline), content/format dropdowns, status badge; accordion of property cards default-expanded.  \n• Property card: editable description, AI “Wand” menu (Rewrite / Prompt), image upload to Supabase Storage (small thumbnails with delete X), checkbox triad with db update.\n\n2.6  Import Data  \n• Drag-drop zone styled (dashed).  \n• Pre-processing stats panel (records, new vs matched MLS, columns, auto-mapped count, unmatched).  \n• Map Fields sheet: left column CSV header, right dropdown to DB column or “Ignore”. Duplicate DB target detection.  \n• Saves personal mappings to user_field_mappings.  \n• Start Import → progress bar, toast updates.  \n• Backend: chunk size 200, dedupe by mls_number, upsert listings, optional overrideExisting logic, stats persisted in csv_uploads.  \n• History table (5 rows/page) with totals, new, updated, ignored (metadata.ignored_records), failed, status badge.\n\n2.7  Analytics, Insights, Reports  \nAnalytics: price pie, top-market bar, top-builder list, metric cards.  \nInsights: high-level cards, price range bars, distribution list.  \nReports: placeholders for PDF/CSV report download buttons.\n\n2.8  Settings  \nTabs: Preferences, Account, Notifications, Style Guide (palette & component playground), Integrations (OpenAI, Mapbox, “Start Full Geocoding Process” button), Data Structure (table selector + pill inputs for saved field mappings).\n\n------------------------------------------------------------\n3.  DATA MODEL & RLS (key fields)\n------------------------------------------------------------\nlistings  \n• id (uuid PK) • mls_number (unique) • list_price • status • address_line_1, city, state, latitude, longitude • builder_id → builders.id • new_construction (bool) • description • in_social_queue (bool) …\n\nbuilders  \n• id • name • specialties[] • price_range_min/max …\n\nsocial_posts  \n• id • user_id • title • description • status (draft/completed/posted) • content_type • format_type • post_url.\n\nsocial_post_properties  \n• id • social_post_id • property_id (listing) • image_complete • description_complete • contacted_complete • image_urls[] • description.\n\ncsv_uploads  \n• metadata JSON: {duration_seconds, ignored_records, override_existing}.\n\nuser_field_mappings  \n• user_id • target_table_name ('listings' | 'builders') • target_database_column • source_csv_header.\n\nRLS highlights  \n• user_settings / social_* / csv_uploads / user_field_mappings restricted to auth.uid().\n\n------------------------------------------------------------\n4.  DEVELOPER GUIDE\n------------------------------------------------------------\n\n4.1  Tech Stack  \n• Next .js 14 App Router (pages in app/)  \n• React 18 + shadcn/ui + Tailwind CSS + lucide icons.  \n• Supabase JS v2.  \n• Type-safe DB types at /types/supabase.ts (generated).  \n• Recharts, Mapbox GL, PapaParse, Vercel AI SDK.\n\n4.2  Env Vars  \nNEXT_PUBLIC_SUPABASE_URL  \nNEXT_PUBLIC_SUPABASE_ANON_KEY  \nSUPABASE_SERVICE_ROLE_KEY (Edge)  \nNEXT_PUBLIC_MAPBOX_ACCESS_TOKEN (fallback map)  \n(Secrets for CI).  \n\n4.3  Migrations  \nSupabase/migrations/*.sql – run with Supabase CLI or deploy to project.  \n001-003 handle field-mapping table, mapbox key, renaming properties→listings.  \n\n4.4  Edge Function geocode-properties  \n• POST /functions/v1/geocode-properties  \n• Auth header required (session).  \n• Processes batches of 10 listings lacking coordinates; respects DELAY_BETWEEN_REQUESTS_MS 200 ms.\n\n4.5  Local dev  \npnpm i / npm i  \ncp .env.example .env.local (fill keys)  \nnpm run dev  \nSupabase: supabase start (or remote project).  \nEdge function: supabase functions serve geocode-properties --env-file .env.local\n\n------------------------------------------------------------\n5.  MAINTENANCE & FAQ\n------------------------------------------------------------\n• “Create Post button did nothing” usually means required dialog fields empty or no listings selected – check toast error.  \n• Map shows no dots – confirm Mapbox token saved & listings have lat/lng; run geocode batch.  \n• Import stalls – inspect browser console & Supabase logs; large files may hit 10 MB limit.\n\n------------------------------------------------------------\n6.  ROAD-MAP / OPEN QUESTIONS ❓\n------------------------------------------------------------\n❓ Duplicate Prevention – currently dedupe key is mls_number; should we also dedupe by address if MLS blank?  \n❓ Listings table cleanup – migration removed many columns; verify all code paths no longer reference them.  \n❓ Map style – minimal grey/white is inline; consider hosting custom Mapbox style.  \n❓ User roles – only “authenticated” now; need admin?  \n❓ AI token cost guardrails – add token limit?  \n❓ csv_uploads.metadata.ignored_records sometimes null – compute if overrideExisting=false?  \n❓ Analytics queries may hit row-level limit; consider RPC view for large datasets.\n\n====================================================================\n",
      "status": "COMPLETED",
      "startedAt": "2025-06-16T19:58:35.817Z",
      "endedAt": "2025-06-16T19:59:53.336Z",
      "metadata": {
        "attachedFiles": [
          {
            "id": "eAvJcUUl1ynz0tKpgO4NV",
            "source": "vfs",
            "name": "repomix-output-dkl-microapp-2-main.md",
            "type": "application/octet-stream",
            "size": 574571,
            "path": "/synced_repos/repomix-output-dkl-microapp-2-main.md"
          },
          {
            "id": "lKDQNto6QDMe4_X4qzZwQ",
            "source": "vfs",
            "name": "app-prompt-history-1.txt",
            "type": "application/octet-stream",
            "size": 28382,
            "path": "/app-prompt-history-1.txt"
          }
        ],
        "modelId": "tY0lQTJu9ofNB2E2kqCuo:o3",
        "toolCalls": [],
        "toolResults": [],
        "timeToFirstToken": 14452,
        "generationTime": 77520,
        "isTitleGeneration": false,
        "isCompactGeneration": false,
        "promptTokens": null,
        "completionTokens": null,
        "totalTokens": null,
        "providerMetadata": {
          "openai": {}
        }
      },
      "index": 1,
      "parentId": null
    }
  ]
}